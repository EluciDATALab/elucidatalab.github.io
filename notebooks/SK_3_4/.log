2021-01-28 08:23:12,805 [64585] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-01-28 08:23:12,806 [64585] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-01-28 08:23:12,806 [64585] INFO     root:247: [JupyterRequire] Initializing comms.
2021-01-28 08:23:12,809 [64585] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-01-28 08:23:12,811 [64585] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-01-28 08:23:12,811 [64585] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-01-28 08:23:13,322 [64585] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-01-28 08:23:13,322 [64585] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-01-28 08:23:13,322 [64585] INFO     root:247: [JupyterRequire] Initializing comms.
2021-01-28 08:23:13,324 [64585] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-01-28 08:23:13,325 [64585] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-01-28 08:23:13,326 [64585] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-01-28 08:23:19,930 [64585] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-01-28 08:23:19,931 [64585] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-01-28 08:23:19,939 [64585] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=/Users/hcab/.matplotlib
2021-01-28 08:23:19,941 [64585] DEBUG    matplotlib:1480: [JupyterRequire] matplotlib version 3.3.3
2021-01-28 08:23:19,941 [64585] DEBUG    matplotlib:1481: [JupyterRequire] interactive is False
2021-01-28 08:23:19,942 [64585] DEBUG    matplotlib:1482: [JupyterRequire] platform is darwin
2021-01-28 08:23:19,942 [64585] DEBUG    matplotlib:1483: [JupyterRequire] loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'google', 'zope', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', '__future__', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '_socket', 'array', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.sslproto', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'contextvars', 'immutables', 'immutables._map', 'immutables._version', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.file_io', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'jedi._compatibility', 'jedi.file_io', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.common', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.compiled.mixed', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.inference.references', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', '_scproxy', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'ctypes', '_ctypes', 'ctypes._endian', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_21', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'ipykernel.eventloops', 'distutils', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'IPython.core.completerlib', 'plistlib', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'appnope', 'appnope._nope', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.lib.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing._private.pytesttester', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.lib.histograms', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.core._multiarray_tests', 'numpy._distributor_init', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.interval', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arrays.categorical', 'csv', '_csv', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'mmap', 'zipfile', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.util.numba_', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.frame', 'pandas.core.internals.construction', 'pandas.core.reshape', 'pandas.core.reshape.melt', 'pandas.core.reshape.concat', 'pandas.core.reshape.util', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-01-28 08:23:20,019 [64585] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=/Users/hcab/.matplotlib
2021-01-28 08:23:20,025 [64585] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from /Users/hcab/.matplotlib/fontlist-v330.json
2021-01-28 08:23:20,406 [64585] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-01-28 08:23:20,411 [64585] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-01-28 08:30:05,861 [64585] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi
2021-01-28 08:30:08,763 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 08:30:08,763 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-01-28 08:30:08,764 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-01-28 08:30:08,764 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-01-28 08:30:08,764 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 08:30:08,894 [64585] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/Documents/elucidata/elucidata_tools/elucidata/tools/visualization/vis_plotly.py
2021-01-28 09:10:45,833 [64585] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-01-28 09:10:45,836 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-01-28 09:10:45,836 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-01-28 09:10:45,836 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,836 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,836 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:10:45,836 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:10:45,837 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,837 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-01-28 09:10:45,837 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:10:45,837 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,837 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,837 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-01-28 09:10:45,837 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:10:45,837 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,837 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,837 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,838 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,838 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,838 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,838 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,838 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,838 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,838 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,838 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,838 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,838 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-01-28 09:10:45,839 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:10:45,839 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,839 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,839 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,839 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,839 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,839 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,839 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-01-28 09:10:45,839 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:10:45,839 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,840 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,840 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,840 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,840 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,840 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,840 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,840 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,840 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
2021-01-28 09:10:45,840 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,840 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,841 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,841 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,841 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,841 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,841 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,841 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,841 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,841 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-01-28 09:10:45,841 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-01-28 09:10:45,841 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,841 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:10:45,842 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,842 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-01-28 09:10:45,842 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,842 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,842 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,842 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,842 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
2021-01-28 09:10:45,842 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,842 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,842 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,843 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,843 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,843 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,843 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:10:45,843 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,843 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,843 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,843 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,843 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,843 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,844 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,844 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,844 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal 800 condensed>) = 10.629999999999999
2021-01-28 09:10:45,844 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-01-28 09:10:45,844 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,844 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,844 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,844 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:10:45,844 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,844 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
2021-01-28 09:10:45,845 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,845 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,845 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,845 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,845 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,845 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,845 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,845 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,845 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2021-01-28 09:10:45,845 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,845 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,846 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,846 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,846 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,846 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,846 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,846 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,846 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,846 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
2021-01-28 09:10:45,846 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,847 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
2021-01-28 09:10:45,847 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,847 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:10:45,847 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,847 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,847 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,847 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,847 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,847 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal 400 condensed>) = 10.25
2021-01-28 09:10:45,847 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,847 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,848 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,848 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,848 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,848 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,848 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,848 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,848 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,848 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,848 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal 500 condensed>) = 10.344999999999999
2021-01-28 09:10:45,848 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,849 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,849 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,849 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,849 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,849 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,849 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYork.ttf) normal normal 425 normal>) = 10.07375
2021-01-28 09:10:45,849 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,849 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,849 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,849 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal 700 condensed>) = 10.535
2021-01-28 09:10:45,849 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
2021-01-28 09:10:45,849 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,850 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:10:45,850 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,850 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
2021-01-28 09:10:45,850 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,850 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,850 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,850 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,850 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,850 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,850 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
2021-01-28 09:10:45,850 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal 700 condensed>) = 10.535
2021-01-28 09:10:45,851 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,851 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Display' (SFCompactDisplay.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,851 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2021-01-28 09:10:45,851 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,851 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 300 normal>) = 11.145
2021-01-28 09:10:45,851 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,851 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,851 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,851 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,851 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,851 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,851 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,852 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,852 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,852 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,852 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,852 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,852 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,852 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,852 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,852 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,852 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,852 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
2021-01-28 09:10:45,852 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,853 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,853 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,853 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
2021-01-28 09:10:45,853 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,853 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,853 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,853 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,853 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,853 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,854 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,854 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,854 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
2021-01-28 09:10:45,854 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2021-01-28 09:10:45,854 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,854 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,854 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,854 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,854 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,854 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,854 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,855 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,855 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,855 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,855 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,855 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:10:45,855 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,855 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,855 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,855 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactTextItalic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:10:45,856 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,856 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:10:45,856 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,856 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactText.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,856 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
2021-01-28 09:10:45,856 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,856 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,856 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,857 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
2021-01-28 09:10:45,857 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,857 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,857 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,857 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,857 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,857 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,857 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,857 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,857 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,857 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,858 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,858 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,858 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,858 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,858 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:10:45,858 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2021-01-28 09:10:45,858 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
2021-01-28 09:10:45,858 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,858 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal 600 condensed>) = 10.44
2021-01-28 09:10:45,858 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
2021-01-28 09:10:45,858 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,858 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
2021-01-28 09:10:45,859 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
2021-01-28 09:10:45,859 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,859 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,859 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,859 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,859 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
2021-01-28 09:10:45,859 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,859 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,859 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,859 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2021-01-28 09:10:45,859 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,859 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,860 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,860 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:10:45,860 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
2021-01-28 09:10:45,860 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,860 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal 500 condensed>) = 10.344999999999999
2021-01-28 09:10:45,860 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
2021-01-28 09:10:45,860 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
2021-01-28 09:10:45,860 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,860 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,861 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,861 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,861 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,861 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:10:45,861 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,861 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:10:45,861 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,861 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
2021-01-28 09:10:45,861 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
2021-01-28 09:10:45,861 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,861 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,862 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,862 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,862 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,862 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
2021-01-28 09:10:45,862 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,862 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,862 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
2021-01-28 09:10:45,862 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,862 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,862 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,862 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,862 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,863 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,863 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,863 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,863 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:10:45,863 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 425 normal>) = 11.07375
2021-01-28 09:10:45,863 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:10:45,863 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,863 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,864 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,864 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:10:45,864 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,864 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,864 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,864 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 300 normal>) = 10.145
2021-01-28 09:10:45,864 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,864 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,864 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,865 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal 300 condensed>) = 10.344999999999999
2021-01-28 09:10:45,865 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
2021-01-28 09:10:45,865 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,865 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,865 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal 400 condensed>) = 10.25
2021-01-28 09:10:45,865 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:10:45,865 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,866 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-01-28 09:10:45,866 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,866 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,866 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,866 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
2021-01-28 09:10:45,866 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,866 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,866 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,866 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,866 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal 900 condensed>) = 10.725
2021-01-28 09:10:45,867 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,867 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,867 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,867 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,867 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,867 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,867 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,867 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,867 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-01-28 09:10:45,867 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,867 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,868 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,868 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
2021-01-28 09:10:45,868 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,868 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,868 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2021-01-28 09:10:45,868 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:10:45,868 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,868 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:10:45,868 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,868 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,868 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,868 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,869 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,869 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,869 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,869 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,869 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal 600 condensed>) = 10.44
2021-01-28 09:10:45,869 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,869 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,869 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,869 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
2021-01-28 09:10:45,869 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,869 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,869 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,870 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,870 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,870 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,870 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
2021-01-28 09:10:45,870 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,870 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,870 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
2021-01-28 09:10:45,870 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal 600 condensed>) = 10.44
2021-01-28 09:10:45,870 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:10:45,870 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
2021-01-28 09:10:45,870 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
2021-01-28 09:10:45,870 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:10:45,871 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,871 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:10:45,871 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
2021-01-28 09:10:45,871 [64585] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2021-01-28 09:13:30,494 [64585] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.0.
2021-01-28 09:13:30,496 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-01-28 09:13:30,496 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-01-28 09:13:30,496 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,496 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,496 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:13:30,496 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:13:30,496 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,497 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-01-28 09:13:30,497 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:13:30,497 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,497 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,497 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-01-28 09:13:30,497 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:13:30,497 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,497 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,497 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,497 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,497 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,497 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,498 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,498 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,498 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,498 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,498 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,498 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,498 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-01-28 09:13:30,498 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:13:30,498 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,498 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,498 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,498 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,499 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,499 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,499 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-01-28 09:13:30,499 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:13:30,499 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,499 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,499 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,499 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,499 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,499 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,499 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,499 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,500 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
2021-01-28 09:13:30,500 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,500 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,500 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,500 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,500 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,500 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,500 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,500 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,500 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,500 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-01-28 09:13:30,500 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-01-28 09:13:30,501 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,501 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:13:30,501 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,501 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-01-28 09:13:30,501 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,501 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,501 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,501 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,501 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
2021-01-28 09:13:30,501 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,501 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,501 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,501 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,502 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,502 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,502 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:13:30,502 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,502 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,502 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,502 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,502 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,502 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,502 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,502 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,503 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal 800 condensed>) = 10.629999999999999
2021-01-28 09:13:30,503 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-01-28 09:13:30,503 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,503 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,503 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,503 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:13:30,503 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,503 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
2021-01-28 09:13:30,503 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,503 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,503 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,503 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,504 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,504 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,504 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,504 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,504 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2021-01-28 09:13:30,504 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,504 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,505 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,505 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,505 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,505 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,505 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,505 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,505 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,505 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
2021-01-28 09:13:30,506 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,506 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
2021-01-28 09:13:30,506 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,506 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:13:30,506 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,506 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,506 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,506 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,506 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,506 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal 400 condensed>) = 10.25
2021-01-28 09:13:30,506 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,506 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,507 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,507 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,507 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,507 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,507 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,507 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,507 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,507 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,507 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal 500 condensed>) = 10.344999999999999
2021-01-28 09:13:30,507 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,507 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,507 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,508 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,508 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,508 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,508 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYork.ttf) normal normal 425 normal>) = 10.07375
2021-01-28 09:13:30,508 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,508 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,508 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,508 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal 700 condensed>) = 10.535
2021-01-28 09:13:30,508 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
2021-01-28 09:13:30,508 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,508 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:13:30,508 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,508 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
2021-01-28 09:13:30,509 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,509 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,509 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,509 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,509 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,509 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,509 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
2021-01-28 09:13:30,509 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal 700 condensed>) = 10.535
2021-01-28 09:13:30,509 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,509 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Display' (SFCompactDisplay.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,509 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2021-01-28 09:13:30,509 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,509 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 300 normal>) = 11.145
2021-01-28 09:13:30,510 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,510 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,510 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,510 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,510 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,510 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,510 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,510 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,510 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,510 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,510 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,510 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,510 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,511 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,511 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,511 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,511 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,511 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
2021-01-28 09:13:30,511 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,511 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,511 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,511 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
2021-01-28 09:13:30,511 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,511 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,511 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,511 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,512 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,512 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,512 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,512 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,512 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
2021-01-28 09:13:30,512 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2021-01-28 09:13:30,512 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,512 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,512 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,512 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,512 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,512 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,512 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,513 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,513 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,513 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,513 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,513 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:13:30,513 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,513 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,513 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,513 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactTextItalic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:13:30,513 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,514 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:13:30,514 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,514 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactText.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,514 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
2021-01-28 09:13:30,514 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,514 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,514 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,514 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
2021-01-28 09:13:30,514 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,515 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,515 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,515 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,515 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,515 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,515 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,515 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,515 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,515 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,515 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,515 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,516 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,516 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,516 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:13:30,516 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2021-01-28 09:13:30,516 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
2021-01-28 09:13:30,516 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,516 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal 600 condensed>) = 10.44
2021-01-28 09:13:30,516 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
2021-01-28 09:13:30,516 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,517 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
2021-01-28 09:13:30,517 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
2021-01-28 09:13:30,517 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,517 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,517 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,517 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,517 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
2021-01-28 09:13:30,517 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,517 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,517 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,518 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2021-01-28 09:13:30,518 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,518 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,518 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,518 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:13:30,518 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
2021-01-28 09:13:30,518 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,518 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal 500 condensed>) = 10.344999999999999
2021-01-28 09:13:30,518 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
2021-01-28 09:13:30,518 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
2021-01-28 09:13:30,518 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,518 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,518 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,519 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,519 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,519 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:13:30,519 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,519 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:13:30,519 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,519 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
2021-01-28 09:13:30,519 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
2021-01-28 09:13:30,519 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,519 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,519 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,519 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,520 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,520 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
2021-01-28 09:13:30,520 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,520 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,520 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
2021-01-28 09:13:30,520 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,520 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,520 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,520 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,521 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,521 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,521 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,521 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,521 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:13:30,521 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 425 normal>) = 11.07375
2021-01-28 09:13:30,521 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:13:30,521 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,521 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,521 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,521 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:13:30,521 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,521 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,522 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,522 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 300 normal>) = 10.145
2021-01-28 09:13:30,522 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,522 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,522 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,522 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal 300 condensed>) = 10.344999999999999
2021-01-28 09:13:30,522 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
2021-01-28 09:13:30,522 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,522 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,522 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal 400 condensed>) = 10.25
2021-01-28 09:13:30,522 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:13:30,522 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,522 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-01-28 09:13:30,523 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,523 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,523 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,523 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
2021-01-28 09:13:30,523 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,523 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,523 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,523 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,523 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal 900 condensed>) = 10.725
2021-01-28 09:13:30,523 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,523 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,523 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,524 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,524 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,524 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,524 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,524 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,524 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-01-28 09:13:30,524 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,524 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,524 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,524 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
2021-01-28 09:13:30,524 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,525 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,525 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2021-01-28 09:13:30,525 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:13:30,525 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,525 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:13:30,525 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,525 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,525 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,525 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,525 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,525 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,525 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,525 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,526 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal 600 condensed>) = 10.44
2021-01-28 09:13:30,526 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,526 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,526 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,526 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
2021-01-28 09:13:30,526 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,526 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,526 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,526 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,526 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,526 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,526 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
2021-01-28 09:13:30,526 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,527 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,527 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
2021-01-28 09:13:30,527 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal 600 condensed>) = 10.44
2021-01-28 09:13:30,527 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:13:30,527 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
2021-01-28 09:13:30,527 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
2021-01-28 09:13:30,527 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:13:30,527 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,527 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:13:30,527 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
2021-01-28 09:13:30,528 [64585] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.0 to DejaVu Sans ('/Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2021-01-28 09:13:46,219 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 09:13:46,220 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 4
2021-01-28 09:13:46,220 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:4]
2021-01-28 09:13:46,223 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 4 (to 3 in part parser)
2021-01-28 09:13:46,223 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 09:13:46,238 [64585] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/seaborn/__init__.py
2021-01-28 09:13:48,661 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 09:13:48,668 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 4
2021-01-28 09:13:48,668 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:3] new[1:3]
2021-01-28 09:13:48,669 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:3] new[1:3]
2021-01-28 09:13:48,669 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[4:4] new[4:4]
2021-01-28 09:13:48,670 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 4 to 4 (to 3 in part parser)
2021-01-28 09:13:48,670 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 09:14:02,745 [64585] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2021-01-28 09:14:02,745 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-01-28 09:14:02,745 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-01-28 09:14:02,745 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,745 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,745 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:14:02,745 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:14:02,746 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,746 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-01-28 09:14:02,746 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:14:02,746 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,746 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,746 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-01-28 09:14:02,746 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:14:02,746 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,746 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,746 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,746 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,746 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,746 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,747 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,747 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,747 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,747 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,747 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,747 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,747 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-01-28 09:14:02,747 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:14:02,747 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,747 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,747 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,747 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,747 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,748 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,748 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-01-28 09:14:02,748 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:14:02,748 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,748 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,748 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,748 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,748 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,748 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,748 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,748 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,748 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
2021-01-28 09:14:02,748 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,749 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,749 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,749 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,749 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,749 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,749 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,749 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,749 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,749 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-01-28 09:14:02,749 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-01-28 09:14:02,749 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,749 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:14:02,750 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,750 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-01-28 09:14:02,750 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,750 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,750 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,750 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,750 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
2021-01-28 09:14:02,750 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,750 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,750 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,750 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,750 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,750 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,751 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:14:02,751 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,751 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,751 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,751 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,751 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,751 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,751 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,751 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,751 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal 800 condensed>) = 10.629999999999999
2021-01-28 09:14:02,751 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-01-28 09:14:02,751 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,751 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,752 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,752 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:14:02,752 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,752 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
2021-01-28 09:14:02,752 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,752 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,752 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,752 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,752 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,752 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,752 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,752 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,752 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2021-01-28 09:14:02,753 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,753 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,753 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,753 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,753 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,753 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,753 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,753 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,753 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,753 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
2021-01-28 09:14:02,753 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,753 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
2021-01-28 09:14:02,753 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,754 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:14:02,754 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,754 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,754 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,754 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,754 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,754 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal 400 condensed>) = 10.25
2021-01-28 09:14:02,754 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,754 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,754 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,754 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,754 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,754 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,755 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,755 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,755 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,755 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,755 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal 500 condensed>) = 10.344999999999999
2021-01-28 09:14:02,755 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,755 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,755 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,755 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,755 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,755 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,755 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYork.ttf) normal normal 425 normal>) = 10.07375
2021-01-28 09:14:02,756 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,756 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,756 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,756 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal 700 condensed>) = 10.535
2021-01-28 09:14:02,756 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
2021-01-28 09:14:02,756 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,756 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:14:02,756 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,756 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
2021-01-28 09:14:02,756 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,756 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,756 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,757 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,757 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,757 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,757 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
2021-01-28 09:14:02,757 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal 700 condensed>) = 10.535
2021-01-28 09:14:02,757 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,757 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Display' (SFCompactDisplay.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,757 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2021-01-28 09:14:02,758 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,758 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 300 normal>) = 11.145
2021-01-28 09:14:02,758 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,758 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,758 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,758 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,758 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,758 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,758 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,759 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,759 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,759 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,759 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,759 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,759 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,759 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,759 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,759 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,760 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,760 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
2021-01-28 09:14:02,760 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,760 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,760 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,760 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
2021-01-28 09:14:02,760 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,760 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,760 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,761 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,761 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,761 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,761 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,761 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,761 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
2021-01-28 09:14:02,762 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2021-01-28 09:14:02,762 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,762 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,762 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,762 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,762 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,762 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,762 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,762 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,762 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,763 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,763 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,763 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:14:02,763 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,763 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,763 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,763 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactTextItalic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:14:02,763 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,763 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:14:02,763 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,763 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactText.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,763 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
2021-01-28 09:14:02,763 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,763 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,764 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,764 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
2021-01-28 09:14:02,764 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,764 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,764 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,764 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,764 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,764 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,764 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,764 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,764 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,764 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,764 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,765 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,765 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,765 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,765 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:14:02,765 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2021-01-28 09:14:02,765 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
2021-01-28 09:14:02,765 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,765 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal 600 condensed>) = 10.44
2021-01-28 09:14:02,765 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
2021-01-28 09:14:02,765 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,765 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
2021-01-28 09:14:02,765 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
2021-01-28 09:14:02,765 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,765 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,766 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,766 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,766 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
2021-01-28 09:14:02,766 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,766 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,766 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,766 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2021-01-28 09:14:02,766 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,766 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,766 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,766 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:14:02,766 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
2021-01-28 09:14:02,766 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,766 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal 500 condensed>) = 10.344999999999999
2021-01-28 09:14:02,767 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
2021-01-28 09:14:02,767 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
2021-01-28 09:14:02,767 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,767 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,767 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,767 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,767 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,767 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:14:02,767 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,767 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:14:02,767 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,767 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
2021-01-28 09:14:02,767 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
2021-01-28 09:14:02,767 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,768 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,768 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,768 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,768 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,768 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
2021-01-28 09:14:02,768 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,768 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,768 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
2021-01-28 09:14:02,768 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,768 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,768 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,768 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,768 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,768 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,769 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,769 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,769 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 09:14:02,769 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 425 normal>) = 11.07375
2021-01-28 09:14:02,769 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 09:14:02,769 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,769 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,769 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,769 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:14:02,769 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,769 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,770 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,770 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 300 normal>) = 10.145
2021-01-28 09:14:02,770 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,770 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,770 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,770 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal 300 condensed>) = 10.344999999999999
2021-01-28 09:14:02,770 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
2021-01-28 09:14:02,770 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,770 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,770 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal 400 condensed>) = 10.25
2021-01-28 09:14:02,770 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:14:02,770 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,770 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-01-28 09:14:02,771 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,771 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,771 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,771 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
2021-01-28 09:14:02,771 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,771 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,771 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,771 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,771 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal 900 condensed>) = 10.725
2021-01-28 09:14:02,771 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,771 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,771 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,772 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,772 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,772 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,772 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,772 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,772 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-01-28 09:14:02,772 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,772 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,772 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,772 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
2021-01-28 09:14:02,773 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,773 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,773 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2021-01-28 09:14:02,774 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:14:02,774 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,774 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:14:02,774 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,775 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,775 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,775 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,775 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,775 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,775 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,775 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,776 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal 600 condensed>) = 10.44
2021-01-28 09:14:02,776 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,776 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,776 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,776 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
2021-01-28 09:14:02,776 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,776 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,776 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,776 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,776 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,776 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,776 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
2021-01-28 09:14:02,776 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,777 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,777 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
2021-01-28 09:14:02,777 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal 600 condensed>) = 10.44
2021-01-28 09:14:02,777 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-01-28 09:14:02,777 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
2021-01-28 09:14:02,777 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
2021-01-28 09:14:02,777 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 09:14:02,777 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,777 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2021-01-28 09:14:02,777 [64585] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
2021-01-28 09:14:02,777 [64585] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to DejaVu Sans ('/Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2021-01-28 09:14:57,656 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 09:14:57,658 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 10
2021-01-28 09:14:57,658 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:3] new[1:3]
2021-01-28 09:14:57,658 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:3] new[1:3]
2021-01-28 09:14:57,658 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[4:4] new[4:10]
2021-01-28 09:14:57,662 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 4 to 10 (to 9 in part parser)
2021-01-28 09:14:57,662 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 09:15:00,111 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 09:15:00,111 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 10; new: 10
2021-01-28 09:15:00,111 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:9] new[1:9]
2021-01-28 09:15:00,112 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:9] new[1:9]
2021-01-28 09:15:00,112 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[10:10] new[10:10]
2021-01-28 09:15:00,112 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 10 to 10 (to 9 in part parser)
2021-01-28 09:15:00,112 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 09:17:56,754 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 09:17:56,755 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 10; new: 17
2021-01-28 09:17:56,755 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:7] new[1:7]
2021-01-28 09:17:56,756 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:7] new[1:7]
2021-01-28 09:17:56,756 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[8:10] new[8:17]
2021-01-28 09:17:56,762 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 8 to 17 (to 16 in part parser)
2021-01-28 09:17:56,762 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 09:17:56,786 [64585] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/Documents/elucidata/elucidata_tools/elucidata/tools/__init__.py
2021-01-28 09:17:56,798 [64585] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/Documents/elucidata/elucidata_tools/elucidata/tools/preprocessing/__init__.py
2021-01-28 09:17:57,224 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 09:17:57,224 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 17; new: 17
2021-01-28 09:17:57,225 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:16] new[1:16]
2021-01-28 09:17:57,225 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:15] new[1:15]
2021-01-28 09:17:57,225 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 16 to 17 (to 16 in part parser)
2021-01-28 09:17:57,225 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[17:17] new[17:17]
2021-01-28 09:17:57,226 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 09:17:58,837 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 09:17:58,837 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 17; new: 17
2021-01-28 09:17:58,837 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:16] new[1:16]
2021-01-28 09:17:58,837 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:15] new[1:15]
2021-01-28 09:17:58,838 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 16 to 17 (to 16 in part parser)
2021-01-28 09:17:58,838 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[17:17] new[17:17]
2021-01-28 09:17:58,838 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 09:17:59,994 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 09:17:59,994 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 17; new: 17
2021-01-28 09:17:59,994 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:16] new[1:16]
2021-01-28 09:17:59,994 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:15] new[1:15]
2021-01-28 09:17:59,994 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 16 to 17 (to 16 in part parser)
2021-01-28 09:17:59,995 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[17:17] new[17:17]
2021-01-28 09:17:59,995 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 09:18:01,413 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 09:18:01,413 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 17; new: 17
2021-01-28 09:18:01,413 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:16] new[1:16]
2021-01-28 09:18:01,413 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:15] new[1:15]
2021-01-28 09:18:01,414 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 16 to 17 (to 16 in part parser)
2021-01-28 09:18:01,414 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[17:17] new[17:17]
2021-01-28 09:18:01,414 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 09:18:01,436 [64585] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/Documents/elucidata/elucidata_tools/elucidata/tools/preprocessing/outliers.py
2021-01-28 09:18:03,438 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 09:18:03,438 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 17; new: 17
2021-01-28 09:18:03,438 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:16] new[1:16]
2021-01-28 09:18:03,439 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:15] new[1:15]
2021-01-28 09:18:03,439 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 16 to 17 (to 16 in part parser)
2021-01-28 09:18:03,440 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[17:17] new[17:17]
2021-01-28 09:18:03,440 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 09:18:12,628 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 09:18:12,629 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 17; new: 18
2021-01-28 09:18:12,629 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:16] new[1:16]
2021-01-28 09:18:12,629 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:15] new[1:15]
2021-01-28 09:18:12,630 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 16 to 17 (to 17 in part parser)
2021-01-28 09:18:12,630 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[17:17] new[17:18]
2021-01-28 09:18:12,630 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 18 to 18 (to 17 in part parser)
2021-01-28 09:18:12,630 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 09:18:12,688 [64585] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2021-01-28 09:18:51,374 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 09:18:51,375 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 18; new: 19
2021-01-28 09:18:51,375 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:17] new[1:17]
2021-01-28 09:18:51,376 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:17] new[1:17]
2021-01-28 09:18:51,376 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[18:18] new[18:19]
2021-01-28 09:18:51,376 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 18 to 19 (to 18 in part parser)
2021-01-28 09:18:51,377 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 09:18:57,222 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 09:18:57,223 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 19; new: 19
2021-01-28 09:18:57,223 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:18] new[1:18]
2021-01-28 09:18:57,223 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:18] new[1:18]
2021-01-28 09:18:57,223 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[19:19] new[19:19]
2021-01-28 09:18:57,224 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 19 to 19 (to 18 in part parser)
2021-01-28 09:18:57,224 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 09:55:50,346 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 09:55:50,348 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 19; new: 1
2021-01-28 09:55:50,348 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:19] new[1:1]
2021-01-28 09:55:50,349 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-01-28 09:55:50,349 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 09:55:53,238 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 09:55:53,238 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-01-28 09:55:53,239 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-01-28 09:55:53,239 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-01-28 09:55:53,239 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 09:55:53,243 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 09:55:53,244 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 503; new: 538
2021-01-28 09:55:53,245 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:199] new[1:199]
2021-01-28 09:55:53,245 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[2:198] new[1:198]
2021-01-28 09:55:53,245 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 199 to 199 (to 199 in part parser)
2021-01-28 09:55:53,246 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[200:200] new[200:200]
2021-01-28 09:55:53,253 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 200 to 229 (to 231 in part parser)
2021-01-28 09:55:53,253 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[201:208] new[201:208]
2021-01-28 09:55:53,253 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[209:210] new[209:210]
2021-01-28 09:55:53,253 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[211:218] new[211:218]
2021-01-28 09:55:53,253 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[219:219] new[219:219]
2021-01-28 09:55:53,253 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[220:271] new[220:271]
2021-01-28 09:55:53,253 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[232:269] new[230:233]
2021-01-28 09:55:53,262 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 234 to 271 (to 271 in part parser)
2021-01-28 09:55:53,262 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[insert] old[272:271] new[272:300]
2021-01-28 09:55:53,274 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 272 to 319 (to 321 in part parser)
2021-01-28 09:55:53,274 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[272:273] new[301:302]
2021-01-28 09:55:53,274 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[274:276] new[303:311]
2021-01-28 09:55:53,274 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[277:503] new[312:538]
2021-01-28 09:55:53,275 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[287:502] new[320:537]
2021-01-28 09:55:53,276 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 09:55:57,140 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 09:55:57,140 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-01-28 09:55:57,140 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-01-28 09:55:57,141 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-01-28 09:55:57,141 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 10:02:17,489 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 10:02:17,491 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-01-28 10:02:17,491 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-01-28 10:02:17,492 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-01-28 10:02:17,492 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 10:02:17,494 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 10:02:17,495 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 538; new: 538
2021-01-28 10:02:17,495 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:308] new[1:308]
2021-01-28 10:02:17,496 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[2:319] new[1:302]
2021-01-28 10:02:17,496 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 303 to 302 (to 302 in part parser)
2021-01-28 10:02:17,497 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 303 to 308 (to 308 in part parser)
2021-01-28 10:02:17,498 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[309:309] new[309:309]
2021-01-28 10:02:17,498 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 309 to 309 (to 310 in part parser)
2021-01-28 10:02:17,499 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[310:538] new[310:538]
2021-01-28 10:02:17,499 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[311:319] new[310:319]
2021-01-28 10:02:17,499 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[322:537] new[320:537]
2021-01-28 10:02:17,500 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 10:06:26,570 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 10:06:26,572 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-01-28 10:06:26,572 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-01-28 10:06:26,573 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-01-28 10:06:26,573 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 10:06:29,293 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 10:06:29,293 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-01-28 10:06:29,293 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-01-28 10:06:29,293 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-01-28 10:06:29,293 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 10:06:29,300 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 10:06:29,303 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 375; new: 380
2021-01-28 10:06:29,303 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:20] new[1:20]
2021-01-28 10:06:29,304 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[3:15] new[1:15]
2021-01-28 10:06:29,304 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 16 to 17 (to 17 in part parser)
2021-01-28 10:06:29,316 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 18 to 73 (to 75 in part parser)
2021-01-28 10:06:29,316 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[21:21] new[21:22]
2021-01-28 10:06:29,316 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[22:39] new[23:40]
2021-01-28 10:06:29,316 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[insert] old[40:39] new[41:42]
2021-01-28 10:06:29,316 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[40:46] new[43:49]
2021-01-28 10:06:29,316 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[47:47] new[50:50]
2021-01-28 10:06:29,316 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[48:48] new[51:51]
2021-01-28 10:06:29,317 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[49:49] new[52:53]
2021-01-28 10:06:29,317 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[50:75] new[54:79]
2021-01-28 10:06:29,319 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 74 to 81 (to 83 in part parser)
2021-01-28 10:06:29,319 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[76:76] new[80:81]
2021-01-28 10:06:29,320 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[77:375] new[82:380]
2021-01-28 10:06:29,320 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[79:374] new[82:379]
2021-01-28 10:06:29,323 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 10:06:35,849 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 10:06:35,849 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-01-28 10:06:35,849 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-01-28 10:06:35,850 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-01-28 10:06:35,850 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 10:06:39,033 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 10:06:39,033 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-01-28 10:06:39,033 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-01-28 10:06:39,034 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-01-28 10:06:39,034 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 10:39:30,089 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 10:39:30,092 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 13
2021-01-28 10:39:30,092 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:13]
2021-01-28 10:39:30,097 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 13 (to 12 in part parser)
2021-01-28 10:39:30,098 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 10:39:30,106 [64585] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 10:39:30,107 [64585] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 538; new: 545
2021-01-28 10:39:30,108 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:231] new[1:231]
2021-01-28 10:39:30,109 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[2:229] new[1:229]
2021-01-28 10:39:30,109 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 230 to 232 (to 232 in part parser)
2021-01-28 10:39:30,109 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[insert] old[232:231] new[232:261]
2021-01-28 10:39:30,130 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 233 to 299 (to 301 in part parser)
2021-01-28 10:39:30,130 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[232:271] new[262:301]
2021-01-28 10:39:30,135 [64585] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 300 to 326 (to 328 in part parser)
2021-01-28 10:39:30,135 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[delete] old[272:300] new[302:301]
2021-01-28 10:39:30,136 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[301:308] new[302:309]
2021-01-28 10:39:30,136 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[309:309] new[310:316]
2021-01-28 10:39:30,136 [64585] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[310:538] new[317:545]
2021-01-28 10:39:30,136 [64585] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[322:537] new[327:544]
2021-01-28 10:39:30,139 [64585] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 10:43:40,522 [71182] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-01-28 10:43:40,523 [71182] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-01-28 10:43:40,523 [71182] INFO     root:247: [JupyterRequire] Initializing comms.
2021-01-28 10:43:40,525 [71182] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-01-28 10:43:40,526 [71182] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-01-28 10:43:40,526 [71182] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-01-28 10:43:44,030 [71182] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-01-28 10:43:44,031 [71182] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-01-28 10:43:44,036 [71182] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=/Users/hcab/.matplotlib
2021-01-28 10:43:44,039 [71182] DEBUG    matplotlib:1480: [JupyterRequire] matplotlib version 3.3.3
2021-01-28 10:43:44,039 [71182] DEBUG    matplotlib:1481: [JupyterRequire] interactive is False
2021-01-28 10:43:44,040 [71182] DEBUG    matplotlib:1482: [JupyterRequire] platform is darwin
2021-01-28 10:43:44,040 [71182] DEBUG    matplotlib:1483: [JupyterRequire] loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'google', 'zope', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', '__future__', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '_socket', 'array', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.sslproto', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'contextvars', 'immutables', 'immutables._map', 'immutables._version', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.file_io', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'jedi._compatibility', 'jedi.file_io', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.common', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.compiled.mixed', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.inference.references', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', '_scproxy', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'ctypes', '_ctypes', 'ctypes._endian', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_21', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'ipykernel.eventloops', 'distutils', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'IPython.core.completerlib', 'plistlib', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'appnope', 'appnope._nope', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.lib.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing._private.pytesttester', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.lib.histograms', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.core._multiarray_tests', 'numpy._distributor_init', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.interval', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arrays.categorical', 'csv', '_csv', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'mmap', 'zipfile', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.util.numba_', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.frame', 'pandas.core.internals.construction', 'pandas.core.reshape', 'pandas.core.reshape.melt', 'pandas.core.reshape.concat', 'pandas.core.reshape.util', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-01-28 10:43:44,099 [71182] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=/Users/hcab/.matplotlib
2021-01-28 10:43:44,102 [71182] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from /Users/hcab/.matplotlib/fontlist-v330.json
2021-01-28 10:43:44,498 [71182] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-01-28 10:43:44,505 [71182] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-01-28 10:43:58,636 [71182] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2021-01-28 10:43:58,638 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-01-28 10:43:58,638 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-01-28 10:43:58,638 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,638 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,638 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:43:58,639 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-01-28 10:43:58,639 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,639 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-01-28 10:43:58,639 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 10:43:58,639 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,639 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,639 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-01-28 10:43:58,639 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:43:58,639 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,639 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,639 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,639 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,640 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,640 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,640 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,640 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,640 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,640 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,640 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,640 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,640 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-01-28 10:43:58,640 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:43:58,640 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,641 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,641 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,641 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,641 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,641 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,641 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-01-28 10:43:58,641 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-01-28 10:43:58,641 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,641 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,641 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,641 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,642 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,642 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,642 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,642 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,642 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
2021-01-28 10:43:58,642 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,642 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,643 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,643 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,643 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,643 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,643 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,643 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,643 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,643 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-01-28 10:43:58,643 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-01-28 10:43:58,644 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,644 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
2021-01-28 10:43:58,644 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,644 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-01-28 10:43:58,644 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,644 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,644 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,644 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,644 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
2021-01-28 10:43:58,644 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,645 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,645 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,645 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,645 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,645 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,645 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 10:43:58,645 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,645 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,645 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,645 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,645 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,646 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,646 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,646 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,646 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal 800 condensed>) = 10.629999999999999
2021-01-28 10:43:58,646 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-01-28 10:43:58,646 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,646 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,646 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,646 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:43:58,646 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,646 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
2021-01-28 10:43:58,647 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,647 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,647 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,647 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,647 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,647 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,647 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,647 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,647 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2021-01-28 10:43:58,647 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,648 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,648 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,648 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,648 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,648 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,648 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,649 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,649 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,649 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
2021-01-28 10:43:58,649 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,649 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
2021-01-28 10:43:58,649 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,649 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
2021-01-28 10:43:58,649 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,650 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,650 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,650 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,650 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,650 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal 400 condensed>) = 10.25
2021-01-28 10:43:58,650 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,650 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,650 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,650 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,651 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,651 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,651 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,651 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,651 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,651 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,651 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal 500 condensed>) = 10.344999999999999
2021-01-28 10:43:58,652 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,652 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,652 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,652 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,652 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,652 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,652 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYork.ttf) normal normal 425 normal>) = 10.07375
2021-01-28 10:43:58,652 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,652 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,652 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,652 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal 700 condensed>) = 10.535
2021-01-28 10:43:58,653 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
2021-01-28 10:43:58,653 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,653 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:43:58,653 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,653 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
2021-01-28 10:43:58,653 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,653 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,653 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,653 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,653 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,653 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,653 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
2021-01-28 10:43:58,654 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal 700 condensed>) = 10.535
2021-01-28 10:43:58,654 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,654 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Display' (SFCompactDisplay.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,654 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2021-01-28 10:43:58,654 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,654 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 300 normal>) = 11.145
2021-01-28 10:43:58,654 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,654 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,654 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,654 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,654 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,654 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,655 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,655 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,655 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,655 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,655 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,655 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,655 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,655 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,655 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,656 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,656 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,656 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
2021-01-28 10:43:58,656 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,656 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,656 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,656 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
2021-01-28 10:43:58,656 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,656 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,656 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,657 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,657 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,657 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,657 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,657 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,657 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
2021-01-28 10:43:58,657 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2021-01-28 10:43:58,657 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,657 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,657 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,657 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,658 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,658 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,658 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,658 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,658 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,658 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,658 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,658 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:43:58,658 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,658 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,658 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,658 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactTextItalic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:43:58,659 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,659 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 10:43:58,659 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,659 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactText.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,659 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
2021-01-28 10:43:58,659 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,659 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,659 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,659 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
2021-01-28 10:43:58,659 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,659 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,659 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,660 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,660 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,660 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,660 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,660 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,660 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,660 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,660 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,660 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,660 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,660 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,660 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:43:58,660 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2021-01-28 10:43:58,661 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
2021-01-28 10:43:58,661 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,661 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal 600 condensed>) = 10.44
2021-01-28 10:43:58,661 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
2021-01-28 10:43:58,661 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,661 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
2021-01-28 10:43:58,661 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
2021-01-28 10:43:58,661 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,661 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,661 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,661 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,661 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
2021-01-28 10:43:58,662 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,662 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,662 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,662 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2021-01-28 10:43:58,662 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,662 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,662 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,662 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:43:58,663 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
2021-01-28 10:43:58,663 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,663 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal 500 condensed>) = 10.344999999999999
2021-01-28 10:43:58,663 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
2021-01-28 10:43:58,663 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
2021-01-28 10:43:58,663 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,663 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,664 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,664 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,664 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,664 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 10:43:58,664 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,664 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:43:58,664 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,664 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
2021-01-28 10:43:58,664 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
2021-01-28 10:43:58,665 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,665 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,665 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,665 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,665 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,665 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
2021-01-28 10:43:58,665 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,665 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,665 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
2021-01-28 10:43:58,665 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,665 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,666 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,666 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,666 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,666 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,666 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,666 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,666 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:43:58,666 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 425 normal>) = 11.07375
2021-01-28 10:43:58,666 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 10:43:58,666 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,666 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,667 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,667 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-01-28 10:43:58,667 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,667 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,667 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,667 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 300 normal>) = 10.145
2021-01-28 10:43:58,667 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,667 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,667 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,667 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal 300 condensed>) = 10.344999999999999
2021-01-28 10:43:58,667 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
2021-01-28 10:43:58,667 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,667 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,668 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal 400 condensed>) = 10.25
2021-01-28 10:43:58,668 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
2021-01-28 10:43:58,668 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,668 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-01-28 10:43:58,668 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,668 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,668 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,668 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
2021-01-28 10:43:58,668 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,668 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,668 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,668 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,669 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal 900 condensed>) = 10.725
2021-01-28 10:43:58,669 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,669 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,669 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,669 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,669 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,669 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,669 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,669 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,669 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-01-28 10:43:58,670 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,670 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,670 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,670 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
2021-01-28 10:43:58,670 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,670 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,670 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2021-01-28 10:43:58,670 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
2021-01-28 10:43:58,670 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,670 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
2021-01-28 10:43:58,671 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,671 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,671 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,671 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,671 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,671 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,671 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,671 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,671 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal 600 condensed>) = 10.44
2021-01-28 10:43:58,671 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,672 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,672 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,672 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
2021-01-28 10:43:58,672 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,672 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,672 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,672 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,672 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,672 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,673 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
2021-01-28 10:43:58,673 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,673 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,673 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
2021-01-28 10:43:58,673 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal 600 condensed>) = 10.44
2021-01-28 10:43:58,673 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-01-28 10:43:58,673 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
2021-01-28 10:43:58,673 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
2021-01-28 10:43:58,673 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:43:58,673 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,674 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:43:58,674 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
2021-01-28 10:43:58,674 [71182] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to DejaVu Sans ('/Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2021-01-28 10:46:51,223 [71182] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/numpy/lib/function_base.py:3652: RuntimeWarning:

Invalid value encountered in percentile


2021-01-28 10:46:51,225 [71182] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/cbook/__init__.py:1211: RuntimeWarning:

invalid value encountered in less_equal


2021-01-28 10:46:51,226 [71182] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/cbook/__init__.py:1218: RuntimeWarning:

invalid value encountered in greater_equal


2021-01-28 10:46:51,227 [71182] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/cbook/__init__.py:1226: RuntimeWarning:

invalid value encountered in less


2021-01-28 10:46:51,228 [71182] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/cbook/__init__.py:1227: RuntimeWarning:

invalid value encountered in greater


2021-01-28 10:46:51,251 [71182] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-01-28 10:46:51,251 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-01-28 10:46:51,252 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-01-28 10:46:51,252 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,253 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,253 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:46:51,254 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-01-28 10:46:51,254 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,254 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-01-28 10:46:51,255 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 10:46:51,255 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,256 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,256 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-01-28 10:46:51,256 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:46:51,256 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,257 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,257 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,257 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,257 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,257 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,257 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,257 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,257 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,257 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,257 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,257 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,258 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-01-28 10:46:51,258 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:46:51,258 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,258 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,258 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,258 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,258 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,258 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,258 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-01-28 10:46:51,258 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-01-28 10:46:51,259 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,259 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,259 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,259 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,259 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,259 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,259 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,259 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,259 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
2021-01-28 10:46:51,259 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,260 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,260 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,260 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,260 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,260 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,260 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,260 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,260 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,261 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-01-28 10:46:51,261 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-01-28 10:46:51,261 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,261 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
2021-01-28 10:46:51,261 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,261 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-01-28 10:46:51,261 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,261 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,262 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,262 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,262 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
2021-01-28 10:46:51,262 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,262 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,262 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,262 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,262 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,263 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,263 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 10:46:51,263 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,263 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,263 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,263 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,263 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,263 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,263 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,263 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,263 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal 800 condensed>) = 10.629999999999999
2021-01-28 10:46:51,263 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-01-28 10:46:51,264 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,264 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,264 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,264 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:46:51,264 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,264 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
2021-01-28 10:46:51,264 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,264 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,264 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,265 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,265 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,265 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,265 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,265 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,265 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2021-01-28 10:46:51,265 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,265 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,265 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,265 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,266 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,266 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,266 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,266 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,266 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,266 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
2021-01-28 10:46:51,266 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,266 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
2021-01-28 10:46:51,266 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,267 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
2021-01-28 10:46:51,267 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,267 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,267 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,267 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,267 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,268 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal 400 condensed>) = 10.25
2021-01-28 10:46:51,268 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,268 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,268 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,268 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,268 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,269 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,269 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,269 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,269 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,269 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,269 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal 500 condensed>) = 10.344999999999999
2021-01-28 10:46:51,270 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,270 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,270 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,270 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,270 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,270 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,270 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYork.ttf) normal normal 425 normal>) = 10.07375
2021-01-28 10:46:51,270 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,270 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,270 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,271 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal 700 condensed>) = 10.535
2021-01-28 10:46:51,271 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
2021-01-28 10:46:51,271 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,271 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:46:51,271 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,271 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
2021-01-28 10:46:51,271 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,271 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,272 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,272 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,272 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,272 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,272 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
2021-01-28 10:46:51,272 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal 700 condensed>) = 10.535
2021-01-28 10:46:51,272 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,272 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Display' (SFCompactDisplay.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,272 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2021-01-28 10:46:51,272 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,272 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 300 normal>) = 11.145
2021-01-28 10:46:51,273 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,273 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,273 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,273 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,273 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,273 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,273 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,273 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,273 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,273 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,273 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,274 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,274 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,274 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,274 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,274 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,274 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,274 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
2021-01-28 10:46:51,274 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,274 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,274 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,274 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
2021-01-28 10:46:51,275 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,275 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,275 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,275 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,275 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,275 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,275 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,275 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,276 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
2021-01-28 10:46:51,276 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2021-01-28 10:46:51,276 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,276 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,276 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,276 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,276 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,277 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,277 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,277 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,277 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,277 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,277 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,278 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:46:51,278 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,278 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,278 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,278 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactTextItalic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:46:51,278 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,278 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 10:46:51,279 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,279 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactText.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,279 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
2021-01-28 10:46:51,279 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,279 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,279 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,279 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
2021-01-28 10:46:51,280 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,280 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,280 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,280 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,280 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,280 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,280 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,281 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,281 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,281 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,281 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,281 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,281 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,281 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,281 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:46:51,282 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2021-01-28 10:46:51,282 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
2021-01-28 10:46:51,282 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,282 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal 600 condensed>) = 10.44
2021-01-28 10:46:51,282 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
2021-01-28 10:46:51,283 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,283 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
2021-01-28 10:46:51,283 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
2021-01-28 10:46:51,283 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,283 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,283 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,283 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,284 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
2021-01-28 10:46:51,284 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,284 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,284 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,284 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2021-01-28 10:46:51,284 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,284 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,285 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,285 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:46:51,285 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
2021-01-28 10:46:51,285 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,285 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal 500 condensed>) = 10.344999999999999
2021-01-28 10:46:51,285 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
2021-01-28 10:46:51,285 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
2021-01-28 10:46:51,286 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,286 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,286 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,286 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,286 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,286 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 10:46:51,286 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,287 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:46:51,287 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,287 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
2021-01-28 10:46:51,287 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
2021-01-28 10:46:51,287 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,287 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,287 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,288 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,288 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,288 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
2021-01-28 10:46:51,288 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,288 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,288 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
2021-01-28 10:46:51,288 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,288 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,288 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,289 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,289 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,289 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,289 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,289 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,289 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
2021-01-28 10:46:51,289 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 425 normal>) = 11.07375
2021-01-28 10:46:51,289 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-01-28 10:46:51,289 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,289 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,289 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,289 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-01-28 10:46:51,290 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,290 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,290 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,290 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 300 normal>) = 10.145
2021-01-28 10:46:51,290 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,290 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,290 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,290 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal 300 condensed>) = 10.344999999999999
2021-01-28 10:46:51,290 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
2021-01-28 10:46:51,290 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,290 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,290 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal 400 condensed>) = 10.25
2021-01-28 10:46:51,290 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
2021-01-28 10:46:51,291 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,291 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-01-28 10:46:51,291 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,291 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,291 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,291 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
2021-01-28 10:46:51,291 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,291 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,291 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,291 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,291 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal 900 condensed>) = 10.725
2021-01-28 10:46:51,292 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,292 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,292 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,292 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,292 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,292 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,292 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,292 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,292 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-01-28 10:46:51,292 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,293 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,293 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,293 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
2021-01-28 10:46:51,293 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,293 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,293 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2021-01-28 10:46:51,293 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
2021-01-28 10:46:51,293 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,293 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
2021-01-28 10:46:51,293 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,293 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,293 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,293 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,294 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,294 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,294 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,294 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,294 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal 600 condensed>) = 10.44
2021-01-28 10:46:51,294 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,294 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,294 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,294 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
2021-01-28 10:46:51,294 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,294 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,294 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,295 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,295 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,295 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,295 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
2021-01-28 10:46:51,295 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,295 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,295 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
2021-01-28 10:46:51,296 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal 600 condensed>) = 10.44
2021-01-28 10:46:51,296 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-01-28 10:46:51,296 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
2021-01-28 10:46:51,296 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
2021-01-28 10:46:51,296 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
2021-01-28 10:46:51,296 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,296 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2021-01-28 10:46:51,296 [71182] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
2021-01-28 10:46:51,296 [71182] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2021-01-28 10:51:40,429 [71182] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-01-28 10:51:40,430 [71182] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-01-28 10:51:40,430 [71182] INFO     root:247: [JupyterRequire] Initializing comms.
2021-01-28 10:51:40,433 [71182] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-01-28 10:51:40,433 [71182] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-01-28 10:51:40,433 [71182] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-01-28 11:46:07,994 [71182] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-01-28 11:46:07,997 [71182] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 6
2021-01-28 11:46:07,997 [71182] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:6]
2021-01-28 11:46:08,000 [71182] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 6 (to 5 in part parser)
2021-01-28 11:46:08,000 [71182] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-01-28 11:46:08,102 [71182] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi
2021-01-28 11:46:08,162 [71182] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2021-01-28 11:54:23,395 [71182] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-01-28 11:54:23,396 [71182] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-01-28 11:54:23,396 [71182] INFO     root:247: [JupyterRequire] Initializing comms.
2021-01-28 11:54:23,400 [71182] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-01-28 11:54:23,401 [71182] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-01-28 11:54:23,401 [71182] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-01 15:57:03,487 [27299] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-01 15:57:03,487 [27299] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-01 15:57:03,487 [27299] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-01 15:57:03,490 [27299] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-01 15:57:03,490 [27299] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-01 15:57:03,490 [27299] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-01 15:57:32,489 [27299] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi
2021-02-01 15:57:32,512 [27299] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/Documents/projects/interactive-starter-kits/D3.4/visualizations.py
2021-02-01 15:57:32,520 [27299] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/ipywidgets/__init__.py
2021-02-01 15:57:32,567 [27299] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/ipywidgets/widgets/__init__.py
2021-02-01 15:57:32,628 [27299] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/ipywidgets/widgets/widget.py
2021-02-01 15:57:51,480 [27299] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-01 15:57:51,480 [27299] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 8; new: 8
2021-02-01 15:57:51,481 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:7] new[1:7]
2021-02-01 15:57:51,481 [27299] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:7] new[1:7]
2021-02-01 15:57:51,481 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[8:8] new[8:8]
2021-02-01 15:57:51,481 [27299] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 8 to 8 (to 7 in part parser)
2021-02-01 15:57:51,481 [27299] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-01 15:58:36,739 [27299] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-01 15:58:36,740 [27299] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 8; new: 10
2021-02-01 15:58:36,740 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:7] new[1:7]
2021-02-01 15:58:36,740 [27299] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:7] new[1:7]
2021-02-01 15:58:36,740 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[8:8] new[8:10]
2021-02-01 15:58:36,741 [27299] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 8 to 10 (to 9 in part parser)
2021-02-01 15:58:36,741 [27299] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-01 15:58:36,773 [27299] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2021-02-01 16:06:19,360 [27299] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-01 16:06:19,360 [27299] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-01 16:06:19,361 [27299] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-01 16:06:19,364 [27299] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-01 16:06:19,364 [27299] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-01 16:06:19,365 [27299] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-01 16:08:16,092 [27299] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-01 16:08:16,094 [27299] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 10; new: 1
2021-02-01 16:08:16,094 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:10] new[1:1]
2021-02-01 16:08:16,094 [27299] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-01 16:08:16,094 [27299] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-01 16:08:16,096 [27299] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-01 16:08:16,098 [27299] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 552; new: 607
2021-02-01 16:08:16,098 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:382] new[1:382]
2021-02-01 16:08:16,098 [27299] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[2:379] new[1:379]
2021-02-01 16:08:16,099 [27299] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 380 to 382 (to 382 in part parser)
2021-02-01 16:08:16,099 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[insert] old[383:382] new[383:437]
2021-02-01 16:08:16,112 [27299] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 383 to 462 (to 464 in part parser)
2021-02-01 16:08:16,112 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[383:552] new[438:607]
2021-02-01 16:08:16,112 [27299] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[410:551] new[463:606]
2021-02-01 16:08:16,113 [27299] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-01 16:08:28,984 [27299] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-01 16:08:28,985 [27299] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-02-01 16:08:28,985 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-02-01 16:08:28,985 [27299] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-01 16:08:28,985 [27299] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-01 16:08:29,104 [27299] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/typing.py
2021-02-01 16:08:29,120 [27299] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/jedi/third_party/typeshed/stdlib/3/typing.pyi
2021-02-01 16:25:45,700 [27299] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-01 16:25:45,702 [27299] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-02-01 16:25:45,702 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-02-01 16:25:45,704 [27299] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-01 16:25:45,705 [27299] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-01 16:26:04,458 [27299] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-01 16:26:04,459 [27299] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-02-01 16:26:04,460 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-02-01 16:26:04,460 [27299] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-01 16:26:04,460 [27299] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-01 16:29:14,786 [27299] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-01 16:29:14,787 [27299] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-02-01 16:29:14,787 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-02-01 16:29:14,787 [27299] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-01 16:29:14,787 [27299] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-01 16:29:14,790 [27299] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-01 16:29:14,791 [27299] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 607; new: 604
2021-02-01 16:29:14,792 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:383] new[1:383]
2021-02-01 16:29:14,792 [27299] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[2:379] new[1:379]
2021-02-01 16:29:14,792 [27299] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 380 to 382 (to 382 in part parser)
2021-02-01 16:29:14,801 [27299] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 383 to 432 (to 434 in part parser)
2021-02-01 16:29:14,801 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[384:384] new[384:384]
2021-02-01 16:29:14,801 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[385:399] new[385:399]
2021-02-01 16:29:14,801 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[insert] old[400:399] new[400:400]
2021-02-01 16:29:14,801 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[400:405] new[401:406]
2021-02-01 16:29:14,801 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[406:416] new[407:407]
2021-02-01 16:29:14,801 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[417:418] new[408:409]
2021-02-01 16:29:14,801 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[419:419] new[410:411]
2021-02-01 16:29:14,802 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[420:420] new[412:412]
2021-02-01 16:29:14,802 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[421:422] new[413:419]
2021-02-01 16:29:14,802 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[423:434] new[420:431]
2021-02-01 16:29:14,802 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[435:435] new[432:432]
2021-02-01 16:29:14,802 [27299] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[436:607] new[433:604]
2021-02-01 16:29:14,802 [27299] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[438:606] new[433:603]
2021-02-01 16:29:14,803 [27299] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-02 08:29:48,406 [3554] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-02 08:29:48,406 [3554] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-02 08:29:48,406 [3554] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-02 08:29:48,408 [3554] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-02 08:29:48,408 [3554] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-02 08:29:48,409 [3554] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-02 08:29:49,944 [3554] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-02 08:29:49,944 [3554] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-02 08:29:49,945 [3554] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-02 08:29:49,950 [3554] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-02 08:29:49,950 [3554] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-02 08:29:49,951 [3554] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-02 08:29:52,764 [3554] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-02 08:29:52,765 [3554] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-02 08:29:52,769 [3554] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=/Users/hcab/.matplotlib
2021-02-02 08:29:52,771 [3554] DEBUG    matplotlib:1480: [JupyterRequire] matplotlib version 3.3.3
2021-02-02 08:29:52,772 [3554] DEBUG    matplotlib:1481: [JupyterRequire] interactive is False
2021-02-02 08:29:52,772 [3554] DEBUG    matplotlib:1482: [JupyterRequire] platform is darwin
2021-02-02 08:29:52,772 [3554] DEBUG    matplotlib:1483: [JupyterRequire] loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'google', 'zope', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', '__future__', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '_socket', 'array', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.sslproto', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'contextvars', 'immutables', 'immutables._map', 'immutables._version', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.file_io', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'jedi._compatibility', 'jedi.file_io', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.common', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.compiled.mixed', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.inference.references', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', '_scproxy', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'ctypes', '_ctypes', 'ctypes._endian', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_21', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'ipykernel.eventloops', 'distutils', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'IPython.core.completerlib', 'plistlib', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'appnope', 'appnope._nope', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.lib.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing._private.pytesttester', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.lib.histograms', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.core._multiarray_tests', 'numpy._distributor_init', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.interval', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arrays.categorical', 'csv', '_csv', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'mmap', 'zipfile', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.util.numba_', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.frame', 'pandas.core.internals.construction', 'pandas.core.reshape', 'pandas.core.reshape.melt', 'pandas.core.reshape.concat', 'pandas.core.reshape.util', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-02-02 08:29:52,819 [3554] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=/Users/hcab/.matplotlib
2021-02-02 08:29:52,821 [3554] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from /Users/hcab/.matplotlib/fontlist-v330.json
2021-02-02 08:29:52,991 [3554] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-02 08:29:52,996 [3554] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-02 10:37:44,286 [3554] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/ipykernel_launcher.py:1: UserWarning:

Boolean Series key will be reindexed to match DataFrame index.


2021-02-02 10:38:05,097 [3554] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/ipykernel_launcher.py:1: UserWarning:

Boolean Series key will be reindexed to match DataFrame index.


2021-02-02 10:43:09,591 [3554] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/pandas/__init__.py
2021-02-02 11:20:58,632 [3554] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-02 11:20:58,633 [3554] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 1
2021-02-02 11:20:58,633 [3554] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:7] new[1:1]
2021-02-02 11:20:58,634 [3554] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-02 11:20:58,634 [3554] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-02 11:20:58,641 [3554] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/numpy/__init__.py
2021-02-02 11:20:59,496 [3554] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-02 11:20:59,496 [3554] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-02-02 11:20:59,496 [3554] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-02-02 11:20:59,496 [3554] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-02 11:20:59,497 [3554] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-02 11:21:00,465 [3554] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-02 11:21:00,465 [3554] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-02-02 11:21:00,465 [3554] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-02-02 11:21:00,466 [3554] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-02 11:21:00,466 [3554] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-02 11:21:01,045 [3554] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-02 11:21:01,045 [3554] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-02-02 11:21:01,045 [3554] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-02-02 11:21:01,046 [3554] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-02 11:21:01,046 [3554] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-02 11:37:56,177 [3554] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-02 11:37:56,178 [3554] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2021-02-02 11:37:56,178 [3554] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2021-02-02 11:37:56,179 [3554] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2021-02-02 11:37:56,180 [3554] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-02 11:42:14,419 [3554] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-02 11:42:14,421 [3554] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 1
2021-02-02 11:42:14,421 [3554] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:2] new[1:1]
2021-02-02 11:42:14,423 [3554] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-02 11:42:14,424 [3554] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-02 11:42:14,430 [3554] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-02 11:42:14,434 [3554] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 746; new: 760
2021-02-02 11:42:14,434 [3554] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:544] new[1:544]
2021-02-02 11:42:14,435 [3554] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[2:601] new[1:543]
2021-02-02 11:42:14,436 [3554] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 544 to 547 (to 549 in part parser)
2021-02-02 11:42:14,437 [3554] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[545:545] new[545:545]
2021-02-02 11:42:14,437 [3554] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[546:588] new[546:588]
2021-02-02 11:42:14,437 [3554] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[550:599] new[548:587]
2021-02-02 11:42:14,439 [3554] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 588 to 589 (to 589 in part parser)
2021-02-02 11:42:14,439 [3554] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[589:592] new[589:606]
2021-02-02 11:42:14,448 [3554] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 590 to 614 (to 614 in part parser)
2021-02-02 11:42:14,448 [3554] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[593:597] new[607:611]
2021-02-02 11:42:14,448 [3554] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[598:598] new[612:612]
2021-02-02 11:42:14,448 [3554] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[599:600] new[613:614]
2021-02-02 11:42:14,448 [3554] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[601:601] new[615:615]
2021-02-02 11:42:14,449 [3554] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 615 to 617 (to 617 in part parser)
2021-02-02 11:42:14,449 [3554] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[602:746] new[616:760]
2021-02-02 11:42:14,451 [3554] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 618 to 626 (to 627 in part parser)
2021-02-02 11:42:14,452 [3554] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[614:745] new[627:759]
2021-02-02 11:42:14,453 [3554] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-02 11:42:14,621 [3554] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi
2021-02-02 11:42:14,676 [3554] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2021-02-02 11:45:57,830 [3554] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-02 11:45:57,831 [3554] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-02-02 11:45:57,831 [3554] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-02-02 11:45:57,831 [3554] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-02 11:45:57,831 [3554] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-02 12:13:01,938 [3554] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/ipykernel_launcher.py:3: UserWarning:

Boolean Series key will be reindexed to match DataFrame index.


2021-02-02 12:13:11,300 [3554] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/ipykernel_launcher.py:3: UserWarning:

Boolean Series key will be reindexed to match DataFrame index.


2021-02-02 12:13:14,422 [3554] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/ipykernel_launcher.py:3: UserWarning:

Boolean Series key will be reindexed to match DataFrame index.


2021-02-02 14:30:50,483 [3554] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-02 14:30:50,486 [3554] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-02 14:30:50,516 [3554] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-02 14:30:50,527 [3554] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_alive_fa624f77-dd4f-464a-8297-965b8e007d25 HTTP/1.1" 200 5
2021-02-02 14:31:13,977 [3554] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-02 14:31:13,979 [3554] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_shutdown_fa624f77-dd4f-464a-8297-965b8e007d25 HTTP/1.1" 200 23
2021-02-02 14:31:13,981 [3554] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-02 14:31:13,982 [3554] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_alive_fa624f77-dd4f-464a-8297-965b8e007d25 HTTP/1.1" 200 5
2021-02-02 14:31:25,719 [3554] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-02 14:31:25,721 [3554] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_shutdown_fa624f77-dd4f-464a-8297-965b8e007d25 HTTP/1.1" 200 23
2021-02-02 14:31:25,723 [3554] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-02 14:31:25,750 [3554] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-02 14:31:25,753 [3554] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_alive_fa624f77-dd4f-464a-8297-965b8e007d25 HTTP/1.1" 200 5
2021-02-02 14:31:31,302 [3554] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-02 14:31:31,302 [3554] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-02-02 14:31:31,302 [3554] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-02-02 14:31:31,303 [3554] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-02 14:31:31,303 [3554] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-02 14:31:31,405 [3554] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/typing.py
2021-02-02 14:31:31,429 [3554] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/jedi/third_party/typeshed/stdlib/3/typing.pyi
2021-02-02 14:31:32,997 [3554] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-02 14:31:32,998 [3554] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_shutdown_fa624f77-dd4f-464a-8297-965b8e007d25 HTTP/1.1" 200 23
2021-02-02 14:31:33,000 [3554] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-02 14:31:33,001 [3554] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_alive_fa624f77-dd4f-464a-8297-965b8e007d25 HTTP/1.1" 200 5
2021-02-02 14:31:39,479 [3554] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-02 14:31:39,481 [3554] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_shutdown_fa624f77-dd4f-464a-8297-965b8e007d25 HTTP/1.1" 200 23
2021-02-02 14:31:39,492 [3554] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-02 14:31:39,494 [3554] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_alive_fa624f77-dd4f-464a-8297-965b8e007d25 HTTP/1.1" 200 5
2021-02-02 14:45:16,193 [17983] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-02 14:45:16,194 [17983] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-02 14:45:16,194 [17983] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-02 14:45:16,197 [17983] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-02 14:45:16,198 [17983] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-02 14:45:16,198 [17983] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-02 14:49:08,284 [17983] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-02-02 14:49:08,285 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-02-02 14:49:08,285 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-02-02 14:49:08,286 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,286 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,286 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-02-02 14:49:08,286 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-02-02 14:49:08,286 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,286 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-02-02 14:49:08,286 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-02-02 14:49:08,286 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,286 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,286 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-02-02 14:49:08,286 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-02 14:49:08,286 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,287 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,287 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,287 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,287 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,287 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,287 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,287 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,287 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,287 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,287 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,287 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,287 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-02-02 14:49:08,288 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-02 14:49:08,288 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,288 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,288 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,288 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,288 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,289 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,289 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-02-02 14:49:08,289 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-02-02 14:49:08,289 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,289 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,289 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,290 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,290 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,290 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,290 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,290 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,290 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
2021-02-02 14:49:08,290 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,290 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,290 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,290 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,291 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,291 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,291 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,291 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,291 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,291 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-02-02 14:49:08,291 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-02-02 14:49:08,291 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,291 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
2021-02-02 14:49:08,292 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,292 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-02-02 14:49:08,292 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,292 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,292 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,292 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,292 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
2021-02-02 14:49:08,292 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,292 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,293 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,293 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,293 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,293 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,293 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-02 14:49:08,293 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,293 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,293 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,293 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,294 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,294 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,294 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,294 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,294 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal 800 condensed>) = 10.629999999999999
2021-02-02 14:49:08,294 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-02-02 14:49:08,294 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,294 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,294 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,294 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2021-02-02 14:49:08,295 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,295 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
2021-02-02 14:49:08,295 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,295 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,295 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,295 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,295 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,295 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,295 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,295 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,295 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2021-02-02 14:49:08,295 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,296 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,296 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,296 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,296 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,296 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,296 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,296 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,297 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,297 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
2021-02-02 14:49:08,297 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,297 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
2021-02-02 14:49:08,297 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,297 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
2021-02-02 14:49:08,297 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,298 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,298 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,298 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,298 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,298 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal 400 condensed>) = 10.25
2021-02-02 14:49:08,298 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,299 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,299 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,299 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,299 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,299 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,299 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,299 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,299 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,300 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,300 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal 500 condensed>) = 10.344999999999999
2021-02-02 14:49:08,300 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,300 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,300 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,300 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,300 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,300 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,300 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYork.ttf) normal normal 425 normal>) = 10.07375
2021-02-02 14:49:08,300 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,301 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,301 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,301 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal 700 condensed>) = 10.535
2021-02-02 14:49:08,301 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
2021-02-02 14:49:08,301 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,301 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-02 14:49:08,301 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,301 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
2021-02-02 14:49:08,301 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,301 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,302 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,302 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,302 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,302 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,302 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
2021-02-02 14:49:08,302 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal 700 condensed>) = 10.535
2021-02-02 14:49:08,302 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,302 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Display' (SFCompactDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,303 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2021-02-02 14:49:08,303 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,303 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 300 normal>) = 11.145
2021-02-02 14:49:08,303 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,303 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,304 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,304 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,304 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,304 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,304 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,305 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,305 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,305 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,305 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,305 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,305 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,306 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,306 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,306 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,306 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,306 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
2021-02-02 14:49:08,306 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,307 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,307 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,307 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
2021-02-02 14:49:08,307 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,307 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,307 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,307 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,308 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,308 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,308 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,308 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,308 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
2021-02-02 14:49:08,308 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2021-02-02 14:49:08,308 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,308 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,309 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,309 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,309 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,309 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,309 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,309 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,309 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,309 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,310 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,310 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-02 14:49:08,310 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,310 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,310 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,310 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactTextItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-02 14:49:08,310 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,310 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-02 14:49:08,311 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,311 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactText.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,311 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
2021-02-02 14:49:08,311 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,311 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,311 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,311 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
2021-02-02 14:49:08,311 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,312 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,312 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,312 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,312 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,312 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,312 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,313 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,313 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,313 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,313 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,313 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,313 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,313 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,313 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-02 14:49:08,313 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2021-02-02 14:49:08,314 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
2021-02-02 14:49:08,314 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,314 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal 600 condensed>) = 10.44
2021-02-02 14:49:08,314 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
2021-02-02 14:49:08,314 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,314 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
2021-02-02 14:49:08,314 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
2021-02-02 14:49:08,315 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,315 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,315 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,315 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,315 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
2021-02-02 14:49:08,316 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,316 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,316 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,316 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2021-02-02 14:49:08,316 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,317 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,317 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,317 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
2021-02-02 14:49:08,317 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
2021-02-02 14:49:08,317 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,317 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal 500 condensed>) = 10.344999999999999
2021-02-02 14:49:08,317 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
2021-02-02 14:49:08,317 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
2021-02-02 14:49:08,317 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,318 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,318 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,318 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,318 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,318 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-02 14:49:08,318 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,318 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-02 14:49:08,319 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,319 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
2021-02-02 14:49:08,319 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
2021-02-02 14:49:08,319 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,319 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,319 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,319 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,319 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,320 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
2021-02-02 14:49:08,320 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,320 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,320 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
2021-02-02 14:49:08,320 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,320 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,320 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,320 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,321 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,321 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,321 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,321 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,321 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-02 14:49:08,321 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 425 normal>) = 11.07375
2021-02-02 14:49:08,321 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-02 14:49:08,321 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,321 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,321 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,322 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-02-02 14:49:08,322 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,322 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,322 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,322 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 300 normal>) = 10.145
2021-02-02 14:49:08,322 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,322 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,322 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,322 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal 300 condensed>) = 10.344999999999999
2021-02-02 14:49:08,322 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
2021-02-02 14:49:08,323 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,323 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,323 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal 400 condensed>) = 10.25
2021-02-02 14:49:08,323 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
2021-02-02 14:49:08,323 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,323 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-02-02 14:49:08,323 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,323 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,323 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,324 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
2021-02-02 14:49:08,324 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,324 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,324 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,324 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,324 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal 900 condensed>) = 10.725
2021-02-02 14:49:08,324 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,325 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,325 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,325 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,325 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,325 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,325 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,325 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,325 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-02-02 14:49:08,325 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,326 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,326 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,326 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
2021-02-02 14:49:08,326 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,326 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,326 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2021-02-02 14:49:08,326 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
2021-02-02 14:49:08,326 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,326 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
2021-02-02 14:49:08,326 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,327 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,327 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,327 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,327 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,327 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,327 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,327 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,327 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal 600 condensed>) = 10.44
2021-02-02 14:49:08,327 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,327 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,327 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,327 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
2021-02-02 14:49:08,327 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,328 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,328 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,328 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,328 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,328 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,328 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
2021-02-02 14:49:08,328 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,328 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,328 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
2021-02-02 14:49:08,328 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal 600 condensed>) = 10.44
2021-02-02 14:49:08,328 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-02-02 14:49:08,328 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
2021-02-02 14:49:08,329 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
2021-02-02 14:49:08,329 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-02 14:49:08,329 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,329 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2021-02-02 14:49:08,329 [17983] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
2021-02-02 14:49:08,329 [17983] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2021-02-02 14:57:02,296 [17983] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-02 14:57:02,297 [17983] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-02-02 14:57:02,297 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-02-02 14:57:02,298 [17983] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-02 14:57:02,298 [17983] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-02 14:57:02,306 [17983] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/ipywidgets/__init__.py
2021-02-02 15:08:16,866 [17983] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-02 15:08:16,866 [17983] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 13
2021-02-02 15:08:16,867 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:13]
2021-02-02 15:08:16,871 [17983] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 13 (to 12 in part parser)
2021-02-02 15:08:16,871 [17983] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-02 15:08:16,874 [17983] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-02 15:08:16,875 [17983] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 780; new: 725
2021-02-02 15:08:16,876 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:536] new[1:536]
2021-02-02 15:08:16,876 [17983] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[2:635] new[1:535]
2021-02-02 15:08:16,876 [17983] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 536 to 535 (to 535 in part parser)
2021-02-02 15:08:16,877 [17983] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 536 to 537 (to 538 in part parser)
2021-02-02 15:08:16,877 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[delete] old[537:537] new[537:536]
2021-02-02 15:08:16,877 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[538:637] new[537:636]
2021-02-02 15:08:16,878 [17983] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[540:635] new[538:634]
2021-02-02 15:08:16,878 [17983] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 635 to 636 (to 636 in part parser)
2021-02-02 15:08:16,878 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[638:698] new[637:649]
2021-02-02 15:08:16,884 [17983] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 637 to 657 (to 659 in part parser)
2021-02-02 15:08:16,884 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[699:699] new[650:650]
2021-02-02 15:08:16,884 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[700:712] new[651:657]
2021-02-02 15:08:16,884 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[713:780] new[658:725]
2021-02-02 15:08:16,885 [17983] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[715:779] new[658:724]
2021-02-02 15:08:16,887 [17983] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-02 15:08:17,152 [17983] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi
2021-02-02 15:08:17,219 [17983] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2021-02-02 15:08:19,498 [17983] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-02 15:08:19,498 [17983] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 13; new: 13
2021-02-02 15:08:19,499 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:12] new[1:12]
2021-02-02 15:08:19,499 [17983] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:12] new[1:11]
2021-02-02 15:08:19,499 [17983] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 12 to 13 (to 12 in part parser)
2021-02-02 15:08:19,500 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[13:13] new[13:13]
2021-02-02 15:08:19,500 [17983] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-02 15:08:20,252 [17983] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-02 15:08:20,252 [17983] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 13; new: 13
2021-02-02 15:08:20,252 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:12] new[1:12]
2021-02-02 15:08:20,252 [17983] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:12] new[1:11]
2021-02-02 15:08:20,253 [17983] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 12 to 13 (to 12 in part parser)
2021-02-02 15:08:20,253 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[13:13] new[13:13]
2021-02-02 15:08:20,254 [17983] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-02 15:11:47,034 [17983] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-02 15:11:47,034 [17983] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 13; new: 1
2021-02-02 15:11:47,034 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:13] new[1:1]
2021-02-02 15:11:47,035 [17983] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-02 15:11:47,035 [17983] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-02 15:13:46,248 [17983] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/tsa/base/tsa_model.py:218: ValueWarning:

A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.


2021-02-02 15:13:46,250 [17983] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/tsa/base/tsa_model.py:218: ValueWarning:

A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.


2021-02-02 15:13:46,258 [17983] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/tsa/statespace/sarimax.py:868: UserWarning:

Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.


2021-02-02 15:13:46,280 [17983] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/base/model.py:500: RuntimeWarning:

invalid value encountered in double_scalars


2021-02-02 15:20:04,832 [17983] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/tsa/base/tsa_model.py:218: ValueWarning:

A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.


2021-02-02 15:20:04,836 [17983] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/tsa/base/tsa_model.py:218: ValueWarning:

A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.


2021-02-02 15:22:55,419 [17983] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/tsa/base/tsa_model.py:218: ValueWarning:

A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.


2021-02-02 15:22:55,422 [17983] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/tsa/base/tsa_model.py:218: ValueWarning:

A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.


2021-02-02 15:30:59,271 [17983] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/tsa/base/tsa_model.py:218: ValueWarning:

A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.


2021-02-02 15:30:59,273 [17983] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/tsa/base/tsa_model.py:218: ValueWarning:

A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.


2021-02-02 15:37:08,280 [17983] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-02 15:37:08,280 [17983] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 9
2021-02-02 15:37:08,280 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:9]
2021-02-02 15:37:08,282 [17983] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 9 (to 8 in part parser)
2021-02-02 15:37:08,282 [17983] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-02 15:37:08,284 [17983] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-02 15:37:08,286 [17983] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 725; new: 727
2021-02-02 15:37:08,286 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:638] new[1:638]
2021-02-02 15:37:08,286 [17983] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[2:657] new[1:638]
2021-02-02 15:37:08,286 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[639:639] new[639:642]
2021-02-02 15:37:08,287 [17983] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 639 to 642 (to 642 in part parser)
2021-02-02 15:37:08,288 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[640:643] new[643:646]
2021-02-02 15:37:08,289 [17983] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 643 to 646 (to 646 in part parser)
2021-02-02 15:37:08,289 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[644:645] new[647:648]
2021-02-02 15:37:08,290 [17983] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 647 to 650 (to 650 in part parser)
2021-02-02 15:37:08,290 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[646:647] new[649:650]
2021-02-02 15:37:08,290 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[648:650] new[651:652]
2021-02-02 15:37:08,291 [17983] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 651 to 652 (to 658 in part parser)
2021-02-02 15:37:08,291 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[651:656] new[653:658]
2021-02-02 15:37:08,291 [17983] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 653 to 661 (to 661 in part parser)
2021-02-02 15:37:08,291 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[657:657] new[659:659]
2021-02-02 15:37:08,292 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[658:725] new[660:727]
2021-02-02 15:37:08,295 [17983] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 662 to 678 (to 680 in part parser)
2021-02-02 15:37:08,295 [17983] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[679:724] new[679:726]
2021-02-02 15:37:08,296 [17983] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-02 15:40:24,057 [17983] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/tsa/statespace/sarimax.py:868: UserWarning:

Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.


2021-02-02 15:44:10,062 [17983] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-02 15:44:10,063 [17983] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 9; new: 1
2021-02-02 15:44:10,063 [17983] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:9] new[1:1]
2021-02-02 15:44:10,063 [17983] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-02 15:44:10,064 [17983] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-02 16:23:32,670 [17983] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-02 16:23:32,671 [17983] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-02 16:23:32,672 [17983] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-02 16:23:32,676 [17983] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-02 16:23:32,677 [17983] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-02 16:23:32,677 [17983] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-02 21:06:43,892 [17983] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-02 21:06:43,893 [17983] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-02 21:06:43,893 [17983] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-02 21:06:43,898 [17983] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-02 21:06:43,899 [17983] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-02 21:06:43,900 [17983] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 09:25:06,274 [25394] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 09:25:06,305 [25394] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 09:25:06,305 [25394] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 09:25:06,308 [25394] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 09:25:06,309 [25394] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 09:25:06,310 [25394] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 09:26:01,538 [25394] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-03 09:26:01,539 [25394] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-03 09:26:01,545 [25394] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=/Users/hcab/.matplotlib
2021-02-03 09:26:01,547 [25394] DEBUG    matplotlib:1480: [JupyterRequire] matplotlib version 3.3.3
2021-02-03 09:26:01,547 [25394] DEBUG    matplotlib:1481: [JupyterRequire] interactive is False
2021-02-03 09:26:01,548 [25394] DEBUG    matplotlib:1482: [JupyterRequire] platform is darwin
2021-02-03 09:26:01,548 [25394] DEBUG    matplotlib:1483: [JupyterRequire] loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'google', 'zope', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', '__future__', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '_socket', 'array', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.sslproto', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'contextvars', 'immutables', 'immutables._map', 'immutables._version', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.file_io', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'jedi._compatibility', 'jedi.file_io', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.common', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.compiled.mixed', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.inference.references', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', '_scproxy', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'ctypes', '_ctypes', 'ctypes._endian', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_21', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'ipykernel.eventloops', 'distutils', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'IPython.core.completerlib', 'plistlib', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'appnope', 'appnope._nope', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.lib.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing._private.pytesttester', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.lib.histograms', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.core._multiarray_tests', 'numpy._distributor_init', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.interval', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arrays.categorical', 'csv', '_csv', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'mmap', 'zipfile', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.util.numba_', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.frame', 'pandas.core.internals.construction', 'pandas.core.reshape', 'pandas.core.reshape.melt', 'pandas.core.reshape.concat', 'pandas.core.reshape.util', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-02-03 09:26:01,616 [25394] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=/Users/hcab/.matplotlib
2021-02-03 09:26:01,622 [25394] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from /Users/hcab/.matplotlib/fontlist-v330.json
2021-02-03 09:26:02,069 [25394] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-03 09:26:02,075 [25394] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-03 09:34:29,547 [25394] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/pandas/core/frame.py
2021-02-03 09:34:29,643 [25394] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi
2021-02-03 09:34:29,651 [25394] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/pandas/__init__.py
2021-02-03 09:34:29,663 [25394] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/pandas/core/__init__.py
2021-02-03 09:34:29,734 [25394] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/pandas/core/generic.py
2021-02-03 09:34:29,777 [25394] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/pandas/core/base.py
2021-02-03 09:34:29,825 [25394] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/pandas/core/accessor.py
2021-02-03 09:34:30,022 [25394] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/pandas/core/indexing.py
2021-02-03 09:36:01,479 [25394] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-03 09:36:01,480 [25394] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 3
2021-02-03 09:36:01,480 [25394] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:3]
2021-02-03 09:36:01,481 [25394] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2021-02-03 09:36:01,481 [25394] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-03 09:36:01,490 [25394] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/numpy/__init__.py
2021-02-03 09:36:25,941 [25394] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-03 09:36:25,942 [25394] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2021-02-03 09:36:25,942 [25394] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2021-02-03 09:36:25,943 [25394] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2021-02-03 09:36:25,944 [25394] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2021-02-03 09:36:25,944 [25394] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-03 09:36:26,000 [25394] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2021-02-03 09:50:07,152 [25394] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-03 09:50:07,153 [25394] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 1
2021-02-03 09:50:07,154 [25394] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:3] new[1:1]
2021-02-03 09:50:07,154 [25394] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-03 09:50:07,154 [25394] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-03 09:50:07,495 [25394] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/Documents/elucidata/elucidata_tools/elucidata/tools/visualization/vis_tables.py
2021-02-03 09:50:13,157 [25394] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:50:13,160 [25394] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:50:13,186 [25394] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:50:13,192 [25394] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_alive_d76e226c-cb12-43ab-9b0a-17152e61bd57 HTTP/1.1" 200 5
2021-02-03 09:51:55,001 [26330] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 09:51:55,002 [26330] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 09:51:55,002 [26330] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 09:51:55,004 [26330] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 09:51:55,004 [26330] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 09:51:55,004 [26330] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 09:51:55,518 [26330] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 09:51:55,519 [26330] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 09:51:55,519 [26330] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 09:51:55,521 [26330] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 09:51:55,523 [26330] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 09:51:55,523 [26330] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 09:52:04,106 [26330] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-03 09:52:04,107 [26330] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-03 09:52:04,111 [26330] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=/Users/hcab/.matplotlib
2021-02-03 09:52:04,114 [26330] DEBUG    matplotlib:1480: [JupyterRequire] matplotlib version 3.3.3
2021-02-03 09:52:04,114 [26330] DEBUG    matplotlib:1481: [JupyterRequire] interactive is False
2021-02-03 09:52:04,114 [26330] DEBUG    matplotlib:1482: [JupyterRequire] platform is darwin
2021-02-03 09:52:04,115 [26330] DEBUG    matplotlib:1483: [JupyterRequire] loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'google', 'zope', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', '__future__', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '_socket', 'array', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.sslproto', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'contextvars', 'immutables', 'immutables._map', 'immutables._version', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.file_io', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'jedi._compatibility', 'jedi.file_io', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.common', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.compiled.mixed', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.inference.references', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', '_scproxy', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'ctypes', '_ctypes', 'ctypes._endian', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_21', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'ipykernel.eventloops', 'distutils', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'IPython.core.completerlib', 'plistlib', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'appnope', 'appnope._nope', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.lib.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing._private.pytesttester', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.lib.histograms', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.core._multiarray_tests', 'numpy._distributor_init', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.interval', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arrays.categorical', 'csv', '_csv', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'mmap', 'zipfile', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.util.numba_', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.frame', 'pandas.core.internals.construction', 'pandas.core.reshape', 'pandas.core.reshape.melt', 'pandas.core.reshape.concat', 'pandas.core.reshape.util', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-02-03 09:52:04,165 [26330] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=/Users/hcab/.matplotlib
2021-02-03 09:52:04,168 [26330] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from /Users/hcab/.matplotlib/fontlist-v330.json
2021-02-03 09:52:04,343 [26330] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-03 09:52:04,348 [26330] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-03 09:52:15,290 [26330] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:52:15,293 [26330] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:52:15,320 [26330] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:52:15,324 [26330] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_alive_d05e5a19-182f-4a80-8738-e4511bce45d8 HTTP/1.1" 200 5
2021-02-03 09:54:14,691 [26330] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:54:14,700 [26330] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_shutdown_d05e5a19-182f-4a80-8738-e4511bce45d8 HTTP/1.1" 200 23
2021-02-03 09:54:14,705 [26330] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:54:14,707 [26330] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_alive_d05e5a19-182f-4a80-8738-e4511bce45d8 HTTP/1.1" 200 5
2021-02-03 09:54:22,618 [26572] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 09:54:22,618 [26572] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 09:54:22,618 [26572] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 09:54:22,620 [26572] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 09:54:22,621 [26572] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 09:54:22,621 [26572] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 09:54:24,565 [26572] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-03 09:54:24,566 [26572] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-03 09:54:24,570 [26572] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=/Users/hcab/.matplotlib
2021-02-03 09:54:24,572 [26572] DEBUG    matplotlib:1480: [JupyterRequire] matplotlib version 3.3.3
2021-02-03 09:54:24,572 [26572] DEBUG    matplotlib:1481: [JupyterRequire] interactive is False
2021-02-03 09:54:24,573 [26572] DEBUG    matplotlib:1482: [JupyterRequire] platform is darwin
2021-02-03 09:54:24,573 [26572] DEBUG    matplotlib:1483: [JupyterRequire] loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'google', 'zope', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', '__future__', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '_socket', 'array', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.sslproto', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'contextvars', 'immutables', 'immutables._map', 'immutables._version', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.file_io', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'jedi._compatibility', 'jedi.file_io', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.common', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.compiled.mixed', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.inference.references', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', '_scproxy', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'ctypes', '_ctypes', 'ctypes._endian', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_21', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'ipykernel.eventloops', 'distutils', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'IPython.core.completerlib', 'plistlib', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'appnope', 'appnope._nope', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.lib.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing._private.pytesttester', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.lib.histograms', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.core._multiarray_tests', 'numpy._distributor_init', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.interval', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arrays.categorical', 'csv', '_csv', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'mmap', 'zipfile', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.util.numba_', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.frame', 'pandas.core.internals.construction', 'pandas.core.reshape', 'pandas.core.reshape.melt', 'pandas.core.reshape.concat', 'pandas.core.reshape.util', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-02-03 09:54:24,617 [26572] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=/Users/hcab/.matplotlib
2021-02-03 09:54:24,620 [26572] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from /Users/hcab/.matplotlib/fontlist-v330.json
2021-02-03 09:54:24,797 [26572] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-03 09:54:24,802 [26572] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-03 09:54:35,733 [26572] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:54:35,735 [26572] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:54:35,761 [26572] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:54:35,765 [26572] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_alive_73fff268-a3e1-4150-8746-fe47c5a64110 HTTP/1.1" 200 5
2021-02-03 09:54:55,927 [26572] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:54:55,929 [26572] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_shutdown_73fff268-a3e1-4150-8746-fe47c5a64110 HTTP/1.1" 200 23
2021-02-03 09:54:55,931 [26572] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:54:55,933 [26572] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_alive_73fff268-a3e1-4150-8746-fe47c5a64110 HTTP/1.1" 200 5
2021-02-03 09:55:06,915 [26572] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:55:06,916 [26572] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_shutdown_73fff268-a3e1-4150-8746-fe47c5a64110 HTTP/1.1" 200 23
2021-02-03 09:55:06,919 [26572] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:55:06,920 [26572] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_alive_73fff268-a3e1-4150-8746-fe47c5a64110 HTTP/1.1" 200 5
2021-02-03 09:56:23,717 [26671] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 09:56:23,717 [26671] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 09:56:23,718 [26671] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 09:56:23,720 [26671] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 09:56:23,721 [26671] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 09:56:23,721 [26671] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 09:56:26,216 [26671] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-03 09:56:26,217 [26671] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-03 09:56:26,220 [26671] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=/Users/hcab/.matplotlib
2021-02-03 09:56:26,223 [26671] DEBUG    matplotlib:1480: [JupyterRequire] matplotlib version 3.3.3
2021-02-03 09:56:26,223 [26671] DEBUG    matplotlib:1481: [JupyterRequire] interactive is False
2021-02-03 09:56:26,223 [26671] DEBUG    matplotlib:1482: [JupyterRequire] platform is darwin
2021-02-03 09:56:26,223 [26671] DEBUG    matplotlib:1483: [JupyterRequire] loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'google', 'zope', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', '__future__', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '_socket', 'array', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.sslproto', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'contextvars', 'immutables', 'immutables._map', 'immutables._version', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.file_io', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'jedi._compatibility', 'jedi.file_io', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.common', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.compiled.mixed', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.inference.references', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', '_scproxy', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'ctypes', '_ctypes', 'ctypes._endian', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_21', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'ipykernel.eventloops', 'distutils', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'IPython.core.completerlib', 'plistlib', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'appnope', 'appnope._nope', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.lib.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing._private.pytesttester', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.lib.histograms', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.core._multiarray_tests', 'numpy._distributor_init', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.interval', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arrays.categorical', 'csv', '_csv', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'mmap', 'zipfile', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.util.numba_', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.frame', 'pandas.core.internals.construction', 'pandas.core.reshape', 'pandas.core.reshape.melt', 'pandas.core.reshape.concat', 'pandas.core.reshape.util', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-02-03 09:56:26,260 [26671] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=/Users/hcab/.matplotlib
2021-02-03 09:56:26,262 [26671] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from /Users/hcab/.matplotlib/fontlist-v330.json
2021-02-03 09:56:26,397 [26671] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-03 09:56:26,401 [26671] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-03 09:56:48,201 [26671] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:56:48,203 [26671] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:56:48,230 [26671] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:56:48,233 [26671] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_alive_cd636b4c-c9e8-470d-a914-d99f4013202d HTTP/1.1" 200 5
2021-02-03 09:57:59,966 [26784] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 09:57:59,967 [26784] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 09:57:59,967 [26784] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 09:57:59,969 [26784] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 09:57:59,970 [26784] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 09:57:59,970 [26784] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 09:58:01,984 [26784] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-03 09:58:01,985 [26784] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-03 09:58:01,990 [26784] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=/Users/hcab/.matplotlib
2021-02-03 09:58:01,995 [26784] DEBUG    matplotlib:1480: [JupyterRequire] matplotlib version 3.3.3
2021-02-03 09:58:01,995 [26784] DEBUG    matplotlib:1481: [JupyterRequire] interactive is False
2021-02-03 09:58:01,996 [26784] DEBUG    matplotlib:1482: [JupyterRequire] platform is darwin
2021-02-03 09:58:01,996 [26784] DEBUG    matplotlib:1483: [JupyterRequire] loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'google', 'zope', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', '__future__', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '_socket', 'array', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.sslproto', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'contextvars', 'immutables', 'immutables._map', 'immutables._version', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.file_io', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'jedi._compatibility', 'jedi.file_io', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.common', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.compiled.mixed', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.inference.references', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', '_scproxy', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'ctypes', '_ctypes', 'ctypes._endian', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_21', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'ipykernel.eventloops', 'distutils', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'IPython.core.completerlib', 'plistlib', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'appnope', 'appnope._nope', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.lib.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing._private.pytesttester', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.lib.histograms', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.core._multiarray_tests', 'numpy._distributor_init', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.interval', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arrays.categorical', 'csv', '_csv', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'mmap', 'zipfile', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.util.numba_', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.frame', 'pandas.core.internals.construction', 'pandas.core.reshape', 'pandas.core.reshape.melt', 'pandas.core.reshape.concat', 'pandas.core.reshape.util', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-02-03 09:58:02,044 [26784] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=/Users/hcab/.matplotlib
2021-02-03 09:58:02,046 [26784] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from /Users/hcab/.matplotlib/fontlist-v330.json
2021-02-03 09:58:02,212 [26784] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-03 09:58:02,216 [26784] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-03 09:58:24,015 [26784] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/Documents/elucidata/elucidata_tools/elucidata/tools/visualization/vis_plotly.py
2021-02-03 09:58:24,112 [26784] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-03 09:58:24,113 [26784] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2021-02-03 09:58:24,113 [26784] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2021-02-03 09:58:24,113 [26784] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:2] new[1:2]
2021-02-03 09:58:24,114 [26784] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2021-02-03 09:58:24,114 [26784] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 3 to 3 (to 2 in part parser)
2021-02-03 09:58:24,114 [26784] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-03 09:58:24,271 [26784] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-03 09:58:24,271 [26784] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2021-02-03 09:58:24,271 [26784] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2021-02-03 09:58:24,271 [26784] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:2] new[1:2]
2021-02-03 09:58:24,271 [26784] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2021-02-03 09:58:24,272 [26784] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 3 to 3 (to 2 in part parser)
2021-02-03 09:58:24,272 [26784] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-03 09:58:27,209 [26784] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-03 09:58:27,210 [26784] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2021-02-03 09:58:27,210 [26784] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2021-02-03 09:58:27,210 [26784] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:2] new[1:2]
2021-02-03 09:58:27,210 [26784] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2021-02-03 09:58:27,210 [26784] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 3 to 3 (to 2 in part parser)
2021-02-03 09:58:27,210 [26784] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-03 09:58:27,214 [26784] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/Documents/elucidata/elucidata_tools/elucidata/tools/visualization/vis_tables.py
2021-02-03 09:58:28,332 [26784] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:58:28,335 [26784] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:58:28,361 [26784] DEBUG    urllib3.connectionpool:231: [JupyterRequire] Starting new HTTP connection (1): 127.0.0.1:8050
2021-02-03 09:58:28,364 [26784] DEBUG    urllib3.connectionpool:461: [JupyterRequire] http://127.0.0.1:8050 "GET /_alive_8b21f9a6-6eed-48b8-b484-7f1b044bcf7d HTTP/1.1" 200 5
2021-02-03 09:59:00,505 [26853] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 09:59:00,505 [26853] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 09:59:00,505 [26853] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 09:59:00,507 [26853] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 09:59:00,508 [26853] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 09:59:00,508 [26853] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 09:59:01,023 [26853] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 09:59:01,023 [26853] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 09:59:01,023 [26853] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 09:59:01,028 [26853] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 09:59:01,029 [26853] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 09:59:01,029 [26853] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 09:59:06,070 [26853] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-03 09:59:06,071 [26853] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-03 09:59:06,076 [26853] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=/Users/hcab/.matplotlib
2021-02-03 09:59:06,078 [26853] DEBUG    matplotlib:1480: [JupyterRequire] matplotlib version 3.3.3
2021-02-03 09:59:06,078 [26853] DEBUG    matplotlib:1481: [JupyterRequire] interactive is False
2021-02-03 09:59:06,079 [26853] DEBUG    matplotlib:1482: [JupyterRequire] platform is darwin
2021-02-03 09:59:06,079 [26853] DEBUG    matplotlib:1483: [JupyterRequire] loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'google', 'zope', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', '__future__', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '_socket', 'array', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.sslproto', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'contextvars', 'immutables', 'immutables._map', 'immutables._version', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.file_io', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'jedi._compatibility', 'jedi.file_io', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.common', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.compiled.mixed', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.inference.references', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', '_scproxy', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'ctypes', '_ctypes', 'ctypes._endian', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_21', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'ipykernel.eventloops', 'distutils', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'IPython.core.completerlib', 'plistlib', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'appnope', 'appnope._nope', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.lib.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing._private.pytesttester', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.lib.histograms', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.core._multiarray_tests', 'numpy._distributor_init', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.interval', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arrays.categorical', 'csv', '_csv', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'mmap', 'zipfile', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.util.numba_', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.frame', 'pandas.core.internals.construction', 'pandas.core.reshape', 'pandas.core.reshape.melt', 'pandas.core.reshape.concat', 'pandas.core.reshape.util', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-02-03 09:59:06,125 [26853] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=/Users/hcab/.matplotlib
2021-02-03 09:59:06,129 [26853] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from /Users/hcab/.matplotlib/fontlist-v330.json
2021-02-03 09:59:06,298 [26853] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-03 09:59:06,302 [26853] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-03 10:42:56,637 [26853] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/scipy/signal/_savitzky_golay.py:135: RuntimeWarning:

internal gelsd driver lwork query error, required iwork dimension not returned. This is likely the result of LAPACK bug 0038, fixed in LAPACK 3.2.2 (released July 21, 2010). Falling back to 'gelss' driver.


2021-02-03 10:42:56,682 [26853] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/scipy/signal/_arraytools.py:45: FutureWarning:

Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.


2021-02-03 10:46:27,951 [26853] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 10:46:27,952 [26853] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 10:46:27,952 [26853] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 10:46:27,956 [26853] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 10:46:27,956 [26853] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 10:46:27,956 [26853] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 11:47:57,656 [30828] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 11:47:57,656 [30828] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 11:47:57,656 [30828] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 11:47:57,658 [30828] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 11:47:57,659 [30828] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 11:47:57,659 [30828] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 11:47:58,176 [30828] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 11:47:58,176 [30828] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 11:47:58,176 [30828] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 11:47:58,179 [30828] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 11:47:58,180 [30828] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 11:47:58,180 [30828] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 11:49:51,554 [30951] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 11:49:51,554 [30951] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 11:49:51,554 [30951] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 11:49:51,556 [30951] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 11:49:51,557 [30951] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 11:49:51,557 [30951] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 11:49:52,074 [30951] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 11:49:52,075 [30951] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 11:49:52,075 [30951] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 11:49:52,078 [30951] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 11:49:52,078 [30951] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 11:49:52,078 [30951] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 12:17:30,704 [30951] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-03 12:17:30,705 [30951] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2021-02-03 12:17:30,705 [30951] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2021-02-03 12:17:30,706 [30951] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:1] new[1:1]
2021-02-03 12:17:30,706 [30951] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2021-02-03 12:17:30,707 [30951] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2021-02-03 12:17:30,707 [30951] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-03 12:17:30,812 [30951] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi
2021-02-03 12:17:30,854 [30951] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2021-02-03 12:20:39,350 [30951] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-03 12:20:39,351 [30951] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2021-02-03 12:20:39,351 [30951] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:2] new[1:2]
2021-02-03 12:20:39,352 [30951] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2021-02-03 12:20:39,353 [30951] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-03 12:22:03,100 [30951] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-02-03 12:22:03,108 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-02-03 12:22:03,108 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-02-03 12:22:03,108 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,108 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,108 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-02-03 12:22:03,108 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-02-03 12:22:03,108 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,109 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-02-03 12:22:03,109 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-02-03 12:22:03,109 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,109 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,109 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-02-03 12:22:03,109 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-03 12:22:03,109 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,109 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,109 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,110 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,110 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,110 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,111 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,111 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,111 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,111 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,111 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,111 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,111 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-02-03 12:22:03,111 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-03 12:22:03,112 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,112 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,112 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,112 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,112 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,112 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,112 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-02-03 12:22:03,112 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-02-03 12:22:03,113 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,113 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,113 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,113 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,113 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,113 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,113 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,113 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,113 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
2021-02-03 12:22:03,113 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,114 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,114 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,114 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,114 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,114 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,114 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,114 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,114 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,114 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-02-03 12:22:03,114 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-02-03 12:22:03,115 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,115 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
2021-02-03 12:22:03,115 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,115 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-02-03 12:22:03,115 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,115 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,115 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,115 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,115 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
2021-02-03 12:22:03,115 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,115 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,115 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,116 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,116 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,116 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,116 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-03 12:22:03,116 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,116 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,116 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,117 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,117 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,117 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,117 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,117 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,117 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal 800 condensed>) = 10.629999999999999
2021-02-03 12:22:03,117 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-02-03 12:22:03,118 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,118 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,118 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,118 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2021-02-03 12:22:03,118 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,118 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
2021-02-03 12:22:03,118 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,118 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,118 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,119 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,119 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,119 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,119 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,119 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,119 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2021-02-03 12:22:03,119 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,119 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,119 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,119 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,119 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,120 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,120 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,120 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,120 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,120 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
2021-02-03 12:22:03,120 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,120 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
2021-02-03 12:22:03,120 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,121 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
2021-02-03 12:22:03,121 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,121 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,121 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,121 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,121 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,121 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal 400 condensed>) = 10.25
2021-02-03 12:22:03,122 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,122 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,122 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,122 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,122 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,122 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,122 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,122 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,123 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,123 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,123 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal 500 condensed>) = 10.344999999999999
2021-02-03 12:22:03,123 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,123 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,123 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,123 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,123 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,123 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,124 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYork.ttf) normal normal 425 normal>) = 10.07375
2021-02-03 12:22:03,124 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,124 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,124 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,124 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal 700 condensed>) = 10.535
2021-02-03 12:22:03,124 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
2021-02-03 12:22:03,124 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,124 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-03 12:22:03,125 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,125 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
2021-02-03 12:22:03,125 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,125 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,125 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,125 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,125 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,125 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,125 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
2021-02-03 12:22:03,126 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal 700 condensed>) = 10.535
2021-02-03 12:22:03,126 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,126 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Display' (SFCompactDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,126 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2021-02-03 12:22:03,126 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,126 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 300 normal>) = 11.145
2021-02-03 12:22:03,126 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,126 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,127 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,127 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,127 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,127 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,127 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,127 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,127 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,127 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,127 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,127 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,128 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,128 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,128 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,128 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,128 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,128 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
2021-02-03 12:22:03,128 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,129 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,129 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,129 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
2021-02-03 12:22:03,129 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,129 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,129 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,129 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,129 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,129 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,130 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,130 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,130 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
2021-02-03 12:22:03,130 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2021-02-03 12:22:03,130 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,130 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,130 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,131 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,131 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,131 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,131 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,131 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,131 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,131 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,131 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,132 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-03 12:22:03,132 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,132 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,132 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,132 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactTextItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-03 12:22:03,132 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,132 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-03 12:22:03,132 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,132 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactText.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,132 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
2021-02-03 12:22:03,133 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,133 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,133 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,133 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
2021-02-03 12:22:03,133 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,133 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,133 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,133 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,133 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,134 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,134 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,134 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,134 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,134 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,134 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,134 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,134 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,134 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,134 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-03 12:22:03,134 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2021-02-03 12:22:03,134 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
2021-02-03 12:22:03,135 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,135 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal 600 condensed>) = 10.44
2021-02-03 12:22:03,135 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
2021-02-03 12:22:03,135 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,135 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
2021-02-03 12:22:03,135 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
2021-02-03 12:22:03,135 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,135 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,135 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,135 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,135 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
2021-02-03 12:22:03,135 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,135 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,136 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,136 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2021-02-03 12:22:03,136 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,136 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,136 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,136 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
2021-02-03 12:22:03,136 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
2021-02-03 12:22:03,136 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,136 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal 500 condensed>) = 10.344999999999999
2021-02-03 12:22:03,136 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
2021-02-03 12:22:03,136 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
2021-02-03 12:22:03,136 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,137 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,137 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,137 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,137 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,137 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-03 12:22:03,137 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,137 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-03 12:22:03,137 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,137 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
2021-02-03 12:22:03,137 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
2021-02-03 12:22:03,137 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,137 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,137 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,138 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,138 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,138 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
2021-02-03 12:22:03,138 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,138 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,138 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
2021-02-03 12:22:03,138 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,138 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,138 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,139 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,139 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,139 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,139 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,139 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,139 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-03 12:22:03,139 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 425 normal>) = 11.07375
2021-02-03 12:22:03,140 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-03 12:22:03,140 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,140 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,140 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,140 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-02-03 12:22:03,140 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,140 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,140 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,140 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 300 normal>) = 10.145
2021-02-03 12:22:03,140 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,140 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,140 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,141 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal 300 condensed>) = 10.344999999999999
2021-02-03 12:22:03,141 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
2021-02-03 12:22:03,141 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,141 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,142 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal 400 condensed>) = 10.25
2021-02-03 12:22:03,142 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
2021-02-03 12:22:03,142 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,142 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-02-03 12:22:03,142 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,142 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,142 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,142 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
2021-02-03 12:22:03,142 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,143 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,143 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,143 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,143 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal 900 condensed>) = 10.725
2021-02-03 12:22:03,143 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,143 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,143 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,143 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,143 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,144 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,144 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,144 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,144 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-02-03 12:22:03,144 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,144 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,144 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,145 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
2021-02-03 12:22:03,145 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,145 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,145 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2021-02-03 12:22:03,145 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
2021-02-03 12:22:03,145 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,145 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
2021-02-03 12:22:03,145 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,145 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,146 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,146 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,146 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,146 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,146 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,146 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,146 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal 600 condensed>) = 10.44
2021-02-03 12:22:03,146 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,146 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,146 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,146 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
2021-02-03 12:22:03,147 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,147 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,147 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,147 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,147 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,147 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,147 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
2021-02-03 12:22:03,147 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,147 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,147 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
2021-02-03 12:22:03,147 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal 600 condensed>) = 10.44
2021-02-03 12:22:03,147 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-02-03 12:22:03,148 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
2021-02-03 12:22:03,148 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
2021-02-03 12:22:03,148 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-03 12:22:03,148 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,148 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2021-02-03 12:22:03,149 [30951] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
2021-02-03 12:22:03,149 [30951] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2021-02-03 12:22:11,641 [30951] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-03 12:22:11,641 [30951] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 1
2021-02-03 12:22:11,641 [30951] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:2] new[1:1]
2021-02-03 12:22:11,642 [30951] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-03 12:22:11,643 [30951] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-03 12:28:37,797 [30951] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-03 12:28:37,797 [30951] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-02-03 12:28:37,797 [30951] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-02-03 12:28:37,798 [30951] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-03 12:28:37,798 [30951] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-03 12:35:06,995 [30951] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 12:35:06,996 [30951] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 12:35:06,996 [30951] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 12:35:06,999 [30951] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 12:35:07,000 [30951] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 12:35:07,001 [30951] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 13:13:10,278 [30951] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/base/model.py:568: ConvergenceWarning:

Maximum Likelihood optimization failed to converge. Check mle_retvals


2021-02-03 13:13:15,303 [30951] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/base/model.py:568: ConvergenceWarning:

Maximum Likelihood optimization failed to converge. Check mle_retvals


2021-02-03 13:13:21,066 [30951] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/base/model.py:568: ConvergenceWarning:

Maximum Likelihood optimization failed to converge. Check mle_retvals


2021-02-03 13:13:26,455 [30951] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/base/model.py:568: ConvergenceWarning:

Maximum Likelihood optimization failed to converge. Check mle_retvals


2021-02-03 13:13:29,755 [30951] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/base/model.py:568: ConvergenceWarning:

Maximum Likelihood optimization failed to converge. Check mle_retvals


2021-02-03 13:13:31,560 [30951] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/base/model.py:568: ConvergenceWarning:

Maximum Likelihood optimization failed to converge. Check mle_retvals


2021-02-03 13:13:38,856 [30951] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/base/model.py:568: ConvergenceWarning:

Maximum Likelihood optimization failed to converge. Check mle_retvals


2021-02-03 13:13:43,906 [30951] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/base/model.py:568: ConvergenceWarning:

Maximum Likelihood optimization failed to converge. Check mle_retvals


2021-02-03 13:13:46,006 [30951] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/base/model.py:568: ConvergenceWarning:

Maximum Likelihood optimization failed to converge. Check mle_retvals


2021-02-03 13:13:50,856 [30951] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/base/model.py:568: ConvergenceWarning:

Maximum Likelihood optimization failed to converge. Check mle_retvals


2021-02-03 13:13:52,606 [30951] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/base/model.py:568: ConvergenceWarning:

Maximum Likelihood optimization failed to converge. Check mle_retvals


2021-02-03 13:13:54,763 [30951] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/base/model.py:568: ConvergenceWarning:

Maximum Likelihood optimization failed to converge. Check mle_retvals


2021-02-03 13:14:17,022 [30951] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/base/model.py:568: ConvergenceWarning:

Maximum Likelihood optimization failed to converge. Check mle_retvals


2021-02-03 14:21:26,134 [30951] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 14:21:26,136 [30951] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 14:21:26,137 [30951] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 14:21:26,151 [30951] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 14:21:26,154 [30951] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 14:21:26,154 [30951] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 17:55:34,715 [30951] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 17:55:34,717 [30951] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 17:55:34,718 [30951] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 17:55:34,728 [30951] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 17:55:34,729 [30951] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 17:55:34,730 [30951] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 17:55:50,333 [30951] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 17:55:50,334 [30951] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 17:55:50,335 [30951] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 17:55:50,342 [30951] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 17:55:50,343 [30951] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 17:55:50,343 [30951] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 19:43:35,814 [30951] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 19:43:35,815 [30951] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 19:43:35,815 [30951] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 19:43:35,820 [30951] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 19:43:35,820 [30951] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 19:43:35,821 [30951] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 20:03:27,328 [30951] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 20:03:27,329 [30951] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 20:03:27,329 [30951] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 20:03:27,334 [30951] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 20:03:27,334 [30951] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 20:03:27,334 [30951] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-03 22:11:11,967 [30951] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-03 22:11:11,968 [30951] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-03 22:11:11,968 [30951] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-03 22:11:11,973 [30951] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-03 22:11:11,974 [30951] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-03 22:11:11,974 [30951] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-04 10:34:35,749 [51227] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-04 10:34:35,750 [51227] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-04 10:34:35,750 [51227] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-04 10:34:35,754 [51227] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-04 10:34:35,754 [51227] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-04 10:34:35,755 [51227] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-04 10:34:36,275 [51227] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-04 10:34:36,276 [51227] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-04 10:34:36,276 [51227] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-04 10:34:36,281 [51227] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-04 10:34:36,281 [51227] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-04 10:34:36,282 [51227] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-04 10:34:53,793 [51227] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-04 10:34:53,794 [51227] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-04 10:34:53,800 [51227] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=/Users/hcab/.matplotlib
2021-02-04 10:34:53,803 [51227] DEBUG    matplotlib:1480: [JupyterRequire] matplotlib version 3.3.3
2021-02-04 10:34:53,803 [51227] DEBUG    matplotlib:1481: [JupyterRequire] interactive is False
2021-02-04 10:34:53,803 [51227] DEBUG    matplotlib:1482: [JupyterRequire] platform is darwin
2021-02-04 10:34:53,804 [51227] DEBUG    matplotlib:1483: [JupyterRequire] loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'google', 'zope', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', '__future__', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '_socket', 'array', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.sslproto', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'contextvars', 'immutables', 'immutables._map', 'immutables._version', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.file_io', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'jedi._compatibility', 'jedi.file_io', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.common', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.compiled.mixed', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.inference.references', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', '_scproxy', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'ctypes', '_ctypes', 'ctypes._endian', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_21', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'ipykernel.eventloops', 'distutils', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'IPython.core.completerlib', 'plistlib', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'appnope', 'appnope._nope', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.lib.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing._private.pytesttester', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.lib.histograms', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.core._multiarray_tests', 'numpy._distributor_init', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.interval', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arrays.categorical', 'csv', '_csv', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'mmap', 'zipfile', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.util.numba_', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.frame', 'pandas.core.internals.construction', 'pandas.core.reshape', 'pandas.core.reshape.melt', 'pandas.core.reshape.concat', 'pandas.core.reshape.util', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-02-04 10:34:53,871 [51227] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=/Users/hcab/.matplotlib
2021-02-04 10:34:53,874 [51227] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from /Users/hcab/.matplotlib/fontlist-v330.json
2021-02-04 10:34:54,273 [51227] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-04 10:34:54,279 [51227] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-04 10:37:19,116 [51361] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-04 10:37:19,117 [51361] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-04 10:37:19,117 [51361] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-04 10:37:19,119 [51361] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-04 10:37:19,119 [51361] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-04 10:37:19,119 [51361] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-04 10:37:20,587 [51361] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-04 10:37:20,588 [51361] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-04 10:37:20,593 [51361] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=/Users/hcab/.matplotlib
2021-02-04 10:37:20,596 [51361] DEBUG    matplotlib:1480: [JupyterRequire] matplotlib version 3.3.3
2021-02-04 10:37:20,597 [51361] DEBUG    matplotlib:1481: [JupyterRequire] interactive is False
2021-02-04 10:37:20,597 [51361] DEBUG    matplotlib:1482: [JupyterRequire] platform is darwin
2021-02-04 10:37:20,598 [51361] DEBUG    matplotlib:1483: [JupyterRequire] loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'google', 'zope', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', '__future__', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '_socket', 'array', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.sslproto', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'contextvars', 'immutables', 'immutables._map', 'immutables._version', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.file_io', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'jedi._compatibility', 'jedi.file_io', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.common', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.compiled.mixed', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.inference.references', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', '_scproxy', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'ctypes', '_ctypes', 'ctypes._endian', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_21', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'ipykernel.eventloops', 'distutils', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'IPython.core.completerlib', 'plistlib', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'appnope', 'appnope._nope', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.lib.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing._private.pytesttester', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.lib.histograms', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.core._multiarray_tests', 'numpy._distributor_init', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.interval', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arrays.categorical', 'csv', '_csv', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'mmap', 'zipfile', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.util.numba_', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.frame', 'pandas.core.internals.construction', 'pandas.core.reshape', 'pandas.core.reshape.melt', 'pandas.core.reshape.concat', 'pandas.core.reshape.util', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-02-04 10:37:20,668 [51361] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=/Users/hcab/.matplotlib
2021-02-04 10:37:20,673 [51361] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from /Users/hcab/.matplotlib/fontlist-v330.json
2021-02-04 10:37:20,974 [51361] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-04 10:37:20,979 [51361] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-04 10:37:31,662 [51361] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-04 10:37:31,663 [51361] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-04 10:37:31,663 [51361] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-04 10:37:31,665 [51361] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-04 10:37:31,666 [51361] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-04 10:37:31,667 [51361] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-04 10:45:06,011 [51361] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-04 10:45:06,012 [51361] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-02-04 10:45:06,012 [51361] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-02-04 10:45:06,012 [51361] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-04 10:45:06,012 [51361] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-04 10:45:06,019 [51361] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/ipywidgets/__init__.py
2021-02-04 10:47:17,063 [51361] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-04 10:47:17,064 [51361] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-02-04 10:47:17,064 [51361] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-02-04 10:47:17,064 [51361] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-04 10:47:17,064 [51361] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-04 10:47:18,479 [51361] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-04 10:47:18,479 [51361] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-02-04 10:47:18,479 [51361] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-02-04 10:47:18,479 [51361] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-04 10:47:18,480 [51361] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-04 10:52:28,198 [51361] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-04 10:52:28,198 [51361] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 3
2021-02-04 10:52:28,199 [51361] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:3]
2021-02-04 10:52:28,200 [51361] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2021-02-04 10:52:28,200 [51361] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-04 10:52:28,396 [51361] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi
2021-02-04 10:52:28,446 [51361] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2021-02-04 10:54:13,255 [51361] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-04 10:54:13,256 [51361] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 5
2021-02-04 10:54:13,256 [51361] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2021-02-04 10:54:13,258 [51361] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 5 (to 4 in part parser)
2021-02-04 10:54:13,258 [51361] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[3:3] new[3:5]
2021-02-04 10:54:13,258 [51361] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-04 10:57:38,593 [51361] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2021-02-04 10:57:38,594 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-02-04 10:57:38,594 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-02-04 10:57:38,594 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,594 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,595 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:57:38,595 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-02-04 10:57:38,595 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,595 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-02-04 10:57:38,595 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 10:57:38,595 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,595 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,595 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-02-04 10:57:38,595 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:57:38,595 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,595 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,595 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,596 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,596 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,596 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,596 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,596 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,596 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,596 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,596 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,596 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,596 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-02-04 10:57:38,596 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:57:38,596 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,597 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,597 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,597 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,597 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,597 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,597 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-02-04 10:57:38,597 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-02-04 10:57:38,597 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,597 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,597 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,597 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,597 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,597 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,598 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,598 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,598 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
2021-02-04 10:57:38,598 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,598 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,598 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,598 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,598 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,598 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,598 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,598 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,599 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,599 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-02-04 10:57:38,599 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-02-04 10:57:38,599 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,599 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
2021-02-04 10:57:38,599 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,599 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-02-04 10:57:38,599 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,599 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,599 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,599 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,599 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
2021-02-04 10:57:38,600 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,600 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,600 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,600 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,600 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,600 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,600 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 10:57:38,600 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,600 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,600 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,600 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,601 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,601 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,601 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,601 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,601 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal 800 condensed>) = 10.629999999999999
2021-02-04 10:57:38,601 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-02-04 10:57:38,601 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,601 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,601 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,601 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:57:38,601 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,601 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
2021-02-04 10:57:38,601 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,602 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,602 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,602 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,602 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,602 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,602 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,602 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,602 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2021-02-04 10:57:38,602 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,602 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,602 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,602 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,603 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,603 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,603 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,603 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,603 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,603 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
2021-02-04 10:57:38,603 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,603 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
2021-02-04 10:57:38,603 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,603 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
2021-02-04 10:57:38,603 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,604 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,604 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,604 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,604 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,604 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal 400 condensed>) = 10.25
2021-02-04 10:57:38,604 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,604 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,604 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,604 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,604 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,604 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,604 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,605 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,605 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,605 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,605 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal 500 condensed>) = 10.344999999999999
2021-02-04 10:57:38,605 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,605 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,605 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,605 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,605 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,605 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,605 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYork.ttf) normal normal 425 normal>) = 10.07375
2021-02-04 10:57:38,605 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,605 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,606 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,606 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal 700 condensed>) = 10.535
2021-02-04 10:57:38,606 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
2021-02-04 10:57:38,606 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,606 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:57:38,606 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,606 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
2021-02-04 10:57:38,606 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,606 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,606 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,606 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,606 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,606 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,607 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
2021-02-04 10:57:38,607 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal 700 condensed>) = 10.535
2021-02-04 10:57:38,607 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,607 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Display' (SFCompactDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,607 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2021-02-04 10:57:38,607 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,607 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 300 normal>) = 11.145
2021-02-04 10:57:38,607 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,607 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,607 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,607 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,607 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,607 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,608 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,608 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,608 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,608 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,608 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,608 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,608 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,608 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,608 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,608 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,608 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,608 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
2021-02-04 10:57:38,608 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,609 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,609 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,609 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
2021-02-04 10:57:38,609 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,609 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,609 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,609 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,609 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,609 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,609 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,609 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,609 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
2021-02-04 10:57:38,610 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2021-02-04 10:57:38,610 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,610 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,610 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,610 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,610 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,610 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,610 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,610 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,610 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,610 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,610 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,611 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:57:38,611 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,611 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,611 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,611 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactTextItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:57:38,611 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,611 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 10:57:38,611 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,611 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactText.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,611 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
2021-02-04 10:57:38,611 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,611 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,611 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,611 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
2021-02-04 10:57:38,612 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,612 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,612 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,612 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,612 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,612 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,612 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,612 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,613 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,613 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,613 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,613 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,613 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,613 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,613 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:57:38,613 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2021-02-04 10:57:38,613 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
2021-02-04 10:57:38,613 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,613 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal 600 condensed>) = 10.44
2021-02-04 10:57:38,614 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
2021-02-04 10:57:38,614 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,614 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
2021-02-04 10:57:38,614 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
2021-02-04 10:57:38,614 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,614 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,614 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,614 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,614 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
2021-02-04 10:57:38,614 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,615 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,615 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,615 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2021-02-04 10:57:38,615 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,615 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,615 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,615 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:57:38,615 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
2021-02-04 10:57:38,615 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,615 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal 500 condensed>) = 10.344999999999999
2021-02-04 10:57:38,615 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
2021-02-04 10:57:38,616 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
2021-02-04 10:57:38,616 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,616 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,616 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,616 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,616 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,616 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 10:57:38,616 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,616 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:57:38,616 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,616 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
2021-02-04 10:57:38,617 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
2021-02-04 10:57:38,617 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,617 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,617 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,617 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,617 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,617 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
2021-02-04 10:57:38,617 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,617 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,617 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
2021-02-04 10:57:38,617 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,617 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,617 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,618 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,618 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,618 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,618 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,618 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,618 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:57:38,618 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 425 normal>) = 11.07375
2021-02-04 10:57:38,618 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 10:57:38,618 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,618 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,618 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,618 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-02-04 10:57:38,619 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,619 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,619 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,619 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 300 normal>) = 10.145
2021-02-04 10:57:38,619 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,619 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,619 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,619 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal 300 condensed>) = 10.344999999999999
2021-02-04 10:57:38,619 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
2021-02-04 10:57:38,619 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,619 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,620 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal 400 condensed>) = 10.25
2021-02-04 10:57:38,620 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
2021-02-04 10:57:38,620 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,620 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-02-04 10:57:38,620 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,620 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,620 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,620 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
2021-02-04 10:57:38,620 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,620 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,620 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,621 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,621 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal 900 condensed>) = 10.725
2021-02-04 10:57:38,621 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,621 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,621 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,621 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,621 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,621 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,621 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,621 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,622 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-02-04 10:57:38,622 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,622 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,622 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,622 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
2021-02-04 10:57:38,622 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,622 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,622 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2021-02-04 10:57:38,622 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
2021-02-04 10:57:38,622 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,622 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
2021-02-04 10:57:38,622 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,622 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,623 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,623 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,623 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,623 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,623 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,623 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,623 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal 600 condensed>) = 10.44
2021-02-04 10:57:38,623 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,623 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,623 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,624 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
2021-02-04 10:57:38,624 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,624 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,624 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,624 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,624 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,624 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,624 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
2021-02-04 10:57:38,624 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,624 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,624 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
2021-02-04 10:57:38,625 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal 600 condensed>) = 10.44
2021-02-04 10:57:38,625 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-02-04 10:57:38,625 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
2021-02-04 10:57:38,625 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
2021-02-04 10:57:38,625 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:57:38,625 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,625 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:57:38,625 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
2021-02-04 10:57:38,625 [51361] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to DejaVu Sans ('/Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2021-02-04 10:58:16,255 [51361] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-02-04 10:58:16,256 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-02-04 10:58:16,256 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-02-04 10:58:16,257 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,257 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,258 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:58:16,258 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-02-04 10:58:16,258 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,258 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-02-04 10:58:16,258 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 10:58:16,258 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,258 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,258 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-02-04 10:58:16,259 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:58:16,259 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,259 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,259 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,259 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,259 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,259 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,259 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,259 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,259 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,260 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,260 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,260 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,260 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-02-04 10:58:16,260 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:58:16,260 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,260 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,260 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,260 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,260 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,260 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,260 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-02-04 10:58:16,261 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-02-04 10:58:16,261 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,261 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,261 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,261 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,261 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,261 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,262 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,262 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,262 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
2021-02-04 10:58:16,262 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,262 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,262 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,262 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,262 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,263 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,263 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,263 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,263 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,263 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-02-04 10:58:16,263 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-02-04 10:58:16,263 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,264 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
2021-02-04 10:58:16,264 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,264 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-02-04 10:58:16,264 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,264 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,264 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,264 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,265 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
2021-02-04 10:58:16,265 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,265 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,265 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,265 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,265 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,266 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,266 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 10:58:16,266 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,266 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,266 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,266 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,266 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,266 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,266 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,267 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,267 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal 800 condensed>) = 10.629999999999999
2021-02-04 10:58:16,267 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-02-04 10:58:16,267 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,267 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,267 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,267 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:58:16,268 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,268 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
2021-02-04 10:58:16,268 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,268 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,268 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,268 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,268 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,269 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,269 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,269 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,269 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2021-02-04 10:58:16,269 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,269 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,269 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,270 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,270 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,270 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,270 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,270 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,270 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,270 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
2021-02-04 10:58:16,270 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,270 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
2021-02-04 10:58:16,271 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,271 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
2021-02-04 10:58:16,271 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,271 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,271 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,271 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,271 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,271 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal 400 condensed>) = 10.25
2021-02-04 10:58:16,272 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,272 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,272 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,272 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,272 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,272 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,272 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,272 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,272 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,273 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,273 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal 500 condensed>) = 10.344999999999999
2021-02-04 10:58:16,273 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,273 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,273 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,273 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,273 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,274 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,274 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYork.ttf) normal normal 425 normal>) = 10.07375
2021-02-04 10:58:16,274 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,274 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,274 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,274 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal 700 condensed>) = 10.535
2021-02-04 10:58:16,274 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
2021-02-04 10:58:16,275 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,275 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:58:16,275 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,275 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
2021-02-04 10:58:16,275 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,275 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,275 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,275 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,275 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,275 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,276 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
2021-02-04 10:58:16,276 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal 700 condensed>) = 10.535
2021-02-04 10:58:16,276 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,276 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Display' (SFCompactDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,276 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2021-02-04 10:58:16,276 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,276 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 300 normal>) = 11.145
2021-02-04 10:58:16,276 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,276 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,277 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,277 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,277 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,277 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,277 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,277 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,277 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,278 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,278 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,278 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,278 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,278 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,278 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,278 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,278 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,278 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
2021-02-04 10:58:16,279 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,279 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,279 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,279 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
2021-02-04 10:58:16,279 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,279 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,279 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,279 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,279 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,280 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,280 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,280 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,280 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
2021-02-04 10:58:16,280 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2021-02-04 10:58:16,280 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,280 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,280 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,280 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,280 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,280 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,281 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,281 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,281 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,281 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,281 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,281 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:58:16,281 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,281 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,281 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,281 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactTextItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:58:16,281 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,281 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 10:58:16,281 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,282 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactText.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,282 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
2021-02-04 10:58:16,282 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,282 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,282 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,282 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
2021-02-04 10:58:16,282 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,282 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,282 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,282 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,282 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,283 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,283 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,283 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,283 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,283 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,283 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,283 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,283 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,283 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,283 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:58:16,283 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2021-02-04 10:58:16,283 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
2021-02-04 10:58:16,283 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,284 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal 600 condensed>) = 10.44
2021-02-04 10:58:16,284 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
2021-02-04 10:58:16,284 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,284 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
2021-02-04 10:58:16,284 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
2021-02-04 10:58:16,284 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,284 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,284 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,284 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,284 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
2021-02-04 10:58:16,284 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,285 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,285 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,285 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2021-02-04 10:58:16,285 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,285 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,285 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,286 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:58:16,286 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
2021-02-04 10:58:16,286 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,286 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal 500 condensed>) = 10.344999999999999
2021-02-04 10:58:16,286 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
2021-02-04 10:58:16,286 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
2021-02-04 10:58:16,287 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,287 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,287 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,287 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,287 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,287 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 10:58:16,287 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,287 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:58:16,287 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,288 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
2021-02-04 10:58:16,288 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
2021-02-04 10:58:16,288 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,288 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,288 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,288 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,288 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,288 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
2021-02-04 10:58:16,288 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,288 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,289 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
2021-02-04 10:58:16,289 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,289 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,289 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,289 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,289 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,289 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,289 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,289 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,289 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 10:58:16,289 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 425 normal>) = 11.07375
2021-02-04 10:58:16,289 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 10:58:16,289 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,290 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,290 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,290 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-02-04 10:58:16,290 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,290 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,290 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,290 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 300 normal>) = 10.145
2021-02-04 10:58:16,290 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,290 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,290 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,290 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal 300 condensed>) = 10.344999999999999
2021-02-04 10:58:16,290 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
2021-02-04 10:58:16,291 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,291 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,291 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal 400 condensed>) = 10.25
2021-02-04 10:58:16,291 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
2021-02-04 10:58:16,291 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,291 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-02-04 10:58:16,291 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,291 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,291 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,291 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
2021-02-04 10:58:16,291 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,291 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,291 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,291 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,292 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal 900 condensed>) = 10.725
2021-02-04 10:58:16,292 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,292 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,292 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,292 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,292 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,292 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,292 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,292 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,292 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-02-04 10:58:16,292 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,293 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,293 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,293 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
2021-02-04 10:58:16,293 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,293 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,293 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2021-02-04 10:58:16,293 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
2021-02-04 10:58:16,293 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,293 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
2021-02-04 10:58:16,293 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,293 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,294 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,294 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,294 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,294 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,294 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,294 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,294 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal 600 condensed>) = 10.44
2021-02-04 10:58:16,294 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,294 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,294 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,294 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
2021-02-04 10:58:16,294 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,295 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,295 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,295 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,295 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,295 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,295 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
2021-02-04 10:58:16,295 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,295 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,295 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
2021-02-04 10:58:16,295 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal 600 condensed>) = 10.44
2021-02-04 10:58:16,295 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-02-04 10:58:16,295 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
2021-02-04 10:58:16,295 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
2021-02-04 10:58:16,296 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 10:58:16,296 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,296 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2021-02-04 10:58:16,296 [51361] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
2021-02-04 10:58:16,296 [51361] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2021-02-04 11:03:44,312 [51361] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-04 11:03:44,313 [51361] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 5; new: 1
2021-02-04 11:03:44,314 [51361] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:5] new[1:1]
2021-02-04 11:03:44,315 [51361] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-04 11:03:44,315 [51361] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-04 11:03:44,320 [51361] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-04 11:03:44,322 [51361] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 692; new: 697
2021-02-04 11:03:44,323 [51361] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[1:265] new[1:265]
2021-02-04 11:03:44,324 [51361] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[1:291] new[1:265]
2021-02-04 11:03:44,324 [51361] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[insert] old[266:265] new[266:268]
2021-02-04 11:03:44,326 [51361] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 266 to 269 (to 269 in part parser)
2021-02-04 11:03:44,326 [51361] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[266:343] new[269:346]
2021-02-04 11:03:44,327 [51361] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[267:291] new[270:294]
2021-02-04 11:03:44,327 [51361] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[294:389] new[295:346]
2021-02-04 11:03:44,327 [51361] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[344:344] new[347:347]
2021-02-04 11:03:44,328 [51361] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 347 to 349 (to 351 in part parser)
2021-02-04 11:03:44,328 [51361] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[345:424] new[348:427]
2021-02-04 11:03:44,329 [51361] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[349:389] new[350:392]
2021-02-04 11:03:44,329 [51361] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[392:433] new[393:423]
2021-02-04 11:03:44,333 [51361] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 424 to 436 (to 437 in part parser)
2021-02-04 11:03:44,333 [51361] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[425:425] new[428:430]
2021-02-04 11:03:44,333 [51361] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[equal] old[426:692] new[431:697]
2021-02-04 11:03:44,333 [51361] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[433:433] new[437:438]
2021-02-04 11:03:44,334 [51361] DEBUG    parso.python.diff:380: [JupyterRequire] copy old[436:690] new[439:695]
2021-02-04 11:03:44,335 [51361] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 696 to 696 (to 696 in part parser)
2021-02-04 11:03:44,339 [51361] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-04 11:03:45,996 [51361] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-04 11:03:45,996 [51361] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-02-04 11:03:45,996 [51361] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-02-04 11:03:45,997 [51361] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-04 11:03:45,997 [51361] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-04 11:08:49,028 [52845] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-04 11:08:49,028 [52845] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-04 11:08:49,028 [52845] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-04 11:08:49,031 [52845] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-04 11:08:49,032 [52845] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-04 11:08:49,032 [52845] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-04 11:08:53,696 [52845] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-04 11:08:53,697 [52845] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-04 11:08:53,706 [52845] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=/Users/hcab/.matplotlib
2021-02-04 11:08:53,710 [52845] DEBUG    matplotlib:1480: [JupyterRequire] matplotlib version 3.3.3
2021-02-04 11:08:53,711 [52845] DEBUG    matplotlib:1481: [JupyterRequire] interactive is False
2021-02-04 11:08:53,712 [52845] DEBUG    matplotlib:1482: [JupyterRequire] platform is darwin
2021-02-04 11:08:53,712 [52845] DEBUG    matplotlib:1483: [JupyterRequire] loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'google', 'zope', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', '__future__', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '_socket', 'array', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.sslproto', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'contextvars', 'immutables', 'immutables._map', 'immutables._version', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.file_io', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'jedi._compatibility', 'jedi.file_io', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.common', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.compiled.mixed', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.inference.references', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', '_scproxy', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'ctypes', '_ctypes', 'ctypes._endian', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_21', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'ipykernel.eventloops', 'distutils', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'IPython.core.completerlib', 'plistlib', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'appnope', 'appnope._nope', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.lib.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing._private.pytesttester', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.lib.histograms', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.core._multiarray_tests', 'numpy._distributor_init', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.interval', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arrays.categorical', 'csv', '_csv', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'mmap', 'zipfile', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.util.numba_', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.frame', 'pandas.core.internals.construction', 'pandas.core.reshape', 'pandas.core.reshape.melt', 'pandas.core.reshape.concat', 'pandas.core.reshape.util', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-02-04 11:08:53,797 [52845] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=/Users/hcab/.matplotlib
2021-02-04 11:08:53,801 [52845] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from /Users/hcab/.matplotlib/fontlist-v330.json
2021-02-04 11:08:54,095 [52845] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-04 11:08:54,100 [52845] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-04 12:34:38,142 [56474] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-04 12:34:38,142 [56474] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-04 12:34:38,142 [56474] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-04 12:34:38,144 [56474] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-04 12:34:38,144 [56474] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-04 12:34:38,145 [56474] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-04 12:34:38,659 [56474] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-04 12:34:38,659 [56474] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-04 12:34:38,659 [56474] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-04 12:34:38,664 [56474] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-04 12:34:38,665 [56474] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-04 12:34:38,665 [56474] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-04 12:34:52,900 [56520] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-04 12:34:52,901 [56520] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-04 12:34:52,901 [56520] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-04 12:34:52,904 [56520] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-04 12:34:52,905 [56520] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-04 12:34:52,905 [56520] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-04 12:35:01,221 [56520] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-04 12:35:01,222 [56520] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-04 12:35:01,227 [56520] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=/Users/hcab/.matplotlib
2021-02-04 12:35:01,229 [56520] DEBUG    matplotlib:1480: [JupyterRequire] matplotlib version 3.3.3
2021-02-04 12:35:01,229 [56520] DEBUG    matplotlib:1481: [JupyterRequire] interactive is False
2021-02-04 12:35:01,230 [56520] DEBUG    matplotlib:1482: [JupyterRequire] platform is darwin
2021-02-04 12:35:01,230 [56520] DEBUG    matplotlib:1483: [JupyterRequire] loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'google', 'zope', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', '__future__', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '_socket', 'array', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.sslproto', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'contextvars', 'immutables', 'immutables._map', 'immutables._version', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.file_io', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'jedi._compatibility', 'jedi.file_io', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.common', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.compiled.mixed', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.inference.references', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', '_scproxy', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'ctypes', '_ctypes', 'ctypes._endian', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_21', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'ipykernel.eventloops', 'distutils', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'IPython.core.completerlib', 'plistlib', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'appnope', 'appnope._nope', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'support', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.lib.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing._private.pytesttester', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.lib.histograms', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.core._multiarray_tests', 'numpy._distributor_init', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.interval', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arrays.categorical', 'csv', '_csv', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'mmap', 'zipfile', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.util.numba_', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.frame', 'pandas.core.internals.construction', 'pandas.core.reshape', 'pandas.core.reshape.melt', 'pandas.core.reshape.concat', 'pandas.core.reshape.util', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'statsmodels', 'statsmodels._version', 'statsmodels.tsa', 'statsmodels.tools', 'statsmodels.tools.tools', 'numpy.lib.recfunctions', 'numpy.ma.mrecords', 'statsmodels.compat', 'statsmodels.tools._testing', 'statsmodels.compat.pandas', 'statsmodels.compat.python', 'statsmodels.tools.data', 'statsmodels.tools.validation', 'statsmodels.tools.validation.validation', 'statsmodels.tsa.seasonal', 'statsmodels.tsa._stl', 'statsmodels.tsa.tsatools', 'statsmodels.compat.numpy', 'statsmodels.tools.sm_exceptions', 'statsmodels.tsa.filters', 'statsmodels.tsa.filters.filtertools', 'scipy', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib._version', 'scipy._lib.six', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fftpack._fftpack', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.helper', 'numpy.dual', 'scipy.fftpack.realtransforms', 'scipy.signal', 'scipy.signal.sigtools', 'scipy.signal.windows', 'scipy.signal.windows.windows', 'scipy.linalg', 'scipy.linalg.linalg_version', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', '_cython_0_28_2', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', 'scipy.special._ufuncs_cxx', 'scipy.special.basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special.lambertw', 'scipy.special._spherical_bessel', 'scipy.signal.waveforms', 'scipy.signal._max_len_seq', 'scipy.signal._max_len_seq_inner', 'scipy.signal._upfirdn', 'scipy.signal._upfirdn_apply', 'scipy.signal.spline', 'scipy.signal.bsplines', 'scipy.signal.filter_design', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._minimize', 'scipy.sparse', 'scipy.sparse.base', 'scipy._lib._numpy_compat', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg._expm_multiply', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._differentiable_functions', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize.nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_ip', 'scipy.optimize._remove_redundancy', 'scipy.optimize._hungarian', 'scipy.optimize._differentialevolution', 'scipy.signal.fir_filter_design', 'scipy.signal.ltisys', 'scipy.integrate', 'scipy.integrate.quadrature', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.interpolate', 'scipy.interpolate.interpolate', 'scipy.interpolate.fitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._bsplines', 'scipy.interpolate._bspl', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'numpy.matlib', 'scipy.spatial._voronoi', 'scipy.spatial.distance', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.interpolate.rbf', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.signal.lti_conversion', 'scipy.signal.signaltools', 'scipy.signal._arraytools', 'scipy.signal._savitzky_golay', 'scipy.ndimage', 'scipy.ndimage.filters', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy.ndimage._ni_docstrings', 'scipy.misc', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.misc.pilutil', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageFilter', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', 'scipy.ndimage.measurements', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.io', 'scipy.signal.spectral', 'scipy.signal._spectral', 'scipy.signal.wavelets', 'scipy.signal._peak_finding', 'scipy.stats', 'scipy.stats.stats', 'scipy.stats.distributions', 'scipy.stats._distn_infrastructure', 'scipy.stats._distr_params', 'scipy.stats._constants', 'scipy.stats._continuous_distns', 'scipy.stats._stats', 'scipy.stats._tukeylambda_stats', 'scipy.stats._discrete_distns', 'scipy.stats.mstats_basic', 'scipy.stats._stats_mstats_common', 'scipy.stats.morestats', 'scipy.stats.statlib', 'scipy.stats.contingency', 'scipy.stats._binned_statistic', 'scipy.stats.kde', 'scipy.stats.mvn', 'scipy.stats.mstats', 'scipy.stats.mstats_extras', 'scipy.stats._multivariate', 'scipy.signal._peak_finding_utils', 'elucidata', 'elucidata.tools', 'elucidata.tools.preprocessing', 'elucidata.tools.preprocessing.outliers', 'statsmodels.stats', 'statsmodels.stats.stattools', 'elucidata.tools.utils', 'elucidata.tools.utils.df_utils', 'ipywidgets', 'ipywidgets._version', 'ipywidgets.widgets', 'ipywidgets.widgets.widget', 'ipywidgets.widgets.domwidget', 'ipywidgets.widgets.trait_types', 'ipywidgets.widgets.util', 'ipywidgets.widgets.widget_layout', 'ipywidgets.widgets.widget_style', 'ipywidgets.widgets.valuewidget', 'ipywidgets.widgets.widget_core', 'ipywidgets.widgets.widget_bool', 'ipywidgets.widgets.widget_description', 'ipywidgets.widgets.widget_button', 'ipywidgets.widgets.widget_box', 'ipywidgets.widgets.docutils', 'ipywidgets.widgets.widget_float', 'ipywidgets.widgets.widget_int', 'ipywidgets.widgets.widget_color', 'ipywidgets.widgets.widget_date', 'ipywidgets.widgets.widget_output', 'ipywidgets.widgets.widget_selection', 'ipywidgets.widgets.widget_selectioncontainer', 'ipywidgets.widgets.widget_string', 'ipywidgets.widgets.widget_controller', 'ipywidgets.widgets.interaction', 'ipywidgets.widgets.widget_link', 'ipywidgets.widgets.widget_media', 'ipywidgets.widgets.widget_templates', 'ipywidgets.widgets.widget_upload', 'cufflinks', 'cufflinks.date_tools', 'cufflinks.utils', 'cufflinks.datagen', 'cufflinks.auth', 'cufflinks.offline', 'plotly', '_plotly_utils', '_plotly_utils.importers', 'plotly.graph_objs', 'plotly.graph_objs._area', 'plotly.basedatatypes', '_plotly_utils.utils', '_plotly_utils.optional_imports', '_plotly_utils.basevalidators', '_plotly_utils.exceptions', 'plotly.optional_imports', 'plotly.shapeannotation', 'plotly.subplots', 'plotly.graph_objs._bar', 'plotly.graph_objs._barpolar', 'plotly.graph_objs._box', 'plotly.graph_objs._candlestick', 'plotly.graph_objs._carpet', 'plotly.graph_objs._choropleth', 'plotly.graph_objs._choroplethmapbox', 'plotly.graph_objs._cone', 'plotly.graph_objs._contour', 'plotly.graph_objs._contourcarpet', 'plotly.graph_objs._densitymapbox', 'plotly.graph_objs._deprecations', 'plotly.graph_objs._figure', 'plotly.graph_objs._frame', 'plotly.graph_objs._funnel', 'plotly.graph_objs._funnelarea', 'plotly.graph_objs._heatmap', 'plotly.graph_objs._heatmapgl', 'plotly.graph_objs._histogram', 'plotly.graph_objs._histogram2d', 'plotly.graph_objs._histogram2dcontour', 'plotly.graph_objs._image', 'plotly.graph_objs._indicator', 'plotly.graph_objs._isosurface', 'plotly.graph_objs._layout', 'plotly.graph_objs._mesh3d', 'plotly.graph_objs._ohlc', 'plotly.graph_objs._parcats', 'plotly.graph_objs._parcoords', 'plotly.graph_objs._pie', 'plotly.graph_objs._pointcloud', 'plotly.graph_objs._sankey', 'plotly.graph_objs._scatter', 'plotly.graph_objs._scatter3d', 'plotly.graph_objs._scattercarpet', 'plotly.graph_objs._scattergeo', 'plotly.graph_objs._scattergl', 'plotly.graph_objs._scattermapbox', 'plotly.graph_objs._scatterpolar', 'plotly.graph_objs._scatterpolargl', 'plotly.graph_objs._scatterternary', 'plotly.graph_objs._splom', 'plotly.graph_objs._streamtube', 'plotly.graph_objs._sunburst', 'plotly.graph_objs._surface', 'plotly.graph_objs._table', 'plotly.graph_objs._treemap', 'plotly.graph_objs._violin', 'plotly.graph_objs._volume', 'plotly.graph_objs._waterfall', 'plotly.graph_objs.area', 'plotly.graph_objs.area._hoverlabel', 'plotly.graph_objs.area._marker', 'plotly.graph_objs.area._stream', 'plotly.graph_objs.area.hoverlabel', 'plotly.graph_objs.area.hoverlabel._font', 'plotly.graph_objs.bar', 'plotly.graph_objs.bar._error_x', 'plotly.graph_objs.bar._error_y', 'plotly.graph_objs.bar._hoverlabel', 'plotly.graph_objs.bar._insidetextfont', 'plotly.graph_objs.bar._marker', 'plotly.graph_objs.bar._outsidetextfont', 'plotly.graph_objs.bar._selected', 'plotly.graph_objs.bar._stream', 'plotly.graph_objs.bar._textfont', 'plotly.graph_objs.bar._unselected', 'plotly.graph_objs.bar.hoverlabel', 'plotly.graph_objs.bar.hoverlabel._font', 'plotly.graph_objs.bar.marker', 'plotly.graph_objs.bar.marker._colorbar', 'plotly.graph_objs.bar.marker._line', 'plotly.graph_objs.bar.marker.colorbar', 'plotly.graph_objs.bar.marker.colorbar._tickfont', 'plotly.graph_objs.bar.marker.colorbar._tickformatstop', 'plotly.graph_objs.bar.marker.colorbar._title', 'plotly.graph_objs.bar.marker.colorbar.title', 'plotly.graph_objs.bar.marker.colorbar.title._font', 'plotly.graph_objs.bar.selected', 'plotly.graph_objs.bar.selected._marker', 'plotly.graph_objs.bar.selected._textfont', 'plotly.graph_objs.bar.unselected', 'plotly.graph_objs.bar.unselected._marker', 'plotly.graph_objs.bar.unselected._textfont', 'plotly.graph_objs.barpolar', 'plotly.graph_objs.barpolar._hoverlabel', 'plotly.graph_objs.barpolar._marker', 'plotly.graph_objs.barpolar._selected', 'plotly.graph_objs.barpolar._stream', 'plotly.graph_objs.barpolar._unselected', 'plotly.graph_objs.barpolar.hoverlabel', 'plotly.graph_objs.barpolar.hoverlabel._font', 'plotly.graph_objs.barpolar.marker', 'plotly.graph_objs.barpolar.marker._colorbar', 'plotly.graph_objs.barpolar.marker._line', 'plotly.graph_objs.barpolar.marker.colorbar', 'plotly.graph_objs.barpolar.marker.colorbar._tickfont', 'plotly.graph_objs.barpolar.marker.colorbar._tickformatstop', 'plotly.graph_objs.barpolar.marker.colorbar._title', 'plotly.graph_objs.barpolar.marker.colorbar.title', 'plotly.graph_objs.barpolar.marker.colorbar.title._font', 'plotly.graph_objs.barpolar.selected', 'plotly.graph_objs.barpolar.selected._marker', 'plotly.graph_objs.barpolar.selected._textfont', 'plotly.graph_objs.barpolar.unselected', 'plotly.graph_objs.barpolar.unselected._marker', 'plotly.graph_objs.barpolar.unselected._textfont', 'plotly.graph_objs.box', 'plotly.graph_objs.box._hoverlabel', 'plotly.graph_objs.box._line', 'plotly.graph_objs.box._marker', 'plotly.graph_objs.box._selected', 'plotly.graph_objs.box._stream', 'plotly.graph_objs.box._unselected', 'plotly.graph_objs.box.hoverlabel', 'plotly.graph_objs.box.hoverlabel._font', 'plotly.graph_objs.box.marker', 'plotly.graph_objs.box.marker._line', 'plotly.graph_objs.box.selected', 'plotly.graph_objs.box.selected._marker', 'plotly.graph_objs.box.unselected', 'plotly.graph_objs.box.unselected._marker', 'plotly.graph_objs.candlestick', 'plotly.graph_objs.candlestick._decreasing', 'plotly.graph_objs.candlestick._hoverlabel', 'plotly.graph_objs.candlestick._increasing', 'plotly.graph_objs.candlestick._line', 'plotly.graph_objs.candlestick._stream', 'plotly.graph_objs.candlestick.decreasing', 'plotly.graph_objs.candlestick.decreasing._line', 'plotly.graph_objs.candlestick.hoverlabel', 'plotly.graph_objs.candlestick.hoverlabel._font', 'plotly.graph_objs.candlestick.increasing', 'plotly.graph_objs.candlestick.increasing._line', 'plotly.graph_objs.carpet', 'plotly.graph_objs.carpet._aaxis', 'plotly.graph_objs.carpet._baxis', 'plotly.graph_objs.carpet._font', 'plotly.graph_objs.carpet._stream', 'plotly.graph_objs.carpet.aaxis', 'plotly.graph_objs.carpet.aaxis._tickfont', 'plotly.graph_objs.carpet.aaxis._tickformatstop', 'plotly.graph_objs.carpet.aaxis._title', 'plotly.graph_objs.carpet.aaxis.title', 'plotly.graph_objs.carpet.aaxis.title._font', 'plotly.graph_objs.carpet.baxis', 'plotly.graph_objs.carpet.baxis._tickfont', 'plotly.graph_objs.carpet.baxis._tickformatstop', 'plotly.graph_objs.carpet.baxis._title', 'plotly.graph_objs.carpet.baxis.title', 'plotly.graph_objs.carpet.baxis.title._font', 'plotly.graph_objs.choropleth', 'plotly.graph_objs.choropleth._colorbar', 'plotly.graph_objs.choropleth._hoverlabel', 'plotly.graph_objs.choropleth._marker', 'plotly.graph_objs.choropleth._selected', 'plotly.graph_objs.choropleth._stream', 'plotly.graph_objs.choropleth._unselected', 'plotly.graph_objs.choropleth.colorbar', 'plotly.graph_objs.choropleth.colorbar._tickfont', 'plotly.graph_objs.choropleth.colorbar._tickformatstop', 'plotly.graph_objs.choropleth.colorbar._title', 'plotly.graph_objs.choropleth.colorbar.title', 'plotly.graph_objs.choropleth.colorbar.title._font', 'plotly.graph_objs.choropleth.hoverlabel', 'plotly.graph_objs.choropleth.hoverlabel._font', 'plotly.graph_objs.choropleth.marker', 'plotly.graph_objs.choropleth.marker._line', 'plotly.graph_objs.choropleth.selected', 'plotly.graph_objs.choropleth.selected._marker', 'plotly.graph_objs.choropleth.unselected', 'plotly.graph_objs.choropleth.unselected._marker', 'plotly.graph_objs.choroplethmapbox', 'plotly.graph_objs.choroplethmapbox._colorbar', 'plotly.graph_objs.choroplethmapbox._hoverlabel', 'plotly.graph_objs.choroplethmapbox._marker', 'plotly.graph_objs.choroplethmapbox._selected', 'plotly.graph_objs.choroplethmapbox._stream', 'plotly.graph_objs.choroplethmapbox._unselected', 'plotly.graph_objs.choroplethmapbox.colorbar', 'plotly.graph_objs.choroplethmapbox.colorbar._tickfont', 'plotly.graph_objs.choroplethmapbox.colorbar._tickformatstop', 'plotly.graph_objs.choroplethmapbox.colorbar._title', 'plotly.graph_objs.choroplethmapbox.colorbar.title', 'plotly.graph_objs.choroplethmapbox.colorbar.title._font', 'plotly.graph_objs.choroplethmapbox.hoverlabel', 'plotly.graph_objs.choroplethmapbox.hoverlabel._font', 'plotly.graph_objs.choroplethmapbox.marker', 'plotly.graph_objs.choroplethmapbox.marker._line', 'plotly.graph_objs.choroplethmapbox.selected', 'plotly.graph_objs.choroplethmapbox.selected._marker', 'plotly.graph_objs.choroplethmapbox.unselected', 'plotly.graph_objs.choroplethmapbox.unselected._marker', 'plotly.graph_objs.cone', 'plotly.graph_objs.cone._colorbar', 'plotly.graph_objs.cone._hoverlabel', 'plotly.graph_objs.cone._lighting', 'plotly.graph_objs.cone._lightposition', 'plotly.graph_objs.cone._stream', 'plotly.graph_objs.cone.colorbar', 'plotly.graph_objs.cone.colorbar._tickfont', 'plotly.graph_objs.cone.colorbar._tickformatstop', 'plotly.graph_objs.cone.colorbar._title', 'plotly.graph_objs.cone.colorbar.title', 'plotly.graph_objs.cone.colorbar.title._font', 'plotly.graph_objs.cone.hoverlabel', 'plotly.graph_objs.cone.hoverlabel._font', 'plotly.graph_objs.contour', 'plotly.graph_objs.contour._colorbar', 'plotly.graph_objs.contour._contours', 'plotly.graph_objs.contour._hoverlabel', 'plotly.graph_objs.contour._line', 'plotly.graph_objs.contour._stream', 'plotly.graph_objs.contour.colorbar', 'plotly.graph_objs.contour.colorbar._tickfont', 'plotly.graph_objs.contour.colorbar._tickformatstop', 'plotly.graph_objs.contour.colorbar._title', 'plotly.graph_objs.contour.colorbar.title', 'plotly.graph_objs.contour.colorbar.title._font', 'plotly.graph_objs.contour.contours', 'plotly.graph_objs.contour.contours._labelfont', 'plotly.graph_objs.contour.hoverlabel', 'plotly.graph_objs.contour.hoverlabel._font', 'plotly.graph_objs.contourcarpet', 'plotly.graph_objs.contourcarpet._colorbar', 'plotly.graph_objs.contourcarpet._contours', 'plotly.graph_objs.contourcarpet._line', 'plotly.graph_objs.contourcarpet._stream', 'plotly.graph_objs.contourcarpet.colorbar', 'plotly.graph_objs.contourcarpet.colorbar._tickfont', 'plotly.graph_objs.contourcarpet.colorbar._tickformatstop', 'plotly.graph_objs.contourcarpet.colorbar._title', 'plotly.graph_objs.contourcarpet.colorbar.title', 'plotly.graph_objs.contourcarpet.colorbar.title._font', 'plotly.graph_objs.contourcarpet.contours', 'plotly.graph_objs.contourcarpet.contours._labelfont', 'plotly.graph_objs.densitymapbox', 'plotly.graph_objs.densitymapbox._colorbar', 'plotly.graph_objs.densitymapbox._hoverlabel', 'plotly.graph_objs.densitymapbox._stream', 'plotly.graph_objs.densitymapbox.colorbar', 'plotly.graph_objs.densitymapbox.colorbar._tickfont', 'plotly.graph_objs.densitymapbox.colorbar._tickformatstop', 'plotly.graph_objs.densitymapbox.colorbar._title', 'plotly.graph_objs.densitymapbox.colorbar.title', 'plotly.graph_objs.densitymapbox.colorbar.title._font', 'plotly.graph_objs.densitymapbox.hoverlabel', 'plotly.graph_objs.densitymapbox.hoverlabel._font', 'plotly.graph_objs.funnel', 'plotly.graph_objs.funnel._connector', 'plotly.graph_objs.funnel._hoverlabel', 'plotly.graph_objs.funnel._insidetextfont', 'plotly.graph_objs.funnel._marker', 'plotly.graph_objs.funnel._outsidetextfont', 'plotly.graph_objs.funnel._stream', 'plotly.graph_objs.funnel._textfont', 'plotly.graph_objs.funnel.connector', 'plotly.graph_objs.funnel.connector._line', 'plotly.graph_objs.funnel.hoverlabel', 'plotly.graph_objs.funnel.hoverlabel._font', 'plotly.graph_objs.funnel.marker', 'plotly.graph_objs.funnel.marker._colorbar', 'plotly.graph_objs.funnel.marker._line', 'plotly.graph_objs.funnel.marker.colorbar', 'plotly.graph_objs.funnel.marker.colorbar._tickfont', 'plotly.graph_objs.funnel.marker.colorbar._tickformatstop', 'plotly.graph_objs.funnel.marker.colorbar._title', 'plotly.graph_objs.funnel.marker.colorbar.title', 'plotly.graph_objs.funnel.marker.colorbar.title._font', 'plotly.graph_objs.funnelarea', 'plotly.graph_objs.funnelarea._domain', 'plotly.graph_objs.funnelarea._hoverlabel', 'plotly.graph_objs.funnelarea._insidetextfont', 'plotly.graph_objs.funnelarea._marker', 'plotly.graph_objs.funnelarea._stream', 'plotly.graph_objs.funnelarea._textfont', 'plotly.graph_objs.funnelarea._title', 'plotly.graph_objs.funnelarea.hoverlabel', 'plotly.graph_objs.funnelarea.hoverlabel._font', 'plotly.graph_objs.funnelarea.marker', 'plotly.graph_objs.funnelarea.marker._line', 'plotly.graph_objs.funnelarea.title', 'plotly.graph_objs.funnelarea.title._font', 'plotly.graph_objs.heatmap', 'plotly.graph_objs.heatmap._colorbar', 'plotly.graph_objs.heatmap._hoverlabel', 'plotly.graph_objs.heatmap._stream', 'plotly.graph_objs.heatmap.colorbar', 'plotly.graph_objs.heatmap.colorbar._tickfont', 'plotly.graph_objs.heatmap.colorbar._tickformatstop', 'plotly.graph_objs.heatmap.colorbar._title', 'plotly.graph_objs.heatmap.colorbar.title', 'plotly.graph_objs.heatmap.colorbar.title._font', 'plotly.graph_objs.heatmap.hoverlabel', 'plotly.graph_objs.heatmap.hoverlabel._font', 'plotly.graph_objs.heatmapgl', 'plotly.graph_objs.heatmapgl._colorbar', 'plotly.graph_objs.heatmapgl._hoverlabel', 'plotly.graph_objs.heatmapgl._stream', 'plotly.graph_objs.heatmapgl.colorbar', 'plotly.graph_objs.heatmapgl.colorbar._tickfont', 'plotly.graph_objs.heatmapgl.colorbar._tickformatstop', 'plotly.graph_objs.heatmapgl.colorbar._title', 'plotly.graph_objs.heatmapgl.colorbar.title', 'plotly.graph_objs.heatmapgl.colorbar.title._font', 'plotly.graph_objs.heatmapgl.hoverlabel', 'plotly.graph_objs.heatmapgl.hoverlabel._font', 'plotly.graph_objs.histogram', 'plotly.graph_objs.histogram._cumulative', 'plotly.graph_objs.histogram._error_x', 'plotly.graph_objs.histogram._error_y', 'plotly.graph_objs.histogram._hoverlabel', 'plotly.graph_objs.histogram._marker', 'plotly.graph_objs.histogram._selected', 'plotly.graph_objs.histogram._stream', 'plotly.graph_objs.histogram._unselected', 'plotly.graph_objs.histogram._xbins', 'plotly.graph_objs.histogram._ybins', 'plotly.graph_objs.histogram.hoverlabel', 'plotly.graph_objs.histogram.hoverlabel._font', 'plotly.graph_objs.histogram.marker', 'plotly.graph_objs.histogram.marker._colorbar', 'plotly.graph_objs.histogram.marker._line', 'plotly.graph_objs.histogram.marker.colorbar', 'plotly.graph_objs.histogram.marker.colorbar._tickfont', 'plotly.graph_objs.histogram.marker.colorbar._tickformatstop', 'plotly.graph_objs.histogram.marker.colorbar._title', 'plotly.graph_objs.histogram.marker.colorbar.title', 'plotly.graph_objs.histogram.marker.colorbar.title._font', 'plotly.graph_objs.histogram.selected', 'plotly.graph_objs.histogram.selected._marker', 'plotly.graph_objs.histogram.selected._textfont', 'plotly.graph_objs.histogram.unselected', 'plotly.graph_objs.histogram.unselected._marker', 'plotly.graph_objs.histogram.unselected._textfont', 'plotly.graph_objs.histogram2d', 'plotly.graph_objs.histogram2d._colorbar', 'plotly.graph_objs.histogram2d._hoverlabel', 'plotly.graph_objs.histogram2d._marker', 'plotly.graph_objs.histogram2d._stream', 'plotly.graph_objs.histogram2d._xbins', 'plotly.graph_objs.histogram2d._ybins', 'plotly.graph_objs.histogram2d.colorbar', 'plotly.graph_objs.histogram2d.colorbar._tickfont', 'plotly.graph_objs.histogram2d.colorbar._tickformatstop', 'plotly.graph_objs.histogram2d.colorbar._title', 'plotly.graph_objs.histogram2d.colorbar.title', 'plotly.graph_objs.histogram2d.colorbar.title._font', 'plotly.graph_objs.histogram2d.hoverlabel', 'plotly.graph_objs.histogram2d.hoverlabel._font', 'plotly.graph_objs.histogram2dcontour', 'plotly.graph_objs.histogram2dcontour._colorbar', 'plotly.graph_objs.histogram2dcontour._contours', 'plotly.graph_objs.histogram2dcontour._hoverlabel', 'plotly.graph_objs.histogram2dcontour._line', 'plotly.graph_objs.histogram2dcontour._marker', 'plotly.graph_objs.histogram2dcontour._stream', 'plotly.graph_objs.histogram2dcontour._xbins', 'plotly.graph_objs.histogram2dcontour._ybins', 'plotly.graph_objs.histogram2dcontour.colorbar', 'plotly.graph_objs.histogram2dcontour.colorbar._tickfont', 'plotly.graph_objs.histogram2dcontour.colorbar._tickformatstop', 'plotly.graph_objs.histogram2dcontour.colorbar._title', 'plotly.graph_objs.histogram2dcontour.colorbar.title', 'plotly.graph_objs.histogram2dcontour.colorbar.title._font', 'plotly.graph_objs.histogram2dcontour.contours', 'plotly.graph_objs.histogram2dcontour.contours._labelfont', 'plotly.graph_objs.histogram2dcontour.hoverlabel', 'plotly.graph_objs.histogram2dcontour.hoverlabel._font', 'plotly.graph_objs.image', 'plotly.graph_objs.image._hoverlabel', 'plotly.graph_objs.image._stream', 'plotly.graph_objs.image.hoverlabel', 'plotly.graph_objs.image.hoverlabel._font', 'plotly.graph_objs.indicator', 'plotly.graph_objs.indicator._delta', 'plotly.graph_objs.indicator._domain', 'plotly.graph_objs.indicator._gauge', 'plotly.graph_objs.indicator._number', 'plotly.graph_objs.indicator._stream', 'plotly.graph_objs.indicator._title', 'plotly.graph_objs.indicator.delta', 'plotly.graph_objs.indicator.delta._decreasing', 'plotly.graph_objs.indicator.delta._font', 'plotly.graph_objs.indicator.delta._increasing', 'plotly.graph_objs.indicator.gauge', 'plotly.graph_objs.indicator.gauge._axis', 'plotly.graph_objs.indicator.gauge._bar', 'plotly.graph_objs.indicator.gauge._step', 'plotly.graph_objs.indicator.gauge._threshold', 'plotly.graph_objs.indicator.gauge.axis', 'plotly.graph_objs.indicator.gauge.axis._tickfont', 'plotly.graph_objs.indicator.gauge.axis._tickformatstop', 'plotly.graph_objs.indicator.gauge.bar', 'plotly.graph_objs.indicator.gauge.bar._line', 'plotly.graph_objs.indicator.gauge.step', 'plotly.graph_objs.indicator.gauge.step._line', 'plotly.graph_objs.indicator.gauge.threshold', 'plotly.graph_objs.indicator.gauge.threshold._line', 'plotly.graph_objs.indicator.number', 'plotly.graph_objs.indicator.number._font', 'plotly.graph_objs.indicator.title', 'plotly.graph_objs.indicator.title._font', 'plotly.graph_objs.isosurface', 'plotly.graph_objs.isosurface._caps', 'plotly.graph_objs.isosurface._colorbar', 'plotly.graph_objs.isosurface._contour', 'plotly.graph_objs.isosurface._hoverlabel', 'plotly.graph_objs.isosurface._lighting', 'plotly.graph_objs.isosurface._lightposition', 'plotly.graph_objs.isosurface._slices', 'plotly.graph_objs.isosurface._spaceframe', 'plotly.graph_objs.isosurface._stream', 'plotly.graph_objs.isosurface._surface', 'plotly.graph_objs.isosurface.caps', 'plotly.graph_objs.isosurface.caps._x', 'plotly.graph_objs.isosurface.caps._y', 'plotly.graph_objs.isosurface.caps._z', 'plotly.graph_objs.isosurface.colorbar', 'plotly.graph_objs.isosurface.colorbar._tickfont', 'plotly.graph_objs.isosurface.colorbar._tickformatstop', 'plotly.graph_objs.isosurface.colorbar._title', 'plotly.graph_objs.isosurface.colorbar.title', 'plotly.graph_objs.isosurface.colorbar.title._font', 'plotly.graph_objs.isosurface.hoverlabel', 'plotly.graph_objs.isosurface.hoverlabel._font', 'plotly.graph_objs.isosurface.slices', 'plotly.graph_objs.isosurface.slices._x', 'plotly.graph_objs.isosurface.slices._y', 'plotly.graph_objs.isosurface.slices._z', 'plotly.graph_objs.layout', 'plotly.graph_objs.layout._activeshape', 'plotly.graph_objs.layout._angularaxis', 'plotly.graph_objs.layout._annotation', 'plotly.graph_objs.layout._coloraxis', 'plotly.graph_objs.layout._colorscale', 'plotly.graph_objs.layout._font', 'plotly.graph_objs.layout._geo', 'plotly.graph_objs.layout._grid', 'plotly.graph_objs.layout._hoverlabel', 'plotly.graph_objs.layout._image', 'plotly.graph_objs.layout._legend', 'plotly.graph_objs.layout._mapbox', 'plotly.graph_objs.layout._margin', 'plotly.graph_objs.layout._modebar', 'plotly.graph_objs.layout._newshape', 'plotly.graph_objs.layout._polar', 'plotly.graph_objs.layout._radialaxis', 'plotly.graph_objs.layout._scene', 'plotly.graph_objs.layout._shape', 'plotly.graph_objs.layout._slider', 'plotly.graph_objs.layout._template', 'plotly.graph_objs.layout._ternary', 'plotly.graph_objs.layout._title', 'plotly.graph_objs.layout._transition', 'plotly.graph_objs.layout._uniformtext', 'plotly.graph_objs.layout._updatemenu', 'plotly.graph_objs.layout._xaxis', 'plotly.graph_objs.layout._yaxis', 'plotly.graph_objs.layout.annotation', 'plotly.graph_objs.layout.annotation._font', 'plotly.graph_objs.layout.annotation._hoverlabel', 'plotly.graph_objs.layout.annotation.hoverlabel', 'plotly.graph_objs.layout.annotation.hoverlabel._font', 'plotly.graph_objs.layout.coloraxis', 'plotly.graph_objs.layout.coloraxis._colorbar', 'plotly.graph_objs.layout.coloraxis.colorbar', 'plotly.graph_objs.layout.coloraxis.colorbar._tickfont', 'plotly.graph_objs.layout.coloraxis.colorbar._tickformatstop', 'plotly.graph_objs.layout.coloraxis.colorbar._title', 'plotly.graph_objs.layout.coloraxis.colorbar.title', 'plotly.graph_objs.layout.coloraxis.colorbar.title._font', 'plotly.graph_objs.layout.geo', 'plotly.graph_objs.layout.geo._center', 'plotly.graph_objs.layout.geo._domain', 'plotly.graph_objs.layout.geo._lataxis', 'plotly.graph_objs.layout.geo._lonaxis', 'plotly.graph_objs.layout.geo._projection', 'plotly.graph_objs.layout.geo.projection', 'plotly.graph_objs.layout.geo.projection._rotation', 'plotly.graph_objs.layout.grid', 'plotly.graph_objs.layout.grid._domain', 'plotly.graph_objs.layout.hoverlabel', 'plotly.graph_objs.layout.hoverlabel._font', 'plotly.graph_objs.layout.legend', 'plotly.graph_objs.layout.legend._font', 'plotly.graph_objs.layout.legend._title', 'plotly.graph_objs.layout.legend.title', 'plotly.graph_objs.layout.legend.title._font', 'plotly.graph_objs.layout.mapbox', 'plotly.graph_objs.layout.mapbox._center', 'plotly.graph_objs.layout.mapbox._domain', 'plotly.graph_objs.layout.mapbox._layer', 'plotly.graph_objs.layout.mapbox.layer', 'plotly.graph_objs.layout.mapbox.layer._circle', 'plotly.graph_objs.layout.mapbox.layer._fill', 'plotly.graph_objs.layout.mapbox.layer._line', 'plotly.graph_objs.layout.mapbox.layer._symbol', 'plotly.graph_objs.layout.mapbox.layer.symbol', 'plotly.graph_objs.layout.mapbox.layer.symbol._textfont', 'plotly.graph_objs.layout.newshape', 'plotly.graph_objs.layout.newshape._line', 'plotly.graph_objs.layout.polar', 'plotly.graph_objs.layout.polar._angularaxis', 'plotly.graph_objs.layout.polar._domain', 'plotly.graph_objs.layout.polar._radialaxis', 'plotly.graph_objs.layout.polar.angularaxis', 'plotly.graph_objs.layout.polar.angularaxis._tickfont', 'plotly.graph_objs.layout.polar.angularaxis._tickformatstop', 'plotly.graph_objs.layout.polar.radialaxis', 'plotly.graph_objs.layout.polar.radialaxis._tickfont', 'plotly.graph_objs.layout.polar.radialaxis._tickformatstop', 'plotly.graph_objs.layout.polar.radialaxis._title', 'plotly.graph_objs.layout.polar.radialaxis.title', 'plotly.graph_objs.layout.polar.radialaxis.title._font', 'plotly.graph_objs.layout.scene', 'plotly.graph_objs.layout.scene._annotation', 'plotly.graph_objs.layout.scene._aspectratio', 'plotly.graph_objs.layout.scene._camera', 'plotly.graph_objs.layout.scene._domain', 'plotly.graph_objs.layout.scene._xaxis', 'plotly.graph_objs.layout.scene._yaxis', 'plotly.graph_objs.layout.scene._zaxis', 'plotly.graph_objs.layout.scene.annotation', 'plotly.graph_objs.layout.scene.annotation._font', 'plotly.graph_objs.layout.scene.annotation._hoverlabel', 'plotly.graph_objs.layout.scene.annotation.hoverlabel', 'plotly.graph_objs.layout.scene.annotation.hoverlabel._font', 'plotly.graph_objs.layout.scene.camera', 'plotly.graph_objs.layout.scene.camera._center', 'plotly.graph_objs.layout.scene.camera._eye', 'plotly.graph_objs.layout.scene.camera._projection', 'plotly.graph_objs.layout.scene.camera._up', 'plotly.graph_objs.layout.scene.xaxis', 'plotly.graph_objs.layout.scene.xaxis._tickfont', 'plotly.graph_objs.layout.scene.xaxis._tickformatstop', 'plotly.graph_objs.layout.scene.xaxis._title', 'plotly.graph_objs.layout.scene.xaxis.title', 'plotly.graph_objs.layout.scene.xaxis.title._font', 'plotly.graph_objs.layout.scene.yaxis', 'plotly.graph_objs.layout.scene.yaxis._tickfont', 'plotly.graph_objs.layout.scene.yaxis._tickformatstop', 'plotly.graph_objs.layout.scene.yaxis._title', 'plotly.graph_objs.layout.scene.yaxis.title', 'plotly.graph_objs.layout.scene.yaxis.title._font', 'plotly.graph_objs.layout.scene.zaxis', 'plotly.graph_objs.layout.scene.zaxis._tickfont', 'plotly.graph_objs.layout.scene.zaxis._tickformatstop', 'plotly.graph_objs.layout.scene.zaxis._title', 'plotly.graph_objs.layout.scene.zaxis.title', 'plotly.graph_objs.layout.scene.zaxis.title._font', 'plotly.graph_objs.layout.shape', 'plotly.graph_objs.layout.shape._line', 'plotly.graph_objs.layout.slider', 'plotly.graph_objs.layout.slider._currentvalue', 'plotly.graph_objs.layout.slider._font', 'plotly.graph_objs.layout.slider._pad', 'plotly.graph_objs.layout.slider._step', 'plotly.graph_objs.layout.slider._transition', 'plotly.graph_objs.layout.slider.currentvalue', 'plotly.graph_objs.layout.slider.currentvalue._font', 'plotly.graph_objs.layout.template', 'plotly.graph_objs.layout.template._data', 'plotly.graph_objs.layout.template._layout', 'plotly.graph_objs.layout.template.data', 'plotly.graph_objs.layout.template.data._area', 'plotly.graph_objs.layout.template.data._bar', 'plotly.graph_objs.layout.template.data._barpolar', 'plotly.graph_objs.layout.template.data._box', 'plotly.graph_objs.layout.template.data._candlestick', 'plotly.graph_objs.layout.template.data._carpet', 'plotly.graph_objs.layout.template.data._choropleth', 'plotly.graph_objs.layout.template.data._choroplethmapbox', 'plotly.graph_objs.layout.template.data._cone', 'plotly.graph_objs.layout.template.data._contour', 'plotly.graph_objs.layout.template.data._contourcarpet', 'plotly.graph_objs.layout.template.data._densitymapbox', 'plotly.graph_objs.layout.template.data._funnel', 'plotly.graph_objs.layout.template.data._funnelarea', 'plotly.graph_objs.layout.template.data._heatmap', 'plotly.graph_objs.layout.template.data._heatmapgl', 'plotly.graph_objs.layout.template.data._histogram', 'plotly.graph_objs.layout.template.data._histogram2d', 'plotly.graph_objs.layout.template.data._histogram2dcontour', 'plotly.graph_objs.layout.template.data._image', 'plotly.graph_objs.layout.template.data._indicator', 'plotly.graph_objs.layout.template.data._isosurface', 'plotly.graph_objs.layout.template.data._mesh3d', 'plotly.graph_objs.layout.template.data._ohlc', 'plotly.graph_objs.layout.template.data._parcats', 'plotly.graph_objs.layout.template.data._parcoords', 'plotly.graph_objs.layout.template.data._pie', 'plotly.graph_objs.layout.template.data._pointcloud', 'plotly.graph_objs.layout.template.data._sankey', 'plotly.graph_objs.layout.template.data._scatter', 'plotly.graph_objs.layout.template.data._scatter3d', 'plotly.graph_objs.layout.template.data._scattercarpet', 'plotly.graph_objs.layout.template.data._scattergeo', 'plotly.graph_objs.layout.template.data._scattergl', 'plotly.graph_objs.layout.template.data._scattermapbox', 'plotly.graph_objs.layout.template.data._scatterpolar', 'plotly.graph_objs.layout.template.data._scatterpolargl', 'plotly.graph_objs.layout.template.data._scatterternary', 'plotly.graph_objs.layout.template.data._splom', 'plotly.graph_objs.layout.template.data._streamtube', 'plotly.graph_objs.layout.template.data._sunburst', 'plotly.graph_objs.layout.template.data._surface', 'plotly.graph_objs.layout.template.data._table', 'plotly.graph_objs.layout.template.data._treemap', 'plotly.graph_objs.layout.template.data._violin', 'plotly.graph_objs.layout.template.data._volume', 'plotly.graph_objs.layout.template.data._waterfall', 'plotly.graph_objs.layout.ternary', 'plotly.graph_objs.layout.ternary._aaxis', 'plotly.graph_objs.layout.ternary._baxis', 'plotly.graph_objs.layout.ternary._caxis', 'plotly.graph_objs.layout.ternary._domain', 'plotly.graph_objs.layout.ternary.aaxis', 'plotly.graph_objs.layout.ternary.aaxis._tickfont', 'plotly.graph_objs.layout.ternary.aaxis._tickformatstop', 'plotly.graph_objs.layout.ternary.aaxis._title', 'plotly.graph_objs.layout.ternary.aaxis.title', 'plotly.graph_objs.layout.ternary.aaxis.title._font', 'plotly.graph_objs.layout.ternary.baxis', 'plotly.graph_objs.layout.ternary.baxis._tickfont', 'plotly.graph_objs.layout.ternary.baxis._tickformatstop', 'plotly.graph_objs.layout.ternary.baxis._title', 'plotly.graph_objs.layout.ternary.baxis.title', 'plotly.graph_objs.layout.ternary.baxis.title._font', 'plotly.graph_objs.layout.ternary.caxis', 'plotly.graph_objs.layout.ternary.caxis._tickfont', 'plotly.graph_objs.layout.ternary.caxis._tickformatstop', 'plotly.graph_objs.layout.ternary.caxis._title', 'plotly.graph_objs.layout.ternary.caxis.title', 'plotly.graph_objs.layout.ternary.caxis.title._font', 'plotly.graph_objs.layout.title', 'plotly.graph_objs.layout.title._font', 'plotly.graph_objs.layout.title._pad', 'plotly.graph_objs.layout.updatemenu', 'plotly.graph_objs.layout.updatemenu._button', 'plotly.graph_objs.layout.updatemenu._font', 'plotly.graph_objs.layout.updatemenu._pad', 'plotly.graph_objs.layout.xaxis', 'plotly.graph_objs.layout.xaxis._rangebreak', 'plotly.graph_objs.layout.xaxis._rangeselector', 'plotly.graph_objs.layout.xaxis._rangeslider', 'plotly.graph_objs.layout.xaxis._tickfont', 'plotly.graph_objs.layout.xaxis._tickformatstop', 'plotly.graph_objs.layout.xaxis._title', 'plotly.graph_objs.layout.xaxis.rangeselector', 'plotly.graph_objs.layout.xaxis.rangeselector._button', 'plotly.graph_objs.layout.xaxis.rangeselector._font', 'plotly.graph_objs.layout.xaxis.rangeslider', 'plotly.graph_objs.layout.xaxis.rangeslider._yaxis', 'plotly.graph_objs.layout.xaxis.title', 'plotly.graph_objs.layout.xaxis.title._font', 'plotly.graph_objs.layout.yaxis', 'plotly.graph_objs.layout.yaxis._rangebreak', 'plotly.graph_objs.layout.yaxis._tickfont', 'plotly.graph_objs.layout.yaxis._tickformatstop', 'plotly.graph_objs.layout.yaxis._title', 'plotly.graph_objs.layout.yaxis.title', 'plotly.graph_objs.layout.yaxis.title._font', 'plotly.graph_objs.mesh3d', 'plotly.graph_objs.mesh3d._colorbar', 'plotly.graph_objs.mesh3d._contour', 'plotly.graph_objs.mesh3d._hoverlabel', 'plotly.graph_objs.mesh3d._lighting', 'plotly.graph_objs.mesh3d._lightposition', 'plotly.graph_objs.mesh3d._stream', 'plotly.graph_objs.mesh3d.colorbar', 'plotly.graph_objs.mesh3d.colorbar._tickfont', 'plotly.graph_objs.mesh3d.colorbar._tickformatstop', 'plotly.graph_objs.mesh3d.colorbar._title', 'plotly.graph_objs.mesh3d.colorbar.title', 'plotly.graph_objs.mesh3d.colorbar.title._font', 'plotly.graph_objs.mesh3d.hoverlabel', 'plotly.graph_objs.mesh3d.hoverlabel._font', 'plotly.graph_objs.ohlc', 'plotly.graph_objs.ohlc._decreasing', 'plotly.graph_objs.ohlc._hoverlabel', 'plotly.graph_objs.ohlc._increasing', 'plotly.graph_objs.ohlc._line', 'plotly.graph_objs.ohlc._stream', 'plotly.graph_objs.ohlc.decreasing', 'plotly.graph_objs.ohlc.decreasing._line', 'plotly.graph_objs.ohlc.hoverlabel', 'plotly.graph_objs.ohlc.hoverlabel._font', 'plotly.graph_objs.ohlc.increasing', 'plotly.graph_objs.ohlc.increasing._line', 'plotly.graph_objs.parcats', 'plotly.graph_objs.parcats._dimension', 'plotly.graph_objs.parcats._domain', 'plotly.graph_objs.parcats._labelfont', 'plotly.graph_objs.parcats._line', 'plotly.graph_objs.parcats._stream', 'plotly.graph_objs.parcats._tickfont', 'plotly.graph_objs.parcats.line', 'plotly.graph_objs.parcats.line._colorbar', 'plotly.graph_objs.parcats.line.colorbar', 'plotly.graph_objs.parcats.line.colorbar._tickfont', 'plotly.graph_objs.parcats.line.colorbar._tickformatstop', 'plotly.graph_objs.parcats.line.colorbar._title', 'plotly.graph_objs.parcats.line.colorbar.title', 'plotly.graph_objs.parcats.line.colorbar.title._font', 'plotly.graph_objs.parcoords', 'plotly.graph_objs.parcoords._dimension', 'plotly.graph_objs.parcoords._domain', 'plotly.graph_objs.parcoords._labelfont', 'plotly.graph_objs.parcoords._line', 'plotly.graph_objs.parcoords._rangefont', 'plotly.graph_objs.parcoords._stream', 'plotly.graph_objs.parcoords._tickfont', 'plotly.graph_objs.parcoords.line', 'plotly.graph_objs.parcoords.line._colorbar', 'plotly.graph_objs.parcoords.line.colorbar', 'plotly.graph_objs.parcoords.line.colorbar._tickfont', 'plotly.graph_objs.parcoords.line.colorbar._tickformatstop', 'plotly.graph_objs.parcoords.line.colorbar._title', 'plotly.graph_objs.parcoords.line.colorbar.title', 'plotly.graph_objs.parcoords.line.colorbar.title._font', 'plotly.graph_objs.pie', 'plotly.graph_objs.pie._domain', 'plotly.graph_objs.pie._hoverlabel', 'plotly.graph_objs.pie._insidetextfont', 'plotly.graph_objs.pie._marker', 'plotly.graph_objs.pie._outsidetextfont', 'plotly.graph_objs.pie._stream', 'plotly.graph_objs.pie._textfont', 'plotly.graph_objs.pie._title', 'plotly.graph_objs.pie.hoverlabel', 'plotly.graph_objs.pie.hoverlabel._font', 'plotly.graph_objs.pie.marker', 'plotly.graph_objs.pie.marker._line', 'plotly.graph_objs.pie.title', 'plotly.graph_objs.pie.title._font', 'plotly.graph_objs.pointcloud', 'plotly.graph_objs.pointcloud._hoverlabel', 'plotly.graph_objs.pointcloud._marker', 'plotly.graph_objs.pointcloud._stream', 'plotly.graph_objs.pointcloud.hoverlabel', 'plotly.graph_objs.pointcloud.hoverlabel._font', 'plotly.graph_objs.pointcloud.marker', 'plotly.graph_objs.pointcloud.marker._border', 'plotly.graph_objs.sankey', 'plotly.graph_objs.sankey._domain', 'plotly.graph_objs.sankey._hoverlabel', 'plotly.graph_objs.sankey._link', 'plotly.graph_objs.sankey._node', 'plotly.graph_objs.sankey._stream', 'plotly.graph_objs.sankey._textfont', 'plotly.graph_objs.sankey.hoverlabel', 'plotly.graph_objs.sankey.hoverlabel._font', 'plotly.graph_objs.sankey.link', 'plotly.graph_objs.sankey.link._colorscale', 'plotly.graph_objs.sankey.link._hoverlabel', 'plotly.graph_objs.sankey.link._line', 'plotly.graph_objs.sankey.link.hoverlabel', 'plotly.graph_objs.sankey.link.hoverlabel._font', 'plotly.graph_objs.sankey.node', 'plotly.graph_objs.sankey.node._hoverlabel', 'plotly.graph_objs.sankey.node._line', 'plotly.graph_objs.sankey.node.hoverlabel', 'plotly.graph_objs.sankey.node.hoverlabel._font', 'plotly.graph_objs.scatter', 'plotly.graph_objs.scatter._error_x', 'plotly.graph_objs.scatter._error_y', 'plotly.graph_objs.scatter._hoverlabel', 'plotly.graph_objs.scatter._line', 'plotly.graph_objs.scatter._marker', 'plotly.graph_objs.scatter._selected', 'plotly.graph_objs.scatter._stream', 'plotly.graph_objs.scatter._textfont', 'plotly.graph_objs.scatter._unselected', 'plotly.graph_objs.scatter.hoverlabel', 'plotly.graph_objs.scatter.hoverlabel._font', 'plotly.graph_objs.scatter.marker', 'plotly.graph_objs.scatter.marker._colorbar', 'plotly.graph_objs.scatter.marker._gradient', 'plotly.graph_objs.scatter.marker._line', 'plotly.graph_objs.scatter.marker.colorbar', 'plotly.graph_objs.scatter.marker.colorbar._tickfont', 'plotly.graph_objs.scatter.marker.colorbar._tickformatstop', 'plotly.graph_objs.scatter.marker.colorbar._title', 'plotly.graph_objs.scatter.marker.colorbar.title', 'plotly.graph_objs.scatter.marker.colorbar.title._font', 'plotly.graph_objs.scatter.selected', 'plotly.graph_objs.scatter.selected._marker', 'plotly.graph_objs.scatter.selected._textfont', 'plotly.graph_objs.scatter.unselected', 'plotly.graph_objs.scatter.unselected._marker', 'plotly.graph_objs.scatter.unselected._textfont', 'plotly.graph_objs.scatter3d', 'plotly.graph_objs.scatter3d._error_x', 'plotly.graph_objs.scatter3d._error_y', 'plotly.graph_objs.scatter3d._error_z', 'plotly.graph_objs.scatter3d._hoverlabel', 'plotly.graph_objs.scatter3d._line', 'plotly.graph_objs.scatter3d._marker', 'plotly.graph_objs.scatter3d._projection', 'plotly.graph_objs.scatter3d._stream', 'plotly.graph_objs.scatter3d._textfont', 'plotly.graph_objs.scatter3d.hoverlabel', 'plotly.graph_objs.scatter3d.hoverlabel._font', 'plotly.graph_objs.scatter3d.line', 'plotly.graph_objs.scatter3d.line._colorbar', 'plotly.graph_objs.scatter3d.line.colorbar', 'plotly.graph_objs.scatter3d.line.colorbar._tickfont', 'plotly.graph_objs.scatter3d.line.colorbar._tickformatstop', 'plotly.graph_objs.scatter3d.line.colorbar._title', 'plotly.graph_objs.scatter3d.line.colorbar.title', 'plotly.graph_objs.scatter3d.line.colorbar.title._font', 'plotly.graph_objs.scatter3d.marker', 'plotly.graph_objs.scatter3d.marker._colorbar', 'plotly.graph_objs.scatter3d.marker._line', 'plotly.graph_objs.scatter3d.marker.colorbar', 'plotly.graph_objs.scatter3d.marker.colorbar._tickfont', 'plotly.graph_objs.scatter3d.marker.colorbar._tickformatstop', 'plotly.graph_objs.scatter3d.marker.colorbar._title', 'plotly.graph_objs.scatter3d.marker.colorbar.title', 'plotly.graph_objs.scatter3d.marker.colorbar.title._font', 'plotly.graph_objs.scatter3d.projection', 'plotly.graph_objs.scatter3d.projection._x', 'plotly.graph_objs.scatter3d.projection._y', 'plotly.graph_objs.scatter3d.projection._z', 'plotly.graph_objs.scattercarpet', 'plotly.graph_objs.scattercarpet._hoverlabel', 'plotly.graph_objs.scattercarpet._line', 'plotly.graph_objs.scattercarpet._marker', 'plotly.graph_objs.scattercarpet._selected', 'plotly.graph_objs.scattercarpet._stream', 'plotly.graph_objs.scattercarpet._textfont', 'plotly.graph_objs.scattercarpet._unselected', 'plotly.graph_objs.scattercarpet.hoverlabel', 'plotly.graph_objs.scattercarpet.hoverlabel._font', 'plotly.graph_objs.scattercarpet.marker', 'plotly.graph_objs.scattercarpet.marker._colorbar', 'plotly.graph_objs.scattercarpet.marker._gradient', 'plotly.graph_objs.scattercarpet.marker._line', 'plotly.graph_objs.scattercarpet.marker.colorbar', 'plotly.graph_objs.scattercarpet.marker.colorbar._tickfont', 'plotly.graph_objs.scattercarpet.marker.colorbar._tickformatstop', 'plotly.graph_objs.scattercarpet.marker.colorbar._title', 'plotly.graph_objs.scattercarpet.marker.colorbar.title', 'plotly.graph_objs.scattercarpet.marker.colorbar.title._font', 'plotly.graph_objs.scattercarpet.selected', 'plotly.graph_objs.scattercarpet.selected._marker', 'plotly.graph_objs.scattercarpet.selected._textfont', 'plotly.graph_objs.scattercarpet.unselected', 'plotly.graph_objs.scattercarpet.unselected._marker', 'plotly.graph_objs.scattercarpet.unselected._textfont', 'plotly.graph_objs.scattergeo', 'plotly.graph_objs.scattergeo._hoverlabel', 'plotly.graph_objs.scattergeo._line', 'plotly.graph_objs.scattergeo._marker', 'plotly.graph_objs.scattergeo._selected', 'plotly.graph_objs.scattergeo._stream', 'plotly.graph_objs.scattergeo._textfont', 'plotly.graph_objs.scattergeo._unselected', 'plotly.graph_objs.scattergeo.hoverlabel', 'plotly.graph_objs.scattergeo.hoverlabel._font', 'plotly.graph_objs.scattergeo.marker', 'plotly.graph_objs.scattergeo.marker._colorbar', 'plotly.graph_objs.scattergeo.marker._gradient', 'plotly.graph_objs.scattergeo.marker._line', 'plotly.graph_objs.scattergeo.marker.colorbar', 'plotly.graph_objs.scattergeo.marker.colorbar._tickfont', 'plotly.graph_objs.scattergeo.marker.colorbar._tickformatstop', 'plotly.graph_objs.scattergeo.marker.colorbar._title', 'plotly.graph_objs.scattergeo.marker.colorbar.title', 'plotly.graph_objs.scattergeo.marker.colorbar.title._font', 'plotly.graph_objs.scattergeo.selected', 'plotly.graph_objs.scattergeo.selected._marker', 'plotly.graph_objs.scattergeo.selected._textfont', 'plotly.graph_objs.scattergeo.unselected', 'plotly.graph_objs.scattergeo.unselected._marker', 'plotly.graph_objs.scattergeo.unselected._textfont', 'plotly.graph_objs.scattergl', 'plotly.graph_objs.scattergl._error_x', 'plotly.graph_objs.scattergl._error_y', 'plotly.graph_objs.scattergl._hoverlabel', 'plotly.graph_objs.scattergl._line', 'plotly.graph_objs.scattergl._marker', 'plotly.graph_objs.scattergl._selected', 'plotly.graph_objs.scattergl._stream', 'plotly.graph_objs.scattergl._textfont', 'plotly.graph_objs.scattergl._unselected', 'plotly.graph_objs.scattergl.hoverlabel', 'plotly.graph_objs.scattergl.hoverlabel._font', 'plotly.graph_objs.scattergl.marker', 'plotly.graph_objs.scattergl.marker._colorbar', 'plotly.graph_objs.scattergl.marker._line', 'plotly.graph_objs.scattergl.marker.colorbar', 'plotly.graph_objs.scattergl.marker.colorbar._tickfont', 'plotly.graph_objs.scattergl.marker.colorbar._tickformatstop', 'plotly.graph_objs.scattergl.marker.colorbar._title', 'plotly.graph_objs.scattergl.marker.colorbar.title', 'plotly.graph_objs.scattergl.marker.colorbar.title._font', 'plotly.graph_objs.scattergl.selected', 'plotly.graph_objs.scattergl.selected._marker', 'plotly.graph_objs.scattergl.selected._textfont', 'plotly.graph_objs.scattergl.unselected', 'plotly.graph_objs.scattergl.unselected._marker', 'plotly.graph_objs.scattergl.unselected._textfont', 'plotly.graph_objs.scattermapbox', 'plotly.graph_objs.scattermapbox._hoverlabel', 'plotly.graph_objs.scattermapbox._line', 'plotly.graph_objs.scattermapbox._marker', 'plotly.graph_objs.scattermapbox._selected', 'plotly.graph_objs.scattermapbox._stream', 'plotly.graph_objs.scattermapbox._textfont', 'plotly.graph_objs.scattermapbox._unselected', 'plotly.graph_objs.scattermapbox.hoverlabel', 'plotly.graph_objs.scattermapbox.hoverlabel._font', 'plotly.graph_objs.scattermapbox.marker', 'plotly.graph_objs.scattermapbox.marker._colorbar', 'plotly.graph_objs.scattermapbox.marker.colorbar', 'plotly.graph_objs.scattermapbox.marker.colorbar._tickfont', 'plotly.graph_objs.scattermapbox.marker.colorbar._tickformatstop', 'plotly.graph_objs.scattermapbox.marker.colorbar._title', 'plotly.graph_objs.scattermapbox.marker.colorbar.title', 'plotly.graph_objs.scattermapbox.marker.colorbar.title._font', 'plotly.graph_objs.scattermapbox.selected', 'plotly.graph_objs.scattermapbox.selected._marker', 'plotly.graph_objs.scattermapbox.unselected', 'plotly.graph_objs.scattermapbox.unselected._marker', 'plotly.graph_objs.scatterpolar', 'plotly.graph_objs.scatterpolar._hoverlabel', 'plotly.graph_objs.scatterpolar._line', 'plotly.graph_objs.scatterpolar._marker', 'plotly.graph_objs.scatterpolar._selected', 'plotly.graph_objs.scatterpolar._stream', 'plotly.graph_objs.scatterpolar._textfont', 'plotly.graph_objs.scatterpolar._unselected', 'plotly.graph_objs.scatterpolar.hoverlabel', 'plotly.graph_objs.scatterpolar.hoverlabel._font', 'plotly.graph_objs.scatterpolar.marker', 'plotly.graph_objs.scatterpolar.marker._colorbar', 'plotly.graph_objs.scatterpolar.marker._gradient', 'plotly.graph_objs.scatterpolar.marker._line', 'plotly.graph_objs.scatterpolar.marker.colorbar', 'plotly.graph_objs.scatterpolar.marker.colorbar._tickfont', 'plotly.graph_objs.scatterpolar.marker.colorbar._tickformatstop', 'plotly.graph_objs.scatterpolar.marker.colorbar._title', 'plotly.graph_objs.scatterpolar.marker.colorbar.title', 'plotly.graph_objs.scatterpolar.marker.colorbar.title._font', 'plotly.graph_objs.scatterpolar.selected', 'plotly.graph_objs.scatterpolar.selected._marker', 'plotly.graph_objs.scatterpolar.selected._textfont', 'plotly.graph_objs.scatterpolar.unselected', 'plotly.graph_objs.scatterpolar.unselected._marker', 'plotly.graph_objs.scatterpolar.unselected._textfont', 'plotly.graph_objs.scatterpolargl', 'plotly.graph_objs.scatterpolargl._hoverlabel', 'plotly.graph_objs.scatterpolargl._line', 'plotly.graph_objs.scatterpolargl._marker', 'plotly.graph_objs.scatterpolargl._selected', 'plotly.graph_objs.scatterpolargl._stream', 'plotly.graph_objs.scatterpolargl._textfont', 'plotly.graph_objs.scatterpolargl._unselected', 'plotly.graph_objs.scatterpolargl.hoverlabel', 'plotly.graph_objs.scatterpolargl.hoverlabel._font', 'plotly.graph_objs.scatterpolargl.marker', 'plotly.graph_objs.scatterpolargl.marker._colorbar', 'plotly.graph_objs.scatterpolargl.marker._line', 'plotly.graph_objs.scatterpolargl.marker.colorbar', 'plotly.graph_objs.scatterpolargl.marker.colorbar._tickfont', 'plotly.graph_objs.scatterpolargl.marker.colorbar._tickformatstop', 'plotly.graph_objs.scatterpolargl.marker.colorbar._title', 'plotly.graph_objs.scatterpolargl.marker.colorbar.title', 'plotly.graph_objs.scatterpolargl.marker.colorbar.title._font', 'plotly.graph_objs.scatterpolargl.selected', 'plotly.graph_objs.scatterpolargl.selected._marker', 'plotly.graph_objs.scatterpolargl.selected._textfont', 'plotly.graph_objs.scatterpolargl.unselected', 'plotly.graph_objs.scatterpolargl.unselected._marker', 'plotly.graph_objs.scatterpolargl.unselected._textfont', 'plotly.graph_objs.scatterternary', 'plotly.graph_objs.scatterternary._hoverlabel', 'plotly.graph_objs.scatterternary._line', 'plotly.graph_objs.scatterternary._marker', 'plotly.graph_objs.scatterternary._selected', 'plotly.graph_objs.scatterternary._stream', 'plotly.graph_objs.scatterternary._textfont', 'plotly.graph_objs.scatterternary._unselected', 'plotly.graph_objs.scatterternary.hoverlabel', 'plotly.graph_objs.scatterternary.hoverlabel._font', 'plotly.graph_objs.scatterternary.marker', 'plotly.graph_objs.scatterternary.marker._colorbar', 'plotly.graph_objs.scatterternary.marker._gradient', 'plotly.graph_objs.scatterternary.marker._line', 'plotly.graph_objs.scatterternary.marker.colorbar', 'plotly.graph_objs.scatterternary.marker.colorbar._tickfont', 'plotly.graph_objs.scatterternary.marker.colorbar._tickformatstop', 'plotly.graph_objs.scatterternary.marker.colorbar._title', 'plotly.graph_objs.scatterternary.marker.colorbar.title', 'plotly.graph_objs.scatterternary.marker.colorbar.title._font', 'plotly.graph_objs.scatterternary.selected', 'plotly.graph_objs.scatterternary.selected._marker', 'plotly.graph_objs.scatterternary.selected._textfont', 'plotly.graph_objs.scatterternary.unselected', 'plotly.graph_objs.scatterternary.unselected._marker', 'plotly.graph_objs.scatterternary.unselected._textfont', 'plotly.graph_objs.splom', 'plotly.graph_objs.splom._diagonal', 'plotly.graph_objs.splom._dimension', 'plotly.graph_objs.splom._hoverlabel', 'plotly.graph_objs.splom._marker', 'plotly.graph_objs.splom._selected', 'plotly.graph_objs.splom._stream', 'plotly.graph_objs.splom._unselected', 'plotly.graph_objs.splom.dimension', 'plotly.graph_objs.splom.dimension._axis', 'plotly.graph_objs.splom.hoverlabel', 'plotly.graph_objs.splom.hoverlabel._font', 'plotly.graph_objs.splom.marker', 'plotly.graph_objs.splom.marker._colorbar', 'plotly.graph_objs.splom.marker._line', 'plotly.graph_objs.splom.marker.colorbar', 'plotly.graph_objs.splom.marker.colorbar._tickfont', 'plotly.graph_objs.splom.marker.colorbar._tickformatstop', 'plotly.graph_objs.splom.marker.colorbar._title', 'plotly.graph_objs.splom.marker.colorbar.title', 'plotly.graph_objs.splom.marker.colorbar.title._font', 'plotly.graph_objs.splom.selected', 'plotly.graph_objs.splom.selected._marker', 'plotly.graph_objs.splom.unselected', 'plotly.graph_objs.splom.unselected._marker', 'plotly.graph_objs.streamtube', 'plotly.graph_objs.streamtube._colorbar', 'plotly.graph_objs.streamtube._hoverlabel', 'plotly.graph_objs.streamtube._lighting', 'plotly.graph_objs.streamtube._lightposition', 'plotly.graph_objs.streamtube._starts', 'plotly.graph_objs.streamtube._stream', 'plotly.graph_objs.streamtube.colorbar', 'plotly.graph_objs.streamtube.colorbar._tickfont', 'plotly.graph_objs.streamtube.colorbar._tickformatstop', 'plotly.graph_objs.streamtube.colorbar._title', 'plotly.graph_objs.streamtube.colorbar.title', 'plotly.graph_objs.streamtube.colorbar.title._font', 'plotly.graph_objs.streamtube.hoverlabel', 'plotly.graph_objs.streamtube.hoverlabel._font', 'plotly.graph_objs.sunburst', 'plotly.graph_objs.sunburst._domain', 'plotly.graph_objs.sunburst._hoverlabel', 'plotly.graph_objs.sunburst._insidetextfont', 'plotly.graph_objs.sunburst._leaf', 'plotly.graph_objs.sunburst._marker', 'plotly.graph_objs.sunburst._outsidetextfont', 'plotly.graph_objs.sunburst._root', 'plotly.graph_objs.sunburst._stream', 'plotly.graph_objs.sunburst._textfont', 'plotly.graph_objs.sunburst.hoverlabel', 'plotly.graph_objs.sunburst.hoverlabel._font', 'plotly.graph_objs.sunburst.marker', 'plotly.graph_objs.sunburst.marker._colorbar', 'plotly.graph_objs.sunburst.marker._line', 'plotly.graph_objs.sunburst.marker.colorbar', 'plotly.graph_objs.sunburst.marker.colorbar._tickfont', 'plotly.graph_objs.sunburst.marker.colorbar._tickformatstop', 'plotly.graph_objs.sunburst.marker.colorbar._title', 'plotly.graph_objs.sunburst.marker.colorbar.title', 'plotly.graph_objs.sunburst.marker.colorbar.title._font', 'plotly.graph_objs.surface', 'plotly.graph_objs.surface._colorbar', 'plotly.graph_objs.surface._contours', 'plotly.graph_objs.surface._hoverlabel', 'plotly.graph_objs.surface._lighting', 'plotly.graph_objs.surface._lightposition', 'plotly.graph_objs.surface._stream', 'plotly.graph_objs.surface.colorbar', 'plotly.graph_objs.surface.colorbar._tickfont', 'plotly.graph_objs.surface.colorbar._tickformatstop', 'plotly.graph_objs.surface.colorbar._title', 'plotly.graph_objs.surface.colorbar.title', 'plotly.graph_objs.surface.colorbar.title._font', 'plotly.graph_objs.surface.contours', 'plotly.graph_objs.surface.contours._x', 'plotly.graph_objs.surface.contours._y', 'plotly.graph_objs.surface.contours._z', 'plotly.graph_objs.surface.contours.x', 'plotly.graph_objs.surface.contours.x._project', 'plotly.graph_objs.surface.contours.y', 'plotly.graph_objs.surface.contours.y._project', 'plotly.graph_objs.surface.contours.z', 'plotly.graph_objs.surface.contours.z._project', 'plotly.graph_objs.surface.hoverlabel', 'plotly.graph_objs.surface.hoverlabel._font', 'plotly.graph_objs.table', 'plotly.graph_objs.table._cells', 'plotly.graph_objs.table._domain', 'plotly.graph_objs.table._header', 'plotly.graph_objs.table._hoverlabel', 'plotly.graph_objs.table._stream', 'plotly.graph_objs.table.cells', 'plotly.graph_objs.table.cells._fill', 'plotly.graph_objs.table.cells._font', 'plotly.graph_objs.table.cells._line', 'plotly.graph_objs.table.header', 'plotly.graph_objs.table.header._fill', 'plotly.graph_objs.table.header._font', 'plotly.graph_objs.table.header._line', 'plotly.graph_objs.table.hoverlabel', 'plotly.graph_objs.table.hoverlabel._font', 'plotly.graph_objs.treemap', 'plotly.graph_objs.treemap._domain', 'plotly.graph_objs.treemap._hoverlabel', 'plotly.graph_objs.treemap._insidetextfont', 'plotly.graph_objs.treemap._marker', 'plotly.graph_objs.treemap._outsidetextfont', 'plotly.graph_objs.treemap._pathbar', 'plotly.graph_objs.treemap._root', 'plotly.graph_objs.treemap._stream', 'plotly.graph_objs.treemap._textfont', 'plotly.graph_objs.treemap._tiling', 'plotly.graph_objs.treemap.hoverlabel', 'plotly.graph_objs.treemap.hoverlabel._font', 'plotly.graph_objs.treemap.marker', 'plotly.graph_objs.treemap.marker._colorbar', 'plotly.graph_objs.treemap.marker._line', 'plotly.graph_objs.treemap.marker._pad', 'plotly.graph_objs.treemap.marker.colorbar', 'plotly.graph_objs.treemap.marker.colorbar._tickfont', 'plotly.graph_objs.treemap.marker.colorbar._tickformatstop', 'plotly.graph_objs.treemap.marker.colorbar._title', 'plotly.graph_objs.treemap.marker.colorbar.title', 'plotly.graph_objs.treemap.marker.colorbar.title._font', 'plotly.graph_objs.treemap.pathbar', 'plotly.graph_objs.treemap.pathbar._textfont', 'plotly.graph_objs.violin', 'plotly.graph_objs.violin._box', 'plotly.graph_objs.violin._hoverlabel', 'plotly.graph_objs.violin._line', 'plotly.graph_objs.violin._marker', 'plotly.graph_objs.violin._meanline', 'plotly.graph_objs.violin._selected', 'plotly.graph_objs.violin._stream', 'plotly.graph_objs.violin._unselected', 'plotly.graph_objs.violin.box', 'plotly.graph_objs.violin.box._line', 'plotly.graph_objs.violin.hoverlabel', 'plotly.graph_objs.violin.hoverlabel._font', 'plotly.graph_objs.violin.marker', 'plotly.graph_objs.violin.marker._line', 'plotly.graph_objs.violin.selected', 'plotly.graph_objs.violin.selected._marker', 'plotly.graph_objs.violin.unselected', 'plotly.graph_objs.violin.unselected._marker', 'plotly.graph_objs.volume', 'plotly.graph_objs.volume._caps', 'plotly.graph_objs.volume._colorbar', 'plotly.graph_objs.volume._contour', 'plotly.graph_objs.volume._hoverlabel', 'plotly.graph_objs.volume._lighting', 'plotly.graph_objs.volume._lightposition', 'plotly.graph_objs.volume._slices', 'plotly.graph_objs.volume._spaceframe', 'plotly.graph_objs.volume._stream', 'plotly.graph_objs.volume._surface', 'plotly.graph_objs.volume.caps', 'plotly.graph_objs.volume.caps._x', 'plotly.graph_objs.volume.caps._y', 'plotly.graph_objs.volume.caps._z', 'plotly.graph_objs.volume.colorbar', 'plotly.graph_objs.volume.colorbar._tickfont', 'plotly.graph_objs.volume.colorbar._tickformatstop', 'plotly.graph_objs.volume.colorbar._title', 'plotly.graph_objs.volume.colorbar.title', 'plotly.graph_objs.volume.colorbar.title._font', 'plotly.graph_objs.volume.hoverlabel', 'plotly.graph_objs.volume.hoverlabel._font', 'plotly.graph_objs.volume.slices', 'plotly.graph_objs.volume.slices._x', 'plotly.graph_objs.volume.slices._y', 'plotly.graph_objs.volume.slices._z', 'plotly.graph_objs.waterfall', 'plotly.graph_objs.waterfall._connector', 'plotly.graph_objs.waterfall._decreasing', 'plotly.graph_objs.waterfall._hoverlabel', 'plotly.graph_objs.waterfall._increasing', 'plotly.graph_objs.waterfall._insidetextfont', 'plotly.graph_objs.waterfall._outsidetextfont', 'plotly.graph_objs.waterfall._stream', 'plotly.graph_objs.waterfall._textfont', 'plotly.graph_objs.waterfall._totals', 'plotly.graph_objs.waterfall.connector', 'plotly.graph_objs.waterfall.connector._line', 'plotly.graph_objs.waterfall.decreasing', 'plotly.graph_objs.waterfall.decreasing._marker', 'plotly.graph_objs.waterfall.decreasing.marker', 'plotly.graph_objs.waterfall.decreasing.marker._line', 'plotly.graph_objs.waterfall.hoverlabel', 'plotly.graph_objs.waterfall.hoverlabel._font', 'plotly.graph_objs.waterfall.increasing', 'plotly.graph_objs.waterfall.increasing._marker', 'plotly.graph_objs.waterfall.increasing.marker', 'plotly.graph_objs.waterfall.increasing.marker._line', 'plotly.graph_objs.waterfall.totals', 'plotly.graph_objs.waterfall.totals._marker', 'plotly.graph_objs.waterfall.totals.marker', 'plotly.graph_objs.waterfall.totals.marker._line', 'plotly.graph_objs._figurewidget', 'plotly.basewidget', 'plotly.callbacks', 'plotly.utils', '_plotly_utils.data_utils', '_plotly_utils.png', 'plotly.serializers', 'plotly.version', 'plotly._version', 'plotly._widget_version', 'plotly.tools', 'plotly.exceptions', 'plotly.files', '_plotly_utils.files', 'plotly.offline', 'plotly.offline.offline', 'plotly.offline._plotlyjs_version', 'plotly.colors', '_plotly_utils.colors', '_plotly_utils.colors.qualitative', '_plotly_utils.colors._swatches', '_plotly_utils.colors.colorbrewer', '_plotly_utils.colors.carto', '_plotly_utils.colors.sequential', '_plotly_utils.colors.plotlyjs', '_plotly_utils.colors.cmocean', '_plotly_utils.colors.diverging', '_plotly_utils.colors.cyclical', 'plotly.io', 'plotly.io._kaleido', 'plotly.io._utils', 'plotly.io.orca', 'plotly.io._orca', 'retrying', 'psutil', 'psutil._common', 'psutil._compat', 'psutil._psosx', 'psutil._psposix', 'psutil._psutil_osx', 'psutil._psutil_posix', 'plotly.io.kaleido', 'plotly.io._json', 'plotly.io._templates', 'plotly.io._html', 'webbrowser', 'plotly.io._renderers', 'plotly.io._base_renderers', 'http.server', 'nbformat', 'nbformat._version', 'nbformat.v1', 'nbformat.v1.nbbase', 'ipython_genutils.ipstruct', 'nbformat.v1.nbjson', 'nbformat.v1.rwbase', 'nbformat.v1.convert', 'nbformat.v2', 'nbformat.v2.nbbase', 'nbformat.v2.nbjson', 'nbformat.v2.rwbase', 'nbformat._compat', 'nbformat.v2.nbxml', 'nbformat.v2.nbpy', 'nbformat.v2.convert', 'nbformat.v3', 'nbformat.v3.nbbase', 'nbformat.v3.nbjson', 'nbformat.v3.rwbase', 'nbformat.v3.nbpy', 'nbformat.v3.convert', 'nbformat.v4', 'nbformat.v4.nbbase', 'nbformat.notebooknode', 'nbformat.corpus', 'nbformat.corpus.words', 'nbformat.v4.nbjson', 'nbformat.v4.rwbase', 'nbformat.v4.convert', 'nbformat.sentinel', 'nbformat.validator', 'nbformat.json_compat', 'jsonschema', 'jsonschema.exceptions', 'attr', 'attr.converters', 'attr._make', 'attr._config', 'attr._compat', 'attr.exceptions', 'attr.filters', 'attr.validators', 'attr._funcs', 'jsonschema._utils', 'jsonschema.compat', 'jsonschema._format', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'jsonschema._types', 'pyrsistent', 'pyrsistent._pmap', 'pyrsistent._pvector', 'pyrsistent._transformations', 'pvectorc', 'pyrsistent._pset', 'pyrsistent._pbag', 'pyrsistent._plist', 'pyrsistent._pdeque', 'pyrsistent._checked_types', 'pyrsistent._field_common', 'pyrsistent._precord', 'pyrsistent._pclass', 'pyrsistent._immutable', 'pyrsistent._helpers', 'pyrsistent._toolz', 'jsonschema.validators', 'jsonschema._legacy_validators', 'jsonschema._validators', 'importlib_metadata', 'zipp', 'importlib_metadata._compat', 'typing_extensions', 'configparser', 'nbformat.reader', 'nbformat.converter', 'plotly.io.base_renderers', 'plotly.data', 'cufflinks.exceptions', 'cufflinks.helper', 'cufflinks.tools', 'plotly.figure_factory', 'plotly.figure_factory._2d_density', 'plotly.graph_objs.graph_objs', 'plotly.figure_factory._annotated_heatmap', 'plotly.figure_factory.utils', 'plotly.validators', 'plotly.validators._waterfall', 'plotly.validators._volume', 'plotly.validators._violin', 'plotly.validators._treemap', 'plotly.validators._table', 'plotly.validators._surface', 'plotly.validators._sunburst', 'plotly.validators._streamtube', 'plotly.validators._splom', 'plotly.validators._scatterternary', 'plotly.validators._scatterpolargl', 'plotly.validators._scatterpolar', 'plotly.validators._scattermapbox', 'plotly.validators._scattergl', 'plotly.validators._scattergeo', 'plotly.validators._scattercarpet', 'plotly.validators._scatter3d', 'plotly.validators._scatter', 'plotly.validators._sankey', 'plotly.validators._pointcloud', 'plotly.validators._pie', 'plotly.validators._parcoords', 'plotly.validators._parcats', 'plotly.validators._ohlc', 'plotly.validators._mesh3d', 'plotly.validators._isosurface', 'plotly.validators._indicator', 'plotly.validators._image', 'plotly.validators._histogram2dcontour', 'plotly.validators._histogram2d', 'plotly.validators._histogram', 'plotly.validators._heatmapgl', 'plotly.validators._heatmap', 'plotly.validators._funnelarea', 'plotly.validators._funnel', 'plotly.validators._densitymapbox', 'plotly.validators._contourcarpet', 'plotly.validators._contour', 'plotly.validators._cone', 'plotly.validators._choroplethmapbox', 'plotly.validators._choropleth', 'plotly.validators._carpet', 'plotly.validators._candlestick', 'plotly.validators._box', 'plotly.validators._barpolar', 'plotly.validators._bar', 'plotly.validators._area', 'plotly.validators._layout', 'plotly.validators._frames', 'plotly.validators._data', 'plotly.validators.heatmap', 'plotly.validators.heatmap._zsrc', 'plotly.validators.heatmap._zsmooth', 'plotly.validators.heatmap._zmin', 'plotly.validators.heatmap._zmid', 'plotly.validators.heatmap._zmax', 'plotly.validators.heatmap._zhoverformat', 'plotly.validators.heatmap._zauto', 'plotly.validators.heatmap._z', 'plotly.validators.heatmap._ytype', 'plotly.validators.heatmap._ysrc', 'plotly.validators.heatmap._yperiodalignment', 'plotly.validators.heatmap._yperiod0', 'plotly.validators.heatmap._yperiod', 'plotly.validators.heatmap._ygap', 'plotly.validators.heatmap._ycalendar', 'plotly.validators.heatmap._yaxis', 'plotly.validators.heatmap._y0', 'plotly.validators.heatmap._y', 'plotly.validators.heatmap._xtype', 'plotly.validators.heatmap._xsrc', 'plotly.validators.heatmap._xperiodalignment', 'plotly.validators.heatmap._xperiod0', 'plotly.validators.heatmap._xperiod', 'plotly.validators.heatmap._xgap', 'plotly.validators.heatmap._xcalendar', 'plotly.validators.heatmap._xaxis', 'plotly.validators.heatmap._x0', 'plotly.validators.heatmap._x', 'plotly.validators.heatmap._visible', 'plotly.validators.heatmap._uirevision', 'plotly.validators.heatmap._uid', 'plotly.validators.heatmap._transpose', 'plotly.validators.heatmap._textsrc', 'plotly.validators.heatmap._text', 'plotly.validators.heatmap._stream', 'plotly.validators.heatmap._showscale', 'plotly.validators.heatmap._showlegend', 'plotly.validators.heatmap._reversescale', 'plotly.validators.heatmap._opacity', 'plotly.validators.heatmap._name', 'plotly.validators.heatmap._metasrc', 'plotly.validators.heatmap._meta', 'plotly.validators.heatmap._legendgroup', 'plotly.validators.heatmap._idssrc', 'plotly.validators.heatmap._ids', 'plotly.validators.heatmap._hovertextsrc', 'plotly.validators.heatmap._hovertext', 'plotly.validators.heatmap._hovertemplatesrc', 'plotly.validators.heatmap._hovertemplate', 'plotly.validators.heatmap._hoverongaps', 'plotly.validators.heatmap._hoverlabel', 'plotly.validators.heatmap._hoverinfosrc', 'plotly.validators.heatmap._hoverinfo', 'plotly.validators.heatmap._dy', 'plotly.validators.heatmap._dx', 'plotly.validators.heatmap._customdatasrc', 'plotly.validators.heatmap._customdata', 'plotly.validators.heatmap._connectgaps', 'plotly.validators.heatmap._colorscale', 'plotly.validators.heatmap._colorbar', 'plotly.validators.heatmap._coloraxis', 'plotly.validators.heatmap._autocolorscale', 'plotly.figure_factory._bullet', 'plotly.figure_factory._candlestick', 'plotly.figure_factory._ohlc', 'plotly.figure_factory._dendrogram', 'scipy.cluster', 'scipy.cluster.vq', 'scipy.cluster._vq', 'scipy.cluster.hierarchy', 'scipy.cluster._hierarchy', 'scipy.cluster._optimal_leaf_ordering', 'plotly.figure_factory._distplot', 'plotly.figure_factory._facet_grid', 'plotly.figure_factory._gantt', 'plotly.graph_objects', 'plotly.figure_factory._quiver', 'plotly.figure_factory._scatterplot', 'plotly.figure_factory._streamline', 'plotly.figure_factory._table', 'plotly.figure_factory._trisurf', 'plotly.figure_factory._violin', 'plotly.figure_factory._county_choropleth', 'plotly.figure_factory._hexbin_mapbox', 'plotly.express', 'plotly.express._imshow', 'plotly.express._core', 'plotly.express._special_inputs', 'plotly.express.imshow_utils', 'plotly.express._chart_types', 'plotly.express._doc', 'plotly.express.data', 'plotly.express.colors', 'cufflinks.ta', 'cufflinks.colors', 'colorlover', 'cufflinks.themes', 'cufflinks.pandastools', 'cufflinks.plotlytools', 'cufflinks.extract', 'cufflinks.quant_figure', 'cufflinks.version', 'visualizations', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-02-04 12:35:01,294 [56520] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=/Users/hcab/.matplotlib
2021-02-04 12:35:01,299 [56520] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from /Users/hcab/.matplotlib/fontlist-v330.json
2021-02-04 12:35:01,619 [56520] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-04 12:35:01,623 [56520] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-04 12:37:12,696 [56520] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2021-02-04 12:37:12,698 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-02-04 12:37:12,698 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-02-04 12:37:12,698 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,698 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,698 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:37:12,698 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-02-04 12:37:12,698 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,698 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-02-04 12:37:12,699 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 12:37:12,699 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,699 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,699 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-02-04 12:37:12,699 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:37:12,699 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,699 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,699 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,699 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,699 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,699 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,699 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,699 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,700 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,700 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,700 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,700 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,700 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-02-04 12:37:12,700 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:37:12,700 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,700 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,700 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,700 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,700 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,700 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,700 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-02-04 12:37:12,701 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-02-04 12:37:12,701 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,701 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,701 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,701 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,701 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,701 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,701 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,701 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,701 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
2021-02-04 12:37:12,701 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,701 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,702 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,702 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,702 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,702 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,702 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,702 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,702 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,702 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-02-04 12:37:12,702 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-02-04 12:37:12,702 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,702 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
2021-02-04 12:37:12,702 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,702 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-02-04 12:37:12,703 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,703 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,703 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,703 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,703 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
2021-02-04 12:37:12,703 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,703 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,703 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,703 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,703 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,703 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,703 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 12:37:12,703 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,704 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,704 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,704 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,704 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,704 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,704 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,704 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,704 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal 800 condensed>) = 10.629999999999999
2021-02-04 12:37:12,704 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-02-04 12:37:12,704 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,704 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,704 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,705 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:37:12,705 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,705 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
2021-02-04 12:37:12,705 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,705 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,705 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,705 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,705 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,705 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,705 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,705 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,705 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2021-02-04 12:37:12,705 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,706 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,706 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,706 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,706 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,706 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,706 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,706 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,706 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,706 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
2021-02-04 12:37:12,706 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,706 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
2021-02-04 12:37:12,706 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,706 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
2021-02-04 12:37:12,707 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,707 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,707 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,707 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,707 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,707 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal 400 condensed>) = 10.25
2021-02-04 12:37:12,707 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,707 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,707 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,707 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,707 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,707 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,707 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,708 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,708 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,708 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,708 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal 500 condensed>) = 10.344999999999999
2021-02-04 12:37:12,708 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,708 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,708 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,708 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,708 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,708 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,709 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYork.ttf) normal normal 425 normal>) = 10.07375
2021-02-04 12:37:12,709 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,709 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,709 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,709 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal 700 condensed>) = 10.535
2021-02-04 12:37:12,709 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
2021-02-04 12:37:12,709 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,709 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:37:12,709 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,709 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
2021-02-04 12:37:12,709 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,709 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,709 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,710 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,710 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,710 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,710 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
2021-02-04 12:37:12,710 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal 700 condensed>) = 10.535
2021-02-04 12:37:12,710 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,710 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Display' (SFCompactDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,710 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2021-02-04 12:37:12,710 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,710 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 300 normal>) = 11.145
2021-02-04 12:37:12,710 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,710 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,710 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,711 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,711 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,711 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,711 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,711 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,711 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,711 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,711 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,711 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,711 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,711 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,711 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,711 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,712 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,712 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
2021-02-04 12:37:12,712 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,712 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,712 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,712 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
2021-02-04 12:37:12,712 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,712 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,712 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,712 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,712 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,712 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,712 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,712 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,713 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
2021-02-04 12:37:12,713 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2021-02-04 12:37:12,713 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,713 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,713 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,713 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,713 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,713 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,714 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,714 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,714 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,714 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,714 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,715 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:37:12,715 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,715 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,715 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,715 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactTextItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:37:12,715 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,715 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 12:37:12,715 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,716 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactText.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,716 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
2021-02-04 12:37:12,716 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,716 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,716 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,716 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
2021-02-04 12:37:12,717 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,717 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,717 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,717 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,717 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,717 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,717 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,718 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,718 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,718 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,718 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,718 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,718 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,719 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,719 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:37:12,719 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2021-02-04 12:37:12,719 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
2021-02-04 12:37:12,719 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,719 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal 600 condensed>) = 10.44
2021-02-04 12:37:12,719 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
2021-02-04 12:37:12,720 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,720 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
2021-02-04 12:37:12,720 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
2021-02-04 12:37:12,720 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,720 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,720 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,720 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,721 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
2021-02-04 12:37:12,721 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,721 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,721 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,721 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2021-02-04 12:37:12,721 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,721 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,721 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,721 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:37:12,722 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
2021-02-04 12:37:12,722 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,722 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal 500 condensed>) = 10.344999999999999
2021-02-04 12:37:12,722 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
2021-02-04 12:37:12,722 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
2021-02-04 12:37:12,722 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,722 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,722 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,722 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,722 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,722 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 12:37:12,722 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,722 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:37:12,723 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,723 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
2021-02-04 12:37:12,723 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
2021-02-04 12:37:12,723 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,723 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,723 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,723 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,723 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,723 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
2021-02-04 12:37:12,723 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,723 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,723 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
2021-02-04 12:37:12,723 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,724 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,724 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,724 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,724 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,724 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,724 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,724 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,724 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:37:12,724 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 425 normal>) = 11.07375
2021-02-04 12:37:12,724 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 12:37:12,724 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,724 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,724 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,725 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-02-04 12:37:12,725 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,725 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,725 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,725 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 300 normal>) = 10.145
2021-02-04 12:37:12,725 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,725 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,725 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,725 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal 300 condensed>) = 10.344999999999999
2021-02-04 12:37:12,725 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
2021-02-04 12:37:12,725 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,725 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,726 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal 400 condensed>) = 10.25
2021-02-04 12:37:12,726 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
2021-02-04 12:37:12,726 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,726 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-02-04 12:37:12,726 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,726 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,726 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,726 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
2021-02-04 12:37:12,726 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,726 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,726 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,726 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,726 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal 900 condensed>) = 10.725
2021-02-04 12:37:12,727 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,727 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,727 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,727 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,727 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,727 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,727 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,727 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,727 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-02-04 12:37:12,727 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,727 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,728 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,728 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
2021-02-04 12:37:12,728 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,728 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,728 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2021-02-04 12:37:12,728 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
2021-02-04 12:37:12,728 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,728 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
2021-02-04 12:37:12,728 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,728 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,728 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,728 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,728 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,729 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,729 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,729 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,729 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal 600 condensed>) = 10.44
2021-02-04 12:37:12,729 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,729 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,729 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,729 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
2021-02-04 12:37:12,729 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,729 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,729 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,729 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,729 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,730 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,730 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
2021-02-04 12:37:12,730 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,730 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,730 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
2021-02-04 12:37:12,730 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal 600 condensed>) = 10.44
2021-02-04 12:37:12,730 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-02-04 12:37:12,730 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
2021-02-04 12:37:12,730 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
2021-02-04 12:37:12,730 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:37:12,730 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,731 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:37:12,731 [56520] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
2021-02-04 12:37:12,731 [56520] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to DejaVu Sans ('/Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2021-02-04 12:38:39,408 [56652] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-04 12:38:39,408 [56652] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-04 12:38:39,408 [56652] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-04 12:38:39,410 [56652] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-04 12:38:39,411 [56652] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-04 12:38:39,411 [56652] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-04 12:39:57,125 [56719] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-04 12:39:57,126 [56719] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-04 12:39:57,126 [56719] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-04 12:39:57,129 [56719] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-04 12:39:57,130 [56719] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-04 12:39:57,130 [56719] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-04 12:39:57,882 [56719] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-04 12:39:57,882 [56719] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-04 12:39:57,882 [56719] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-04 12:39:57,885 [56719] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-04 12:39:57,886 [56719] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-04 12:39:57,886 [56719] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-04 12:44:44,842 [56963] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-04 12:44:44,842 [56963] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-04 12:44:44,842 [56963] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-04 12:44:44,846 [56963] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-04 12:44:44,846 [56963] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-04 12:44:44,847 [56963] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-04 12:44:45,363 [56963] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-04 12:44:45,363 [56963] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-04 12:44:45,363 [56963] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-04 12:44:45,367 [56963] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-04 12:44:45,368 [56963] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-04 12:44:45,368 [56963] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-02-04 12:44:52,750 [56963] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-04 12:44:52,751 [56963] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data
2021-02-04 12:44:52,758 [56963] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=/Users/hcab/.matplotlib
2021-02-04 12:44:52,761 [56963] DEBUG    matplotlib:1480: [JupyterRequire] matplotlib version 3.3.3
2021-02-04 12:44:52,761 [56963] DEBUG    matplotlib:1481: [JupyterRequire] interactive is False
2021-02-04 12:44:52,762 [56963] DEBUG    matplotlib:1482: [JupyterRequire] platform is darwin
2021-02-04 12:44:52,762 [56963] DEBUG    matplotlib:1483: [JupyterRequire] loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'google', 'zope', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', '__future__', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '_socket', 'array', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.sslproto', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'contextvars', 'immutables', 'immutables._map', 'immutables._version', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.file_io', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'jedi._compatibility', 'jedi.file_io', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.common', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.compiled.mixed', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.inference.references', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', '_scproxy', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'ctypes', '_ctypes', 'ctypes._endian', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_21', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'ipykernel.eventloops', 'distutils', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'IPython.core.completerlib', 'plistlib', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'appnope', 'appnope._nope', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'support', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._import_tools', 'numpy.add_newdocs', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._internal', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.numerictypes', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.lib.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing._private.pytesttester', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.lib.function_base', 'numpy.lib.twodim_base', 'numpy.lib.histograms', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.core._multiarray_tests', 'numpy._distributor_init', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.info', 'mtrand', 'numpy.random.mtrand', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.interval', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arrays.categorical', 'csv', '_csv', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.generic', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.io.formats.format', 'pandas.io.common', 'gzip', 'mmap', 'zipfile', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.util.numba_', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.frame', 'pandas.core.internals.construction', 'pandas.core.reshape', 'pandas.core.reshape.melt', 'pandas.core.reshape.concat', 'pandas.core.reshape.util', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'statsmodels', 'statsmodels._version', 'statsmodels.tsa', 'statsmodels.tools', 'statsmodels.tools.tools', 'numpy.lib.recfunctions', 'numpy.ma.mrecords', 'statsmodels.compat', 'statsmodels.tools._testing', 'statsmodels.compat.pandas', 'statsmodels.compat.python', 'statsmodels.tools.data', 'statsmodels.tools.validation', 'statsmodels.tools.validation.validation', 'statsmodels.tsa.seasonal', 'statsmodels.tsa._stl', 'statsmodels.tsa.tsatools', 'statsmodels.compat.numpy', 'statsmodels.tools.sm_exceptions', 'statsmodels.tsa.filters', 'statsmodels.tsa.filters.filtertools', 'scipy', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib._version', 'scipy._lib.six', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fftpack._fftpack', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.helper', 'numpy.dual', 'scipy.fftpack.realtransforms', 'scipy.signal', 'scipy.signal.sigtools', 'scipy.signal.windows', 'scipy.signal.windows.windows', 'scipy.linalg', 'scipy.linalg.linalg_version', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', '_cython_0_28_2', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', 'scipy.special._ufuncs_cxx', 'scipy.special.basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special.lambertw', 'scipy.special._spherical_bessel', 'scipy.signal.waveforms', 'scipy.signal._max_len_seq', 'scipy.signal._max_len_seq_inner', 'scipy.signal._upfirdn', 'scipy.signal._upfirdn_apply', 'scipy.signal.spline', 'scipy.signal.bsplines', 'scipy.signal.filter_design', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._minimize', 'scipy.sparse', 'scipy.sparse.base', 'scipy._lib._numpy_compat', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg._expm_multiply', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._differentiable_functions', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize.nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_ip', 'scipy.optimize._remove_redundancy', 'scipy.optimize._hungarian', 'scipy.optimize._differentialevolution', 'scipy.signal.fir_filter_design', 'scipy.signal.ltisys', 'scipy.integrate', 'scipy.integrate.quadrature', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.interpolate', 'scipy.interpolate.interpolate', 'scipy.interpolate.fitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._bsplines', 'scipy.interpolate._bspl', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'numpy.matlib', 'scipy.spatial._voronoi', 'scipy.spatial.distance', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.interpolate.rbf', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.signal.lti_conversion', 'scipy.signal.signaltools', 'scipy.signal._arraytools', 'scipy.signal._savitzky_golay', 'scipy.ndimage', 'scipy.ndimage.filters', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy.ndimage._ni_docstrings', 'scipy.misc', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.misc.pilutil', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageFilter', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', 'scipy.ndimage.measurements', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.io', 'scipy.signal.spectral', 'scipy.signal._spectral', 'scipy.signal.wavelets', 'scipy.signal._peak_finding', 'scipy.stats', 'scipy.stats.stats', 'scipy.stats.distributions', 'scipy.stats._distn_infrastructure', 'scipy.stats._distr_params', 'scipy.stats._constants', 'scipy.stats._continuous_distns', 'scipy.stats._stats', 'scipy.stats._tukeylambda_stats', 'scipy.stats._discrete_distns', 'scipy.stats.mstats_basic', 'scipy.stats._stats_mstats_common', 'scipy.stats.morestats', 'scipy.stats.statlib', 'scipy.stats.contingency', 'scipy.stats._binned_statistic', 'scipy.stats.kde', 'scipy.stats.mvn', 'scipy.stats.mstats', 'scipy.stats.mstats_extras', 'scipy.stats._multivariate', 'scipy.signal._peak_finding_utils', 'elucidata', 'elucidata.tools', 'elucidata.tools.preprocessing', 'elucidata.tools.preprocessing.outliers', 'statsmodels.stats', 'statsmodels.stats.stattools', 'elucidata.tools.utils', 'elucidata.tools.utils.df_utils', 'ipywidgets', 'ipywidgets._version', 'ipywidgets.widgets', 'ipywidgets.widgets.widget', 'ipywidgets.widgets.domwidget', 'ipywidgets.widgets.trait_types', 'ipywidgets.widgets.util', 'ipywidgets.widgets.widget_layout', 'ipywidgets.widgets.widget_style', 'ipywidgets.widgets.valuewidget', 'ipywidgets.widgets.widget_core', 'ipywidgets.widgets.widget_bool', 'ipywidgets.widgets.widget_description', 'ipywidgets.widgets.widget_button', 'ipywidgets.widgets.widget_box', 'ipywidgets.widgets.docutils', 'ipywidgets.widgets.widget_float', 'ipywidgets.widgets.widget_int', 'ipywidgets.widgets.widget_color', 'ipywidgets.widgets.widget_date', 'ipywidgets.widgets.widget_output', 'ipywidgets.widgets.widget_selection', 'ipywidgets.widgets.widget_selectioncontainer', 'ipywidgets.widgets.widget_string', 'ipywidgets.widgets.widget_controller', 'ipywidgets.widgets.interaction', 'ipywidgets.widgets.widget_link', 'ipywidgets.widgets.widget_media', 'ipywidgets.widgets.widget_templates', 'ipywidgets.widgets.widget_upload', 'cufflinks', 'cufflinks.date_tools', 'cufflinks.utils', 'cufflinks.datagen', 'cufflinks.auth', 'cufflinks.offline', 'plotly', '_plotly_utils', '_plotly_utils.importers', 'plotly.graph_objs', 'plotly.graph_objs._area', 'plotly.basedatatypes', '_plotly_utils.utils', '_plotly_utils.optional_imports', '_plotly_utils.basevalidators', '_plotly_utils.exceptions', 'plotly.optional_imports', 'plotly.shapeannotation', 'plotly.subplots', 'plotly.graph_objs._bar', 'plotly.graph_objs._barpolar', 'plotly.graph_objs._box', 'plotly.graph_objs._candlestick', 'plotly.graph_objs._carpet', 'plotly.graph_objs._choropleth', 'plotly.graph_objs._choroplethmapbox', 'plotly.graph_objs._cone', 'plotly.graph_objs._contour', 'plotly.graph_objs._contourcarpet', 'plotly.graph_objs._densitymapbox', 'plotly.graph_objs._deprecations', 'plotly.graph_objs._figure', 'plotly.graph_objs._frame', 'plotly.graph_objs._funnel', 'plotly.graph_objs._funnelarea', 'plotly.graph_objs._heatmap', 'plotly.graph_objs._heatmapgl', 'plotly.graph_objs._histogram', 'plotly.graph_objs._histogram2d', 'plotly.graph_objs._histogram2dcontour', 'plotly.graph_objs._image', 'plotly.graph_objs._indicator', 'plotly.graph_objs._isosurface', 'plotly.graph_objs._layout', 'plotly.graph_objs._mesh3d', 'plotly.graph_objs._ohlc', 'plotly.graph_objs._parcats', 'plotly.graph_objs._parcoords', 'plotly.graph_objs._pie', 'plotly.graph_objs._pointcloud', 'plotly.graph_objs._sankey', 'plotly.graph_objs._scatter', 'plotly.graph_objs._scatter3d', 'plotly.graph_objs._scattercarpet', 'plotly.graph_objs._scattergeo', 'plotly.graph_objs._scattergl', 'plotly.graph_objs._scattermapbox', 'plotly.graph_objs._scatterpolar', 'plotly.graph_objs._scatterpolargl', 'plotly.graph_objs._scatterternary', 'plotly.graph_objs._splom', 'plotly.graph_objs._streamtube', 'plotly.graph_objs._sunburst', 'plotly.graph_objs._surface', 'plotly.graph_objs._table', 'plotly.graph_objs._treemap', 'plotly.graph_objs._violin', 'plotly.graph_objs._volume', 'plotly.graph_objs._waterfall', 'plotly.graph_objs.area', 'plotly.graph_objs.area._hoverlabel', 'plotly.graph_objs.area._marker', 'plotly.graph_objs.area._stream', 'plotly.graph_objs.area.hoverlabel', 'plotly.graph_objs.area.hoverlabel._font', 'plotly.graph_objs.bar', 'plotly.graph_objs.bar._error_x', 'plotly.graph_objs.bar._error_y', 'plotly.graph_objs.bar._hoverlabel', 'plotly.graph_objs.bar._insidetextfont', 'plotly.graph_objs.bar._marker', 'plotly.graph_objs.bar._outsidetextfont', 'plotly.graph_objs.bar._selected', 'plotly.graph_objs.bar._stream', 'plotly.graph_objs.bar._textfont', 'plotly.graph_objs.bar._unselected', 'plotly.graph_objs.bar.hoverlabel', 'plotly.graph_objs.bar.hoverlabel._font', 'plotly.graph_objs.bar.marker', 'plotly.graph_objs.bar.marker._colorbar', 'plotly.graph_objs.bar.marker._line', 'plotly.graph_objs.bar.marker.colorbar', 'plotly.graph_objs.bar.marker.colorbar._tickfont', 'plotly.graph_objs.bar.marker.colorbar._tickformatstop', 'plotly.graph_objs.bar.marker.colorbar._title', 'plotly.graph_objs.bar.marker.colorbar.title', 'plotly.graph_objs.bar.marker.colorbar.title._font', 'plotly.graph_objs.bar.selected', 'plotly.graph_objs.bar.selected._marker', 'plotly.graph_objs.bar.selected._textfont', 'plotly.graph_objs.bar.unselected', 'plotly.graph_objs.bar.unselected._marker', 'plotly.graph_objs.bar.unselected._textfont', 'plotly.graph_objs.barpolar', 'plotly.graph_objs.barpolar._hoverlabel', 'plotly.graph_objs.barpolar._marker', 'plotly.graph_objs.barpolar._selected', 'plotly.graph_objs.barpolar._stream', 'plotly.graph_objs.barpolar._unselected', 'plotly.graph_objs.barpolar.hoverlabel', 'plotly.graph_objs.barpolar.hoverlabel._font', 'plotly.graph_objs.barpolar.marker', 'plotly.graph_objs.barpolar.marker._colorbar', 'plotly.graph_objs.barpolar.marker._line', 'plotly.graph_objs.barpolar.marker.colorbar', 'plotly.graph_objs.barpolar.marker.colorbar._tickfont', 'plotly.graph_objs.barpolar.marker.colorbar._tickformatstop', 'plotly.graph_objs.barpolar.marker.colorbar._title', 'plotly.graph_objs.barpolar.marker.colorbar.title', 'plotly.graph_objs.barpolar.marker.colorbar.title._font', 'plotly.graph_objs.barpolar.selected', 'plotly.graph_objs.barpolar.selected._marker', 'plotly.graph_objs.barpolar.selected._textfont', 'plotly.graph_objs.barpolar.unselected', 'plotly.graph_objs.barpolar.unselected._marker', 'plotly.graph_objs.barpolar.unselected._textfont', 'plotly.graph_objs.box', 'plotly.graph_objs.box._hoverlabel', 'plotly.graph_objs.box._line', 'plotly.graph_objs.box._marker', 'plotly.graph_objs.box._selected', 'plotly.graph_objs.box._stream', 'plotly.graph_objs.box._unselected', 'plotly.graph_objs.box.hoverlabel', 'plotly.graph_objs.box.hoverlabel._font', 'plotly.graph_objs.box.marker', 'plotly.graph_objs.box.marker._line', 'plotly.graph_objs.box.selected', 'plotly.graph_objs.box.selected._marker', 'plotly.graph_objs.box.unselected', 'plotly.graph_objs.box.unselected._marker', 'plotly.graph_objs.candlestick', 'plotly.graph_objs.candlestick._decreasing', 'plotly.graph_objs.candlestick._hoverlabel', 'plotly.graph_objs.candlestick._increasing', 'plotly.graph_objs.candlestick._line', 'plotly.graph_objs.candlestick._stream', 'plotly.graph_objs.candlestick.decreasing', 'plotly.graph_objs.candlestick.decreasing._line', 'plotly.graph_objs.candlestick.hoverlabel', 'plotly.graph_objs.candlestick.hoverlabel._font', 'plotly.graph_objs.candlestick.increasing', 'plotly.graph_objs.candlestick.increasing._line', 'plotly.graph_objs.carpet', 'plotly.graph_objs.carpet._aaxis', 'plotly.graph_objs.carpet._baxis', 'plotly.graph_objs.carpet._font', 'plotly.graph_objs.carpet._stream', 'plotly.graph_objs.carpet.aaxis', 'plotly.graph_objs.carpet.aaxis._tickfont', 'plotly.graph_objs.carpet.aaxis._tickformatstop', 'plotly.graph_objs.carpet.aaxis._title', 'plotly.graph_objs.carpet.aaxis.title', 'plotly.graph_objs.carpet.aaxis.title._font', 'plotly.graph_objs.carpet.baxis', 'plotly.graph_objs.carpet.baxis._tickfont', 'plotly.graph_objs.carpet.baxis._tickformatstop', 'plotly.graph_objs.carpet.baxis._title', 'plotly.graph_objs.carpet.baxis.title', 'plotly.graph_objs.carpet.baxis.title._font', 'plotly.graph_objs.choropleth', 'plotly.graph_objs.choropleth._colorbar', 'plotly.graph_objs.choropleth._hoverlabel', 'plotly.graph_objs.choropleth._marker', 'plotly.graph_objs.choropleth._selected', 'plotly.graph_objs.choropleth._stream', 'plotly.graph_objs.choropleth._unselected', 'plotly.graph_objs.choropleth.colorbar', 'plotly.graph_objs.choropleth.colorbar._tickfont', 'plotly.graph_objs.choropleth.colorbar._tickformatstop', 'plotly.graph_objs.choropleth.colorbar._title', 'plotly.graph_objs.choropleth.colorbar.title', 'plotly.graph_objs.choropleth.colorbar.title._font', 'plotly.graph_objs.choropleth.hoverlabel', 'plotly.graph_objs.choropleth.hoverlabel._font', 'plotly.graph_objs.choropleth.marker', 'plotly.graph_objs.choropleth.marker._line', 'plotly.graph_objs.choropleth.selected', 'plotly.graph_objs.choropleth.selected._marker', 'plotly.graph_objs.choropleth.unselected', 'plotly.graph_objs.choropleth.unselected._marker', 'plotly.graph_objs.choroplethmapbox', 'plotly.graph_objs.choroplethmapbox._colorbar', 'plotly.graph_objs.choroplethmapbox._hoverlabel', 'plotly.graph_objs.choroplethmapbox._marker', 'plotly.graph_objs.choroplethmapbox._selected', 'plotly.graph_objs.choroplethmapbox._stream', 'plotly.graph_objs.choroplethmapbox._unselected', 'plotly.graph_objs.choroplethmapbox.colorbar', 'plotly.graph_objs.choroplethmapbox.colorbar._tickfont', 'plotly.graph_objs.choroplethmapbox.colorbar._tickformatstop', 'plotly.graph_objs.choroplethmapbox.colorbar._title', 'plotly.graph_objs.choroplethmapbox.colorbar.title', 'plotly.graph_objs.choroplethmapbox.colorbar.title._font', 'plotly.graph_objs.choroplethmapbox.hoverlabel', 'plotly.graph_objs.choroplethmapbox.hoverlabel._font', 'plotly.graph_objs.choroplethmapbox.marker', 'plotly.graph_objs.choroplethmapbox.marker._line', 'plotly.graph_objs.choroplethmapbox.selected', 'plotly.graph_objs.choroplethmapbox.selected._marker', 'plotly.graph_objs.choroplethmapbox.unselected', 'plotly.graph_objs.choroplethmapbox.unselected._marker', 'plotly.graph_objs.cone', 'plotly.graph_objs.cone._colorbar', 'plotly.graph_objs.cone._hoverlabel', 'plotly.graph_objs.cone._lighting', 'plotly.graph_objs.cone._lightposition', 'plotly.graph_objs.cone._stream', 'plotly.graph_objs.cone.colorbar', 'plotly.graph_objs.cone.colorbar._tickfont', 'plotly.graph_objs.cone.colorbar._tickformatstop', 'plotly.graph_objs.cone.colorbar._title', 'plotly.graph_objs.cone.colorbar.title', 'plotly.graph_objs.cone.colorbar.title._font', 'plotly.graph_objs.cone.hoverlabel', 'plotly.graph_objs.cone.hoverlabel._font', 'plotly.graph_objs.contour', 'plotly.graph_objs.contour._colorbar', 'plotly.graph_objs.contour._contours', 'plotly.graph_objs.contour._hoverlabel', 'plotly.graph_objs.contour._line', 'plotly.graph_objs.contour._stream', 'plotly.graph_objs.contour.colorbar', 'plotly.graph_objs.contour.colorbar._tickfont', 'plotly.graph_objs.contour.colorbar._tickformatstop', 'plotly.graph_objs.contour.colorbar._title', 'plotly.graph_objs.contour.colorbar.title', 'plotly.graph_objs.contour.colorbar.title._font', 'plotly.graph_objs.contour.contours', 'plotly.graph_objs.contour.contours._labelfont', 'plotly.graph_objs.contour.hoverlabel', 'plotly.graph_objs.contour.hoverlabel._font', 'plotly.graph_objs.contourcarpet', 'plotly.graph_objs.contourcarpet._colorbar', 'plotly.graph_objs.contourcarpet._contours', 'plotly.graph_objs.contourcarpet._line', 'plotly.graph_objs.contourcarpet._stream', 'plotly.graph_objs.contourcarpet.colorbar', 'plotly.graph_objs.contourcarpet.colorbar._tickfont', 'plotly.graph_objs.contourcarpet.colorbar._tickformatstop', 'plotly.graph_objs.contourcarpet.colorbar._title', 'plotly.graph_objs.contourcarpet.colorbar.title', 'plotly.graph_objs.contourcarpet.colorbar.title._font', 'plotly.graph_objs.contourcarpet.contours', 'plotly.graph_objs.contourcarpet.contours._labelfont', 'plotly.graph_objs.densitymapbox', 'plotly.graph_objs.densitymapbox._colorbar', 'plotly.graph_objs.densitymapbox._hoverlabel', 'plotly.graph_objs.densitymapbox._stream', 'plotly.graph_objs.densitymapbox.colorbar', 'plotly.graph_objs.densitymapbox.colorbar._tickfont', 'plotly.graph_objs.densitymapbox.colorbar._tickformatstop', 'plotly.graph_objs.densitymapbox.colorbar._title', 'plotly.graph_objs.densitymapbox.colorbar.title', 'plotly.graph_objs.densitymapbox.colorbar.title._font', 'plotly.graph_objs.densitymapbox.hoverlabel', 'plotly.graph_objs.densitymapbox.hoverlabel._font', 'plotly.graph_objs.funnel', 'plotly.graph_objs.funnel._connector', 'plotly.graph_objs.funnel._hoverlabel', 'plotly.graph_objs.funnel._insidetextfont', 'plotly.graph_objs.funnel._marker', 'plotly.graph_objs.funnel._outsidetextfont', 'plotly.graph_objs.funnel._stream', 'plotly.graph_objs.funnel._textfont', 'plotly.graph_objs.funnel.connector', 'plotly.graph_objs.funnel.connector._line', 'plotly.graph_objs.funnel.hoverlabel', 'plotly.graph_objs.funnel.hoverlabel._font', 'plotly.graph_objs.funnel.marker', 'plotly.graph_objs.funnel.marker._colorbar', 'plotly.graph_objs.funnel.marker._line', 'plotly.graph_objs.funnel.marker.colorbar', 'plotly.graph_objs.funnel.marker.colorbar._tickfont', 'plotly.graph_objs.funnel.marker.colorbar._tickformatstop', 'plotly.graph_objs.funnel.marker.colorbar._title', 'plotly.graph_objs.funnel.marker.colorbar.title', 'plotly.graph_objs.funnel.marker.colorbar.title._font', 'plotly.graph_objs.funnelarea', 'plotly.graph_objs.funnelarea._domain', 'plotly.graph_objs.funnelarea._hoverlabel', 'plotly.graph_objs.funnelarea._insidetextfont', 'plotly.graph_objs.funnelarea._marker', 'plotly.graph_objs.funnelarea._stream', 'plotly.graph_objs.funnelarea._textfont', 'plotly.graph_objs.funnelarea._title', 'plotly.graph_objs.funnelarea.hoverlabel', 'plotly.graph_objs.funnelarea.hoverlabel._font', 'plotly.graph_objs.funnelarea.marker', 'plotly.graph_objs.funnelarea.marker._line', 'plotly.graph_objs.funnelarea.title', 'plotly.graph_objs.funnelarea.title._font', 'plotly.graph_objs.heatmap', 'plotly.graph_objs.heatmap._colorbar', 'plotly.graph_objs.heatmap._hoverlabel', 'plotly.graph_objs.heatmap._stream', 'plotly.graph_objs.heatmap.colorbar', 'plotly.graph_objs.heatmap.colorbar._tickfont', 'plotly.graph_objs.heatmap.colorbar._tickformatstop', 'plotly.graph_objs.heatmap.colorbar._title', 'plotly.graph_objs.heatmap.colorbar.title', 'plotly.graph_objs.heatmap.colorbar.title._font', 'plotly.graph_objs.heatmap.hoverlabel', 'plotly.graph_objs.heatmap.hoverlabel._font', 'plotly.graph_objs.heatmapgl', 'plotly.graph_objs.heatmapgl._colorbar', 'plotly.graph_objs.heatmapgl._hoverlabel', 'plotly.graph_objs.heatmapgl._stream', 'plotly.graph_objs.heatmapgl.colorbar', 'plotly.graph_objs.heatmapgl.colorbar._tickfont', 'plotly.graph_objs.heatmapgl.colorbar._tickformatstop', 'plotly.graph_objs.heatmapgl.colorbar._title', 'plotly.graph_objs.heatmapgl.colorbar.title', 'plotly.graph_objs.heatmapgl.colorbar.title._font', 'plotly.graph_objs.heatmapgl.hoverlabel', 'plotly.graph_objs.heatmapgl.hoverlabel._font', 'plotly.graph_objs.histogram', 'plotly.graph_objs.histogram._cumulative', 'plotly.graph_objs.histogram._error_x', 'plotly.graph_objs.histogram._error_y', 'plotly.graph_objs.histogram._hoverlabel', 'plotly.graph_objs.histogram._marker', 'plotly.graph_objs.histogram._selected', 'plotly.graph_objs.histogram._stream', 'plotly.graph_objs.histogram._unselected', 'plotly.graph_objs.histogram._xbins', 'plotly.graph_objs.histogram._ybins', 'plotly.graph_objs.histogram.hoverlabel', 'plotly.graph_objs.histogram.hoverlabel._font', 'plotly.graph_objs.histogram.marker', 'plotly.graph_objs.histogram.marker._colorbar', 'plotly.graph_objs.histogram.marker._line', 'plotly.graph_objs.histogram.marker.colorbar', 'plotly.graph_objs.histogram.marker.colorbar._tickfont', 'plotly.graph_objs.histogram.marker.colorbar._tickformatstop', 'plotly.graph_objs.histogram.marker.colorbar._title', 'plotly.graph_objs.histogram.marker.colorbar.title', 'plotly.graph_objs.histogram.marker.colorbar.title._font', 'plotly.graph_objs.histogram.selected', 'plotly.graph_objs.histogram.selected._marker', 'plotly.graph_objs.histogram.selected._textfont', 'plotly.graph_objs.histogram.unselected', 'plotly.graph_objs.histogram.unselected._marker', 'plotly.graph_objs.histogram.unselected._textfont', 'plotly.graph_objs.histogram2d', 'plotly.graph_objs.histogram2d._colorbar', 'plotly.graph_objs.histogram2d._hoverlabel', 'plotly.graph_objs.histogram2d._marker', 'plotly.graph_objs.histogram2d._stream', 'plotly.graph_objs.histogram2d._xbins', 'plotly.graph_objs.histogram2d._ybins', 'plotly.graph_objs.histogram2d.colorbar', 'plotly.graph_objs.histogram2d.colorbar._tickfont', 'plotly.graph_objs.histogram2d.colorbar._tickformatstop', 'plotly.graph_objs.histogram2d.colorbar._title', 'plotly.graph_objs.histogram2d.colorbar.title', 'plotly.graph_objs.histogram2d.colorbar.title._font', 'plotly.graph_objs.histogram2d.hoverlabel', 'plotly.graph_objs.histogram2d.hoverlabel._font', 'plotly.graph_objs.histogram2dcontour', 'plotly.graph_objs.histogram2dcontour._colorbar', 'plotly.graph_objs.histogram2dcontour._contours', 'plotly.graph_objs.histogram2dcontour._hoverlabel', 'plotly.graph_objs.histogram2dcontour._line', 'plotly.graph_objs.histogram2dcontour._marker', 'plotly.graph_objs.histogram2dcontour._stream', 'plotly.graph_objs.histogram2dcontour._xbins', 'plotly.graph_objs.histogram2dcontour._ybins', 'plotly.graph_objs.histogram2dcontour.colorbar', 'plotly.graph_objs.histogram2dcontour.colorbar._tickfont', 'plotly.graph_objs.histogram2dcontour.colorbar._tickformatstop', 'plotly.graph_objs.histogram2dcontour.colorbar._title', 'plotly.graph_objs.histogram2dcontour.colorbar.title', 'plotly.graph_objs.histogram2dcontour.colorbar.title._font', 'plotly.graph_objs.histogram2dcontour.contours', 'plotly.graph_objs.histogram2dcontour.contours._labelfont', 'plotly.graph_objs.histogram2dcontour.hoverlabel', 'plotly.graph_objs.histogram2dcontour.hoverlabel._font', 'plotly.graph_objs.image', 'plotly.graph_objs.image._hoverlabel', 'plotly.graph_objs.image._stream', 'plotly.graph_objs.image.hoverlabel', 'plotly.graph_objs.image.hoverlabel._font', 'plotly.graph_objs.indicator', 'plotly.graph_objs.indicator._delta', 'plotly.graph_objs.indicator._domain', 'plotly.graph_objs.indicator._gauge', 'plotly.graph_objs.indicator._number', 'plotly.graph_objs.indicator._stream', 'plotly.graph_objs.indicator._title', 'plotly.graph_objs.indicator.delta', 'plotly.graph_objs.indicator.delta._decreasing', 'plotly.graph_objs.indicator.delta._font', 'plotly.graph_objs.indicator.delta._increasing', 'plotly.graph_objs.indicator.gauge', 'plotly.graph_objs.indicator.gauge._axis', 'plotly.graph_objs.indicator.gauge._bar', 'plotly.graph_objs.indicator.gauge._step', 'plotly.graph_objs.indicator.gauge._threshold', 'plotly.graph_objs.indicator.gauge.axis', 'plotly.graph_objs.indicator.gauge.axis._tickfont', 'plotly.graph_objs.indicator.gauge.axis._tickformatstop', 'plotly.graph_objs.indicator.gauge.bar', 'plotly.graph_objs.indicator.gauge.bar._line', 'plotly.graph_objs.indicator.gauge.step', 'plotly.graph_objs.indicator.gauge.step._line', 'plotly.graph_objs.indicator.gauge.threshold', 'plotly.graph_objs.indicator.gauge.threshold._line', 'plotly.graph_objs.indicator.number', 'plotly.graph_objs.indicator.number._font', 'plotly.graph_objs.indicator.title', 'plotly.graph_objs.indicator.title._font', 'plotly.graph_objs.isosurface', 'plotly.graph_objs.isosurface._caps', 'plotly.graph_objs.isosurface._colorbar', 'plotly.graph_objs.isosurface._contour', 'plotly.graph_objs.isosurface._hoverlabel', 'plotly.graph_objs.isosurface._lighting', 'plotly.graph_objs.isosurface._lightposition', 'plotly.graph_objs.isosurface._slices', 'plotly.graph_objs.isosurface._spaceframe', 'plotly.graph_objs.isosurface._stream', 'plotly.graph_objs.isosurface._surface', 'plotly.graph_objs.isosurface.caps', 'plotly.graph_objs.isosurface.caps._x', 'plotly.graph_objs.isosurface.caps._y', 'plotly.graph_objs.isosurface.caps._z', 'plotly.graph_objs.isosurface.colorbar', 'plotly.graph_objs.isosurface.colorbar._tickfont', 'plotly.graph_objs.isosurface.colorbar._tickformatstop', 'plotly.graph_objs.isosurface.colorbar._title', 'plotly.graph_objs.isosurface.colorbar.title', 'plotly.graph_objs.isosurface.colorbar.title._font', 'plotly.graph_objs.isosurface.hoverlabel', 'plotly.graph_objs.isosurface.hoverlabel._font', 'plotly.graph_objs.isosurface.slices', 'plotly.graph_objs.isosurface.slices._x', 'plotly.graph_objs.isosurface.slices._y', 'plotly.graph_objs.isosurface.slices._z', 'plotly.graph_objs.layout', 'plotly.graph_objs.layout._activeshape', 'plotly.graph_objs.layout._angularaxis', 'plotly.graph_objs.layout._annotation', 'plotly.graph_objs.layout._coloraxis', 'plotly.graph_objs.layout._colorscale', 'plotly.graph_objs.layout._font', 'plotly.graph_objs.layout._geo', 'plotly.graph_objs.layout._grid', 'plotly.graph_objs.layout._hoverlabel', 'plotly.graph_objs.layout._image', 'plotly.graph_objs.layout._legend', 'plotly.graph_objs.layout._mapbox', 'plotly.graph_objs.layout._margin', 'plotly.graph_objs.layout._modebar', 'plotly.graph_objs.layout._newshape', 'plotly.graph_objs.layout._polar', 'plotly.graph_objs.layout._radialaxis', 'plotly.graph_objs.layout._scene', 'plotly.graph_objs.layout._shape', 'plotly.graph_objs.layout._slider', 'plotly.graph_objs.layout._template', 'plotly.graph_objs.layout._ternary', 'plotly.graph_objs.layout._title', 'plotly.graph_objs.layout._transition', 'plotly.graph_objs.layout._uniformtext', 'plotly.graph_objs.layout._updatemenu', 'plotly.graph_objs.layout._xaxis', 'plotly.graph_objs.layout._yaxis', 'plotly.graph_objs.layout.annotation', 'plotly.graph_objs.layout.annotation._font', 'plotly.graph_objs.layout.annotation._hoverlabel', 'plotly.graph_objs.layout.annotation.hoverlabel', 'plotly.graph_objs.layout.annotation.hoverlabel._font', 'plotly.graph_objs.layout.coloraxis', 'plotly.graph_objs.layout.coloraxis._colorbar', 'plotly.graph_objs.layout.coloraxis.colorbar', 'plotly.graph_objs.layout.coloraxis.colorbar._tickfont', 'plotly.graph_objs.layout.coloraxis.colorbar._tickformatstop', 'plotly.graph_objs.layout.coloraxis.colorbar._title', 'plotly.graph_objs.layout.coloraxis.colorbar.title', 'plotly.graph_objs.layout.coloraxis.colorbar.title._font', 'plotly.graph_objs.layout.geo', 'plotly.graph_objs.layout.geo._center', 'plotly.graph_objs.layout.geo._domain', 'plotly.graph_objs.layout.geo._lataxis', 'plotly.graph_objs.layout.geo._lonaxis', 'plotly.graph_objs.layout.geo._projection', 'plotly.graph_objs.layout.geo.projection', 'plotly.graph_objs.layout.geo.projection._rotation', 'plotly.graph_objs.layout.grid', 'plotly.graph_objs.layout.grid._domain', 'plotly.graph_objs.layout.hoverlabel', 'plotly.graph_objs.layout.hoverlabel._font', 'plotly.graph_objs.layout.legend', 'plotly.graph_objs.layout.legend._font', 'plotly.graph_objs.layout.legend._title', 'plotly.graph_objs.layout.legend.title', 'plotly.graph_objs.layout.legend.title._font', 'plotly.graph_objs.layout.mapbox', 'plotly.graph_objs.layout.mapbox._center', 'plotly.graph_objs.layout.mapbox._domain', 'plotly.graph_objs.layout.mapbox._layer', 'plotly.graph_objs.layout.mapbox.layer', 'plotly.graph_objs.layout.mapbox.layer._circle', 'plotly.graph_objs.layout.mapbox.layer._fill', 'plotly.graph_objs.layout.mapbox.layer._line', 'plotly.graph_objs.layout.mapbox.layer._symbol', 'plotly.graph_objs.layout.mapbox.layer.symbol', 'plotly.graph_objs.layout.mapbox.layer.symbol._textfont', 'plotly.graph_objs.layout.newshape', 'plotly.graph_objs.layout.newshape._line', 'plotly.graph_objs.layout.polar', 'plotly.graph_objs.layout.polar._angularaxis', 'plotly.graph_objs.layout.polar._domain', 'plotly.graph_objs.layout.polar._radialaxis', 'plotly.graph_objs.layout.polar.angularaxis', 'plotly.graph_objs.layout.polar.angularaxis._tickfont', 'plotly.graph_objs.layout.polar.angularaxis._tickformatstop', 'plotly.graph_objs.layout.polar.radialaxis', 'plotly.graph_objs.layout.polar.radialaxis._tickfont', 'plotly.graph_objs.layout.polar.radialaxis._tickformatstop', 'plotly.graph_objs.layout.polar.radialaxis._title', 'plotly.graph_objs.layout.polar.radialaxis.title', 'plotly.graph_objs.layout.polar.radialaxis.title._font', 'plotly.graph_objs.layout.scene', 'plotly.graph_objs.layout.scene._annotation', 'plotly.graph_objs.layout.scene._aspectratio', 'plotly.graph_objs.layout.scene._camera', 'plotly.graph_objs.layout.scene._domain', 'plotly.graph_objs.layout.scene._xaxis', 'plotly.graph_objs.layout.scene._yaxis', 'plotly.graph_objs.layout.scene._zaxis', 'plotly.graph_objs.layout.scene.annotation', 'plotly.graph_objs.layout.scene.annotation._font', 'plotly.graph_objs.layout.scene.annotation._hoverlabel', 'plotly.graph_objs.layout.scene.annotation.hoverlabel', 'plotly.graph_objs.layout.scene.annotation.hoverlabel._font', 'plotly.graph_objs.layout.scene.camera', 'plotly.graph_objs.layout.scene.camera._center', 'plotly.graph_objs.layout.scene.camera._eye', 'plotly.graph_objs.layout.scene.camera._projection', 'plotly.graph_objs.layout.scene.camera._up', 'plotly.graph_objs.layout.scene.xaxis', 'plotly.graph_objs.layout.scene.xaxis._tickfont', 'plotly.graph_objs.layout.scene.xaxis._tickformatstop', 'plotly.graph_objs.layout.scene.xaxis._title', 'plotly.graph_objs.layout.scene.xaxis.title', 'plotly.graph_objs.layout.scene.xaxis.title._font', 'plotly.graph_objs.layout.scene.yaxis', 'plotly.graph_objs.layout.scene.yaxis._tickfont', 'plotly.graph_objs.layout.scene.yaxis._tickformatstop', 'plotly.graph_objs.layout.scene.yaxis._title', 'plotly.graph_objs.layout.scene.yaxis.title', 'plotly.graph_objs.layout.scene.yaxis.title._font', 'plotly.graph_objs.layout.scene.zaxis', 'plotly.graph_objs.layout.scene.zaxis._tickfont', 'plotly.graph_objs.layout.scene.zaxis._tickformatstop', 'plotly.graph_objs.layout.scene.zaxis._title', 'plotly.graph_objs.layout.scene.zaxis.title', 'plotly.graph_objs.layout.scene.zaxis.title._font', 'plotly.graph_objs.layout.shape', 'plotly.graph_objs.layout.shape._line', 'plotly.graph_objs.layout.slider', 'plotly.graph_objs.layout.slider._currentvalue', 'plotly.graph_objs.layout.slider._font', 'plotly.graph_objs.layout.slider._pad', 'plotly.graph_objs.layout.slider._step', 'plotly.graph_objs.layout.slider._transition', 'plotly.graph_objs.layout.slider.currentvalue', 'plotly.graph_objs.layout.slider.currentvalue._font', 'plotly.graph_objs.layout.template', 'plotly.graph_objs.layout.template._data', 'plotly.graph_objs.layout.template._layout', 'plotly.graph_objs.layout.template.data', 'plotly.graph_objs.layout.template.data._area', 'plotly.graph_objs.layout.template.data._bar', 'plotly.graph_objs.layout.template.data._barpolar', 'plotly.graph_objs.layout.template.data._box', 'plotly.graph_objs.layout.template.data._candlestick', 'plotly.graph_objs.layout.template.data._carpet', 'plotly.graph_objs.layout.template.data._choropleth', 'plotly.graph_objs.layout.template.data._choroplethmapbox', 'plotly.graph_objs.layout.template.data._cone', 'plotly.graph_objs.layout.template.data._contour', 'plotly.graph_objs.layout.template.data._contourcarpet', 'plotly.graph_objs.layout.template.data._densitymapbox', 'plotly.graph_objs.layout.template.data._funnel', 'plotly.graph_objs.layout.template.data._funnelarea', 'plotly.graph_objs.layout.template.data._heatmap', 'plotly.graph_objs.layout.template.data._heatmapgl', 'plotly.graph_objs.layout.template.data._histogram', 'plotly.graph_objs.layout.template.data._histogram2d', 'plotly.graph_objs.layout.template.data._histogram2dcontour', 'plotly.graph_objs.layout.template.data._image', 'plotly.graph_objs.layout.template.data._indicator', 'plotly.graph_objs.layout.template.data._isosurface', 'plotly.graph_objs.layout.template.data._mesh3d', 'plotly.graph_objs.layout.template.data._ohlc', 'plotly.graph_objs.layout.template.data._parcats', 'plotly.graph_objs.layout.template.data._parcoords', 'plotly.graph_objs.layout.template.data._pie', 'plotly.graph_objs.layout.template.data._pointcloud', 'plotly.graph_objs.layout.template.data._sankey', 'plotly.graph_objs.layout.template.data._scatter', 'plotly.graph_objs.layout.template.data._scatter3d', 'plotly.graph_objs.layout.template.data._scattercarpet', 'plotly.graph_objs.layout.template.data._scattergeo', 'plotly.graph_objs.layout.template.data._scattergl', 'plotly.graph_objs.layout.template.data._scattermapbox', 'plotly.graph_objs.layout.template.data._scatterpolar', 'plotly.graph_objs.layout.template.data._scatterpolargl', 'plotly.graph_objs.layout.template.data._scatterternary', 'plotly.graph_objs.layout.template.data._splom', 'plotly.graph_objs.layout.template.data._streamtube', 'plotly.graph_objs.layout.template.data._sunburst', 'plotly.graph_objs.layout.template.data._surface', 'plotly.graph_objs.layout.template.data._table', 'plotly.graph_objs.layout.template.data._treemap', 'plotly.graph_objs.layout.template.data._violin', 'plotly.graph_objs.layout.template.data._volume', 'plotly.graph_objs.layout.template.data._waterfall', 'plotly.graph_objs.layout.ternary', 'plotly.graph_objs.layout.ternary._aaxis', 'plotly.graph_objs.layout.ternary._baxis', 'plotly.graph_objs.layout.ternary._caxis', 'plotly.graph_objs.layout.ternary._domain', 'plotly.graph_objs.layout.ternary.aaxis', 'plotly.graph_objs.layout.ternary.aaxis._tickfont', 'plotly.graph_objs.layout.ternary.aaxis._tickformatstop', 'plotly.graph_objs.layout.ternary.aaxis._title', 'plotly.graph_objs.layout.ternary.aaxis.title', 'plotly.graph_objs.layout.ternary.aaxis.title._font', 'plotly.graph_objs.layout.ternary.baxis', 'plotly.graph_objs.layout.ternary.baxis._tickfont', 'plotly.graph_objs.layout.ternary.baxis._tickformatstop', 'plotly.graph_objs.layout.ternary.baxis._title', 'plotly.graph_objs.layout.ternary.baxis.title', 'plotly.graph_objs.layout.ternary.baxis.title._font', 'plotly.graph_objs.layout.ternary.caxis', 'plotly.graph_objs.layout.ternary.caxis._tickfont', 'plotly.graph_objs.layout.ternary.caxis._tickformatstop', 'plotly.graph_objs.layout.ternary.caxis._title', 'plotly.graph_objs.layout.ternary.caxis.title', 'plotly.graph_objs.layout.ternary.caxis.title._font', 'plotly.graph_objs.layout.title', 'plotly.graph_objs.layout.title._font', 'plotly.graph_objs.layout.title._pad', 'plotly.graph_objs.layout.updatemenu', 'plotly.graph_objs.layout.updatemenu._button', 'plotly.graph_objs.layout.updatemenu._font', 'plotly.graph_objs.layout.updatemenu._pad', 'plotly.graph_objs.layout.xaxis', 'plotly.graph_objs.layout.xaxis._rangebreak', 'plotly.graph_objs.layout.xaxis._rangeselector', 'plotly.graph_objs.layout.xaxis._rangeslider', 'plotly.graph_objs.layout.xaxis._tickfont', 'plotly.graph_objs.layout.xaxis._tickformatstop', 'plotly.graph_objs.layout.xaxis._title', 'plotly.graph_objs.layout.xaxis.rangeselector', 'plotly.graph_objs.layout.xaxis.rangeselector._button', 'plotly.graph_objs.layout.xaxis.rangeselector._font', 'plotly.graph_objs.layout.xaxis.rangeslider', 'plotly.graph_objs.layout.xaxis.rangeslider._yaxis', 'plotly.graph_objs.layout.xaxis.title', 'plotly.graph_objs.layout.xaxis.title._font', 'plotly.graph_objs.layout.yaxis', 'plotly.graph_objs.layout.yaxis._rangebreak', 'plotly.graph_objs.layout.yaxis._tickfont', 'plotly.graph_objs.layout.yaxis._tickformatstop', 'plotly.graph_objs.layout.yaxis._title', 'plotly.graph_objs.layout.yaxis.title', 'plotly.graph_objs.layout.yaxis.title._font', 'plotly.graph_objs.mesh3d', 'plotly.graph_objs.mesh3d._colorbar', 'plotly.graph_objs.mesh3d._contour', 'plotly.graph_objs.mesh3d._hoverlabel', 'plotly.graph_objs.mesh3d._lighting', 'plotly.graph_objs.mesh3d._lightposition', 'plotly.graph_objs.mesh3d._stream', 'plotly.graph_objs.mesh3d.colorbar', 'plotly.graph_objs.mesh3d.colorbar._tickfont', 'plotly.graph_objs.mesh3d.colorbar._tickformatstop', 'plotly.graph_objs.mesh3d.colorbar._title', 'plotly.graph_objs.mesh3d.colorbar.title', 'plotly.graph_objs.mesh3d.colorbar.title._font', 'plotly.graph_objs.mesh3d.hoverlabel', 'plotly.graph_objs.mesh3d.hoverlabel._font', 'plotly.graph_objs.ohlc', 'plotly.graph_objs.ohlc._decreasing', 'plotly.graph_objs.ohlc._hoverlabel', 'plotly.graph_objs.ohlc._increasing', 'plotly.graph_objs.ohlc._line', 'plotly.graph_objs.ohlc._stream', 'plotly.graph_objs.ohlc.decreasing', 'plotly.graph_objs.ohlc.decreasing._line', 'plotly.graph_objs.ohlc.hoverlabel', 'plotly.graph_objs.ohlc.hoverlabel._font', 'plotly.graph_objs.ohlc.increasing', 'plotly.graph_objs.ohlc.increasing._line', 'plotly.graph_objs.parcats', 'plotly.graph_objs.parcats._dimension', 'plotly.graph_objs.parcats._domain', 'plotly.graph_objs.parcats._labelfont', 'plotly.graph_objs.parcats._line', 'plotly.graph_objs.parcats._stream', 'plotly.graph_objs.parcats._tickfont', 'plotly.graph_objs.parcats.line', 'plotly.graph_objs.parcats.line._colorbar', 'plotly.graph_objs.parcats.line.colorbar', 'plotly.graph_objs.parcats.line.colorbar._tickfont', 'plotly.graph_objs.parcats.line.colorbar._tickformatstop', 'plotly.graph_objs.parcats.line.colorbar._title', 'plotly.graph_objs.parcats.line.colorbar.title', 'plotly.graph_objs.parcats.line.colorbar.title._font', 'plotly.graph_objs.parcoords', 'plotly.graph_objs.parcoords._dimension', 'plotly.graph_objs.parcoords._domain', 'plotly.graph_objs.parcoords._labelfont', 'plotly.graph_objs.parcoords._line', 'plotly.graph_objs.parcoords._rangefont', 'plotly.graph_objs.parcoords._stream', 'plotly.graph_objs.parcoords._tickfont', 'plotly.graph_objs.parcoords.line', 'plotly.graph_objs.parcoords.line._colorbar', 'plotly.graph_objs.parcoords.line.colorbar', 'plotly.graph_objs.parcoords.line.colorbar._tickfont', 'plotly.graph_objs.parcoords.line.colorbar._tickformatstop', 'plotly.graph_objs.parcoords.line.colorbar._title', 'plotly.graph_objs.parcoords.line.colorbar.title', 'plotly.graph_objs.parcoords.line.colorbar.title._font', 'plotly.graph_objs.pie', 'plotly.graph_objs.pie._domain', 'plotly.graph_objs.pie._hoverlabel', 'plotly.graph_objs.pie._insidetextfont', 'plotly.graph_objs.pie._marker', 'plotly.graph_objs.pie._outsidetextfont', 'plotly.graph_objs.pie._stream', 'plotly.graph_objs.pie._textfont', 'plotly.graph_objs.pie._title', 'plotly.graph_objs.pie.hoverlabel', 'plotly.graph_objs.pie.hoverlabel._font', 'plotly.graph_objs.pie.marker', 'plotly.graph_objs.pie.marker._line', 'plotly.graph_objs.pie.title', 'plotly.graph_objs.pie.title._font', 'plotly.graph_objs.pointcloud', 'plotly.graph_objs.pointcloud._hoverlabel', 'plotly.graph_objs.pointcloud._marker', 'plotly.graph_objs.pointcloud._stream', 'plotly.graph_objs.pointcloud.hoverlabel', 'plotly.graph_objs.pointcloud.hoverlabel._font', 'plotly.graph_objs.pointcloud.marker', 'plotly.graph_objs.pointcloud.marker._border', 'plotly.graph_objs.sankey', 'plotly.graph_objs.sankey._domain', 'plotly.graph_objs.sankey._hoverlabel', 'plotly.graph_objs.sankey._link', 'plotly.graph_objs.sankey._node', 'plotly.graph_objs.sankey._stream', 'plotly.graph_objs.sankey._textfont', 'plotly.graph_objs.sankey.hoverlabel', 'plotly.graph_objs.sankey.hoverlabel._font', 'plotly.graph_objs.sankey.link', 'plotly.graph_objs.sankey.link._colorscale', 'plotly.graph_objs.sankey.link._hoverlabel', 'plotly.graph_objs.sankey.link._line', 'plotly.graph_objs.sankey.link.hoverlabel', 'plotly.graph_objs.sankey.link.hoverlabel._font', 'plotly.graph_objs.sankey.node', 'plotly.graph_objs.sankey.node._hoverlabel', 'plotly.graph_objs.sankey.node._line', 'plotly.graph_objs.sankey.node.hoverlabel', 'plotly.graph_objs.sankey.node.hoverlabel._font', 'plotly.graph_objs.scatter', 'plotly.graph_objs.scatter._error_x', 'plotly.graph_objs.scatter._error_y', 'plotly.graph_objs.scatter._hoverlabel', 'plotly.graph_objs.scatter._line', 'plotly.graph_objs.scatter._marker', 'plotly.graph_objs.scatter._selected', 'plotly.graph_objs.scatter._stream', 'plotly.graph_objs.scatter._textfont', 'plotly.graph_objs.scatter._unselected', 'plotly.graph_objs.scatter.hoverlabel', 'plotly.graph_objs.scatter.hoverlabel._font', 'plotly.graph_objs.scatter.marker', 'plotly.graph_objs.scatter.marker._colorbar', 'plotly.graph_objs.scatter.marker._gradient', 'plotly.graph_objs.scatter.marker._line', 'plotly.graph_objs.scatter.marker.colorbar', 'plotly.graph_objs.scatter.marker.colorbar._tickfont', 'plotly.graph_objs.scatter.marker.colorbar._tickformatstop', 'plotly.graph_objs.scatter.marker.colorbar._title', 'plotly.graph_objs.scatter.marker.colorbar.title', 'plotly.graph_objs.scatter.marker.colorbar.title._font', 'plotly.graph_objs.scatter.selected', 'plotly.graph_objs.scatter.selected._marker', 'plotly.graph_objs.scatter.selected._textfont', 'plotly.graph_objs.scatter.unselected', 'plotly.graph_objs.scatter.unselected._marker', 'plotly.graph_objs.scatter.unselected._textfont', 'plotly.graph_objs.scatter3d', 'plotly.graph_objs.scatter3d._error_x', 'plotly.graph_objs.scatter3d._error_y', 'plotly.graph_objs.scatter3d._error_z', 'plotly.graph_objs.scatter3d._hoverlabel', 'plotly.graph_objs.scatter3d._line', 'plotly.graph_objs.scatter3d._marker', 'plotly.graph_objs.scatter3d._projection', 'plotly.graph_objs.scatter3d._stream', 'plotly.graph_objs.scatter3d._textfont', 'plotly.graph_objs.scatter3d.hoverlabel', 'plotly.graph_objs.scatter3d.hoverlabel._font', 'plotly.graph_objs.scatter3d.line', 'plotly.graph_objs.scatter3d.line._colorbar', 'plotly.graph_objs.scatter3d.line.colorbar', 'plotly.graph_objs.scatter3d.line.colorbar._tickfont', 'plotly.graph_objs.scatter3d.line.colorbar._tickformatstop', 'plotly.graph_objs.scatter3d.line.colorbar._title', 'plotly.graph_objs.scatter3d.line.colorbar.title', 'plotly.graph_objs.scatter3d.line.colorbar.title._font', 'plotly.graph_objs.scatter3d.marker', 'plotly.graph_objs.scatter3d.marker._colorbar', 'plotly.graph_objs.scatter3d.marker._line', 'plotly.graph_objs.scatter3d.marker.colorbar', 'plotly.graph_objs.scatter3d.marker.colorbar._tickfont', 'plotly.graph_objs.scatter3d.marker.colorbar._tickformatstop', 'plotly.graph_objs.scatter3d.marker.colorbar._title', 'plotly.graph_objs.scatter3d.marker.colorbar.title', 'plotly.graph_objs.scatter3d.marker.colorbar.title._font', 'plotly.graph_objs.scatter3d.projection', 'plotly.graph_objs.scatter3d.projection._x', 'plotly.graph_objs.scatter3d.projection._y', 'plotly.graph_objs.scatter3d.projection._z', 'plotly.graph_objs.scattercarpet', 'plotly.graph_objs.scattercarpet._hoverlabel', 'plotly.graph_objs.scattercarpet._line', 'plotly.graph_objs.scattercarpet._marker', 'plotly.graph_objs.scattercarpet._selected', 'plotly.graph_objs.scattercarpet._stream', 'plotly.graph_objs.scattercarpet._textfont', 'plotly.graph_objs.scattercarpet._unselected', 'plotly.graph_objs.scattercarpet.hoverlabel', 'plotly.graph_objs.scattercarpet.hoverlabel._font', 'plotly.graph_objs.scattercarpet.marker', 'plotly.graph_objs.scattercarpet.marker._colorbar', 'plotly.graph_objs.scattercarpet.marker._gradient', 'plotly.graph_objs.scattercarpet.marker._line', 'plotly.graph_objs.scattercarpet.marker.colorbar', 'plotly.graph_objs.scattercarpet.marker.colorbar._tickfont', 'plotly.graph_objs.scattercarpet.marker.colorbar._tickformatstop', 'plotly.graph_objs.scattercarpet.marker.colorbar._title', 'plotly.graph_objs.scattercarpet.marker.colorbar.title', 'plotly.graph_objs.scattercarpet.marker.colorbar.title._font', 'plotly.graph_objs.scattercarpet.selected', 'plotly.graph_objs.scattercarpet.selected._marker', 'plotly.graph_objs.scattercarpet.selected._textfont', 'plotly.graph_objs.scattercarpet.unselected', 'plotly.graph_objs.scattercarpet.unselected._marker', 'plotly.graph_objs.scattercarpet.unselected._textfont', 'plotly.graph_objs.scattergeo', 'plotly.graph_objs.scattergeo._hoverlabel', 'plotly.graph_objs.scattergeo._line', 'plotly.graph_objs.scattergeo._marker', 'plotly.graph_objs.scattergeo._selected', 'plotly.graph_objs.scattergeo._stream', 'plotly.graph_objs.scattergeo._textfont', 'plotly.graph_objs.scattergeo._unselected', 'plotly.graph_objs.scattergeo.hoverlabel', 'plotly.graph_objs.scattergeo.hoverlabel._font', 'plotly.graph_objs.scattergeo.marker', 'plotly.graph_objs.scattergeo.marker._colorbar', 'plotly.graph_objs.scattergeo.marker._gradient', 'plotly.graph_objs.scattergeo.marker._line', 'plotly.graph_objs.scattergeo.marker.colorbar', 'plotly.graph_objs.scattergeo.marker.colorbar._tickfont', 'plotly.graph_objs.scattergeo.marker.colorbar._tickformatstop', 'plotly.graph_objs.scattergeo.marker.colorbar._title', 'plotly.graph_objs.scattergeo.marker.colorbar.title', 'plotly.graph_objs.scattergeo.marker.colorbar.title._font', 'plotly.graph_objs.scattergeo.selected', 'plotly.graph_objs.scattergeo.selected._marker', 'plotly.graph_objs.scattergeo.selected._textfont', 'plotly.graph_objs.scattergeo.unselected', 'plotly.graph_objs.scattergeo.unselected._marker', 'plotly.graph_objs.scattergeo.unselected._textfont', 'plotly.graph_objs.scattergl', 'plotly.graph_objs.scattergl._error_x', 'plotly.graph_objs.scattergl._error_y', 'plotly.graph_objs.scattergl._hoverlabel', 'plotly.graph_objs.scattergl._line', 'plotly.graph_objs.scattergl._marker', 'plotly.graph_objs.scattergl._selected', 'plotly.graph_objs.scattergl._stream', 'plotly.graph_objs.scattergl._textfont', 'plotly.graph_objs.scattergl._unselected', 'plotly.graph_objs.scattergl.hoverlabel', 'plotly.graph_objs.scattergl.hoverlabel._font', 'plotly.graph_objs.scattergl.marker', 'plotly.graph_objs.scattergl.marker._colorbar', 'plotly.graph_objs.scattergl.marker._line', 'plotly.graph_objs.scattergl.marker.colorbar', 'plotly.graph_objs.scattergl.marker.colorbar._tickfont', 'plotly.graph_objs.scattergl.marker.colorbar._tickformatstop', 'plotly.graph_objs.scattergl.marker.colorbar._title', 'plotly.graph_objs.scattergl.marker.colorbar.title', 'plotly.graph_objs.scattergl.marker.colorbar.title._font', 'plotly.graph_objs.scattergl.selected', 'plotly.graph_objs.scattergl.selected._marker', 'plotly.graph_objs.scattergl.selected._textfont', 'plotly.graph_objs.scattergl.unselected', 'plotly.graph_objs.scattergl.unselected._marker', 'plotly.graph_objs.scattergl.unselected._textfont', 'plotly.graph_objs.scattermapbox', 'plotly.graph_objs.scattermapbox._hoverlabel', 'plotly.graph_objs.scattermapbox._line', 'plotly.graph_objs.scattermapbox._marker', 'plotly.graph_objs.scattermapbox._selected', 'plotly.graph_objs.scattermapbox._stream', 'plotly.graph_objs.scattermapbox._textfont', 'plotly.graph_objs.scattermapbox._unselected', 'plotly.graph_objs.scattermapbox.hoverlabel', 'plotly.graph_objs.scattermapbox.hoverlabel._font', 'plotly.graph_objs.scattermapbox.marker', 'plotly.graph_objs.scattermapbox.marker._colorbar', 'plotly.graph_objs.scattermapbox.marker.colorbar', 'plotly.graph_objs.scattermapbox.marker.colorbar._tickfont', 'plotly.graph_objs.scattermapbox.marker.colorbar._tickformatstop', 'plotly.graph_objs.scattermapbox.marker.colorbar._title', 'plotly.graph_objs.scattermapbox.marker.colorbar.title', 'plotly.graph_objs.scattermapbox.marker.colorbar.title._font', 'plotly.graph_objs.scattermapbox.selected', 'plotly.graph_objs.scattermapbox.selected._marker', 'plotly.graph_objs.scattermapbox.unselected', 'plotly.graph_objs.scattermapbox.unselected._marker', 'plotly.graph_objs.scatterpolar', 'plotly.graph_objs.scatterpolar._hoverlabel', 'plotly.graph_objs.scatterpolar._line', 'plotly.graph_objs.scatterpolar._marker', 'plotly.graph_objs.scatterpolar._selected', 'plotly.graph_objs.scatterpolar._stream', 'plotly.graph_objs.scatterpolar._textfont', 'plotly.graph_objs.scatterpolar._unselected', 'plotly.graph_objs.scatterpolar.hoverlabel', 'plotly.graph_objs.scatterpolar.hoverlabel._font', 'plotly.graph_objs.scatterpolar.marker', 'plotly.graph_objs.scatterpolar.marker._colorbar', 'plotly.graph_objs.scatterpolar.marker._gradient', 'plotly.graph_objs.scatterpolar.marker._line', 'plotly.graph_objs.scatterpolar.marker.colorbar', 'plotly.graph_objs.scatterpolar.marker.colorbar._tickfont', 'plotly.graph_objs.scatterpolar.marker.colorbar._tickformatstop', 'plotly.graph_objs.scatterpolar.marker.colorbar._title', 'plotly.graph_objs.scatterpolar.marker.colorbar.title', 'plotly.graph_objs.scatterpolar.marker.colorbar.title._font', 'plotly.graph_objs.scatterpolar.selected', 'plotly.graph_objs.scatterpolar.selected._marker', 'plotly.graph_objs.scatterpolar.selected._textfont', 'plotly.graph_objs.scatterpolar.unselected', 'plotly.graph_objs.scatterpolar.unselected._marker', 'plotly.graph_objs.scatterpolar.unselected._textfont', 'plotly.graph_objs.scatterpolargl', 'plotly.graph_objs.scatterpolargl._hoverlabel', 'plotly.graph_objs.scatterpolargl._line', 'plotly.graph_objs.scatterpolargl._marker', 'plotly.graph_objs.scatterpolargl._selected', 'plotly.graph_objs.scatterpolargl._stream', 'plotly.graph_objs.scatterpolargl._textfont', 'plotly.graph_objs.scatterpolargl._unselected', 'plotly.graph_objs.scatterpolargl.hoverlabel', 'plotly.graph_objs.scatterpolargl.hoverlabel._font', 'plotly.graph_objs.scatterpolargl.marker', 'plotly.graph_objs.scatterpolargl.marker._colorbar', 'plotly.graph_objs.scatterpolargl.marker._line', 'plotly.graph_objs.scatterpolargl.marker.colorbar', 'plotly.graph_objs.scatterpolargl.marker.colorbar._tickfont', 'plotly.graph_objs.scatterpolargl.marker.colorbar._tickformatstop', 'plotly.graph_objs.scatterpolargl.marker.colorbar._title', 'plotly.graph_objs.scatterpolargl.marker.colorbar.title', 'plotly.graph_objs.scatterpolargl.marker.colorbar.title._font', 'plotly.graph_objs.scatterpolargl.selected', 'plotly.graph_objs.scatterpolargl.selected._marker', 'plotly.graph_objs.scatterpolargl.selected._textfont', 'plotly.graph_objs.scatterpolargl.unselected', 'plotly.graph_objs.scatterpolargl.unselected._marker', 'plotly.graph_objs.scatterpolargl.unselected._textfont', 'plotly.graph_objs.scatterternary', 'plotly.graph_objs.scatterternary._hoverlabel', 'plotly.graph_objs.scatterternary._line', 'plotly.graph_objs.scatterternary._marker', 'plotly.graph_objs.scatterternary._selected', 'plotly.graph_objs.scatterternary._stream', 'plotly.graph_objs.scatterternary._textfont', 'plotly.graph_objs.scatterternary._unselected', 'plotly.graph_objs.scatterternary.hoverlabel', 'plotly.graph_objs.scatterternary.hoverlabel._font', 'plotly.graph_objs.scatterternary.marker', 'plotly.graph_objs.scatterternary.marker._colorbar', 'plotly.graph_objs.scatterternary.marker._gradient', 'plotly.graph_objs.scatterternary.marker._line', 'plotly.graph_objs.scatterternary.marker.colorbar', 'plotly.graph_objs.scatterternary.marker.colorbar._tickfont', 'plotly.graph_objs.scatterternary.marker.colorbar._tickformatstop', 'plotly.graph_objs.scatterternary.marker.colorbar._title', 'plotly.graph_objs.scatterternary.marker.colorbar.title', 'plotly.graph_objs.scatterternary.marker.colorbar.title._font', 'plotly.graph_objs.scatterternary.selected', 'plotly.graph_objs.scatterternary.selected._marker', 'plotly.graph_objs.scatterternary.selected._textfont', 'plotly.graph_objs.scatterternary.unselected', 'plotly.graph_objs.scatterternary.unselected._marker', 'plotly.graph_objs.scatterternary.unselected._textfont', 'plotly.graph_objs.splom', 'plotly.graph_objs.splom._diagonal', 'plotly.graph_objs.splom._dimension', 'plotly.graph_objs.splom._hoverlabel', 'plotly.graph_objs.splom._marker', 'plotly.graph_objs.splom._selected', 'plotly.graph_objs.splom._stream', 'plotly.graph_objs.splom._unselected', 'plotly.graph_objs.splom.dimension', 'plotly.graph_objs.splom.dimension._axis', 'plotly.graph_objs.splom.hoverlabel', 'plotly.graph_objs.splom.hoverlabel._font', 'plotly.graph_objs.splom.marker', 'plotly.graph_objs.splom.marker._colorbar', 'plotly.graph_objs.splom.marker._line', 'plotly.graph_objs.splom.marker.colorbar', 'plotly.graph_objs.splom.marker.colorbar._tickfont', 'plotly.graph_objs.splom.marker.colorbar._tickformatstop', 'plotly.graph_objs.splom.marker.colorbar._title', 'plotly.graph_objs.splom.marker.colorbar.title', 'plotly.graph_objs.splom.marker.colorbar.title._font', 'plotly.graph_objs.splom.selected', 'plotly.graph_objs.splom.selected._marker', 'plotly.graph_objs.splom.unselected', 'plotly.graph_objs.splom.unselected._marker', 'plotly.graph_objs.streamtube', 'plotly.graph_objs.streamtube._colorbar', 'plotly.graph_objs.streamtube._hoverlabel', 'plotly.graph_objs.streamtube._lighting', 'plotly.graph_objs.streamtube._lightposition', 'plotly.graph_objs.streamtube._starts', 'plotly.graph_objs.streamtube._stream', 'plotly.graph_objs.streamtube.colorbar', 'plotly.graph_objs.streamtube.colorbar._tickfont', 'plotly.graph_objs.streamtube.colorbar._tickformatstop', 'plotly.graph_objs.streamtube.colorbar._title', 'plotly.graph_objs.streamtube.colorbar.title', 'plotly.graph_objs.streamtube.colorbar.title._font', 'plotly.graph_objs.streamtube.hoverlabel', 'plotly.graph_objs.streamtube.hoverlabel._font', 'plotly.graph_objs.sunburst', 'plotly.graph_objs.sunburst._domain', 'plotly.graph_objs.sunburst._hoverlabel', 'plotly.graph_objs.sunburst._insidetextfont', 'plotly.graph_objs.sunburst._leaf', 'plotly.graph_objs.sunburst._marker', 'plotly.graph_objs.sunburst._outsidetextfont', 'plotly.graph_objs.sunburst._root', 'plotly.graph_objs.sunburst._stream', 'plotly.graph_objs.sunburst._textfont', 'plotly.graph_objs.sunburst.hoverlabel', 'plotly.graph_objs.sunburst.hoverlabel._font', 'plotly.graph_objs.sunburst.marker', 'plotly.graph_objs.sunburst.marker._colorbar', 'plotly.graph_objs.sunburst.marker._line', 'plotly.graph_objs.sunburst.marker.colorbar', 'plotly.graph_objs.sunburst.marker.colorbar._tickfont', 'plotly.graph_objs.sunburst.marker.colorbar._tickformatstop', 'plotly.graph_objs.sunburst.marker.colorbar._title', 'plotly.graph_objs.sunburst.marker.colorbar.title', 'plotly.graph_objs.sunburst.marker.colorbar.title._font', 'plotly.graph_objs.surface', 'plotly.graph_objs.surface._colorbar', 'plotly.graph_objs.surface._contours', 'plotly.graph_objs.surface._hoverlabel', 'plotly.graph_objs.surface._lighting', 'plotly.graph_objs.surface._lightposition', 'plotly.graph_objs.surface._stream', 'plotly.graph_objs.surface.colorbar', 'plotly.graph_objs.surface.colorbar._tickfont', 'plotly.graph_objs.surface.colorbar._tickformatstop', 'plotly.graph_objs.surface.colorbar._title', 'plotly.graph_objs.surface.colorbar.title', 'plotly.graph_objs.surface.colorbar.title._font', 'plotly.graph_objs.surface.contours', 'plotly.graph_objs.surface.contours._x', 'plotly.graph_objs.surface.contours._y', 'plotly.graph_objs.surface.contours._z', 'plotly.graph_objs.surface.contours.x', 'plotly.graph_objs.surface.contours.x._project', 'plotly.graph_objs.surface.contours.y', 'plotly.graph_objs.surface.contours.y._project', 'plotly.graph_objs.surface.contours.z', 'plotly.graph_objs.surface.contours.z._project', 'plotly.graph_objs.surface.hoverlabel', 'plotly.graph_objs.surface.hoverlabel._font', 'plotly.graph_objs.table', 'plotly.graph_objs.table._cells', 'plotly.graph_objs.table._domain', 'plotly.graph_objs.table._header', 'plotly.graph_objs.table._hoverlabel', 'plotly.graph_objs.table._stream', 'plotly.graph_objs.table.cells', 'plotly.graph_objs.table.cells._fill', 'plotly.graph_objs.table.cells._font', 'plotly.graph_objs.table.cells._line', 'plotly.graph_objs.table.header', 'plotly.graph_objs.table.header._fill', 'plotly.graph_objs.table.header._font', 'plotly.graph_objs.table.header._line', 'plotly.graph_objs.table.hoverlabel', 'plotly.graph_objs.table.hoverlabel._font', 'plotly.graph_objs.treemap', 'plotly.graph_objs.treemap._domain', 'plotly.graph_objs.treemap._hoverlabel', 'plotly.graph_objs.treemap._insidetextfont', 'plotly.graph_objs.treemap._marker', 'plotly.graph_objs.treemap._outsidetextfont', 'plotly.graph_objs.treemap._pathbar', 'plotly.graph_objs.treemap._root', 'plotly.graph_objs.treemap._stream', 'plotly.graph_objs.treemap._textfont', 'plotly.graph_objs.treemap._tiling', 'plotly.graph_objs.treemap.hoverlabel', 'plotly.graph_objs.treemap.hoverlabel._font', 'plotly.graph_objs.treemap.marker', 'plotly.graph_objs.treemap.marker._colorbar', 'plotly.graph_objs.treemap.marker._line', 'plotly.graph_objs.treemap.marker._pad', 'plotly.graph_objs.treemap.marker.colorbar', 'plotly.graph_objs.treemap.marker.colorbar._tickfont', 'plotly.graph_objs.treemap.marker.colorbar._tickformatstop', 'plotly.graph_objs.treemap.marker.colorbar._title', 'plotly.graph_objs.treemap.marker.colorbar.title', 'plotly.graph_objs.treemap.marker.colorbar.title._font', 'plotly.graph_objs.treemap.pathbar', 'plotly.graph_objs.treemap.pathbar._textfont', 'plotly.graph_objs.violin', 'plotly.graph_objs.violin._box', 'plotly.graph_objs.violin._hoverlabel', 'plotly.graph_objs.violin._line', 'plotly.graph_objs.violin._marker', 'plotly.graph_objs.violin._meanline', 'plotly.graph_objs.violin._selected', 'plotly.graph_objs.violin._stream', 'plotly.graph_objs.violin._unselected', 'plotly.graph_objs.violin.box', 'plotly.graph_objs.violin.box._line', 'plotly.graph_objs.violin.hoverlabel', 'plotly.graph_objs.violin.hoverlabel._font', 'plotly.graph_objs.violin.marker', 'plotly.graph_objs.violin.marker._line', 'plotly.graph_objs.violin.selected', 'plotly.graph_objs.violin.selected._marker', 'plotly.graph_objs.violin.unselected', 'plotly.graph_objs.violin.unselected._marker', 'plotly.graph_objs.volume', 'plotly.graph_objs.volume._caps', 'plotly.graph_objs.volume._colorbar', 'plotly.graph_objs.volume._contour', 'plotly.graph_objs.volume._hoverlabel', 'plotly.graph_objs.volume._lighting', 'plotly.graph_objs.volume._lightposition', 'plotly.graph_objs.volume._slices', 'plotly.graph_objs.volume._spaceframe', 'plotly.graph_objs.volume._stream', 'plotly.graph_objs.volume._surface', 'plotly.graph_objs.volume.caps', 'plotly.graph_objs.volume.caps._x', 'plotly.graph_objs.volume.caps._y', 'plotly.graph_objs.volume.caps._z', 'plotly.graph_objs.volume.colorbar', 'plotly.graph_objs.volume.colorbar._tickfont', 'plotly.graph_objs.volume.colorbar._tickformatstop', 'plotly.graph_objs.volume.colorbar._title', 'plotly.graph_objs.volume.colorbar.title', 'plotly.graph_objs.volume.colorbar.title._font', 'plotly.graph_objs.volume.hoverlabel', 'plotly.graph_objs.volume.hoverlabel._font', 'plotly.graph_objs.volume.slices', 'plotly.graph_objs.volume.slices._x', 'plotly.graph_objs.volume.slices._y', 'plotly.graph_objs.volume.slices._z', 'plotly.graph_objs.waterfall', 'plotly.graph_objs.waterfall._connector', 'plotly.graph_objs.waterfall._decreasing', 'plotly.graph_objs.waterfall._hoverlabel', 'plotly.graph_objs.waterfall._increasing', 'plotly.graph_objs.waterfall._insidetextfont', 'plotly.graph_objs.waterfall._outsidetextfont', 'plotly.graph_objs.waterfall._stream', 'plotly.graph_objs.waterfall._textfont', 'plotly.graph_objs.waterfall._totals', 'plotly.graph_objs.waterfall.connector', 'plotly.graph_objs.waterfall.connector._line', 'plotly.graph_objs.waterfall.decreasing', 'plotly.graph_objs.waterfall.decreasing._marker', 'plotly.graph_objs.waterfall.decreasing.marker', 'plotly.graph_objs.waterfall.decreasing.marker._line', 'plotly.graph_objs.waterfall.hoverlabel', 'plotly.graph_objs.waterfall.hoverlabel._font', 'plotly.graph_objs.waterfall.increasing', 'plotly.graph_objs.waterfall.increasing._marker', 'plotly.graph_objs.waterfall.increasing.marker', 'plotly.graph_objs.waterfall.increasing.marker._line', 'plotly.graph_objs.waterfall.totals', 'plotly.graph_objs.waterfall.totals._marker', 'plotly.graph_objs.waterfall.totals.marker', 'plotly.graph_objs.waterfall.totals.marker._line', 'plotly.graph_objs._figurewidget', 'plotly.basewidget', 'plotly.callbacks', 'plotly.utils', '_plotly_utils.data_utils', '_plotly_utils.png', 'plotly.serializers', 'plotly.version', 'plotly._version', 'plotly._widget_version', 'plotly.tools', 'plotly.exceptions', 'plotly.files', '_plotly_utils.files', 'plotly.offline', 'plotly.offline.offline', 'plotly.offline._plotlyjs_version', 'plotly.colors', '_plotly_utils.colors', '_plotly_utils.colors.qualitative', '_plotly_utils.colors._swatches', '_plotly_utils.colors.colorbrewer', '_plotly_utils.colors.carto', '_plotly_utils.colors.sequential', '_plotly_utils.colors.plotlyjs', '_plotly_utils.colors.cmocean', '_plotly_utils.colors.diverging', '_plotly_utils.colors.cyclical', 'plotly.io', 'plotly.io._kaleido', 'plotly.io._utils', 'plotly.io.orca', 'plotly.io._orca', 'retrying', 'psutil', 'psutil._common', 'psutil._compat', 'psutil._psosx', 'psutil._psposix', 'psutil._psutil_osx', 'psutil._psutil_posix', 'plotly.io.kaleido', 'plotly.io._json', 'plotly.io._templates', 'plotly.io._html', 'webbrowser', 'plotly.io._renderers', 'plotly.io._base_renderers', 'http.server', 'nbformat', 'nbformat._version', 'nbformat.v1', 'nbformat.v1.nbbase', 'ipython_genutils.ipstruct', 'nbformat.v1.nbjson', 'nbformat.v1.rwbase', 'nbformat.v1.convert', 'nbformat.v2', 'nbformat.v2.nbbase', 'nbformat.v2.nbjson', 'nbformat.v2.rwbase', 'nbformat._compat', 'nbformat.v2.nbxml', 'nbformat.v2.nbpy', 'nbformat.v2.convert', 'nbformat.v3', 'nbformat.v3.nbbase', 'nbformat.v3.nbjson', 'nbformat.v3.rwbase', 'nbformat.v3.nbpy', 'nbformat.v3.convert', 'nbformat.v4', 'nbformat.v4.nbbase', 'nbformat.notebooknode', 'nbformat.corpus', 'nbformat.corpus.words', 'nbformat.v4.nbjson', 'nbformat.v4.rwbase', 'nbformat.v4.convert', 'nbformat.sentinel', 'nbformat.validator', 'nbformat.json_compat', 'jsonschema', 'jsonschema.exceptions', 'attr', 'attr.converters', 'attr._make', 'attr._config', 'attr._compat', 'attr.exceptions', 'attr.filters', 'attr.validators', 'attr._funcs', 'jsonschema._utils', 'jsonschema.compat', 'jsonschema._format', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'jsonschema._types', 'pyrsistent', 'pyrsistent._pmap', 'pyrsistent._pvector', 'pyrsistent._transformations', 'pvectorc', 'pyrsistent._pset', 'pyrsistent._pbag', 'pyrsistent._plist', 'pyrsistent._pdeque', 'pyrsistent._checked_types', 'pyrsistent._field_common', 'pyrsistent._precord', 'pyrsistent._pclass', 'pyrsistent._immutable', 'pyrsistent._helpers', 'pyrsistent._toolz', 'jsonschema.validators', 'jsonschema._legacy_validators', 'jsonschema._validators', 'importlib_metadata', 'zipp', 'importlib_metadata._compat', 'typing_extensions', 'configparser', 'nbformat.reader', 'nbformat.converter', 'plotly.io.base_renderers', 'plotly.data', 'cufflinks.exceptions', 'cufflinks.helper', 'cufflinks.tools', 'plotly.figure_factory', 'plotly.figure_factory._2d_density', 'plotly.graph_objs.graph_objs', 'plotly.figure_factory._annotated_heatmap', 'plotly.figure_factory.utils', 'plotly.validators', 'plotly.validators._waterfall', 'plotly.validators._volume', 'plotly.validators._violin', 'plotly.validators._treemap', 'plotly.validators._table', 'plotly.validators._surface', 'plotly.validators._sunburst', 'plotly.validators._streamtube', 'plotly.validators._splom', 'plotly.validators._scatterternary', 'plotly.validators._scatterpolargl', 'plotly.validators._scatterpolar', 'plotly.validators._scattermapbox', 'plotly.validators._scattergl', 'plotly.validators._scattergeo', 'plotly.validators._scattercarpet', 'plotly.validators._scatter3d', 'plotly.validators._scatter', 'plotly.validators._sankey', 'plotly.validators._pointcloud', 'plotly.validators._pie', 'plotly.validators._parcoords', 'plotly.validators._parcats', 'plotly.validators._ohlc', 'plotly.validators._mesh3d', 'plotly.validators._isosurface', 'plotly.validators._indicator', 'plotly.validators._image', 'plotly.validators._histogram2dcontour', 'plotly.validators._histogram2d', 'plotly.validators._histogram', 'plotly.validators._heatmapgl', 'plotly.validators._heatmap', 'plotly.validators._funnelarea', 'plotly.validators._funnel', 'plotly.validators._densitymapbox', 'plotly.validators._contourcarpet', 'plotly.validators._contour', 'plotly.validators._cone', 'plotly.validators._choroplethmapbox', 'plotly.validators._choropleth', 'plotly.validators._carpet', 'plotly.validators._candlestick', 'plotly.validators._box', 'plotly.validators._barpolar', 'plotly.validators._bar', 'plotly.validators._area', 'plotly.validators._layout', 'plotly.validators._frames', 'plotly.validators._data', 'plotly.validators.heatmap', 'plotly.validators.heatmap._zsrc', 'plotly.validators.heatmap._zsmooth', 'plotly.validators.heatmap._zmin', 'plotly.validators.heatmap._zmid', 'plotly.validators.heatmap._zmax', 'plotly.validators.heatmap._zhoverformat', 'plotly.validators.heatmap._zauto', 'plotly.validators.heatmap._z', 'plotly.validators.heatmap._ytype', 'plotly.validators.heatmap._ysrc', 'plotly.validators.heatmap._yperiodalignment', 'plotly.validators.heatmap._yperiod0', 'plotly.validators.heatmap._yperiod', 'plotly.validators.heatmap._ygap', 'plotly.validators.heatmap._ycalendar', 'plotly.validators.heatmap._yaxis', 'plotly.validators.heatmap._y0', 'plotly.validators.heatmap._y', 'plotly.validators.heatmap._xtype', 'plotly.validators.heatmap._xsrc', 'plotly.validators.heatmap._xperiodalignment', 'plotly.validators.heatmap._xperiod0', 'plotly.validators.heatmap._xperiod', 'plotly.validators.heatmap._xgap', 'plotly.validators.heatmap._xcalendar', 'plotly.validators.heatmap._xaxis', 'plotly.validators.heatmap._x0', 'plotly.validators.heatmap._x', 'plotly.validators.heatmap._visible', 'plotly.validators.heatmap._uirevision', 'plotly.validators.heatmap._uid', 'plotly.validators.heatmap._transpose', 'plotly.validators.heatmap._textsrc', 'plotly.validators.heatmap._text', 'plotly.validators.heatmap._stream', 'plotly.validators.heatmap._showscale', 'plotly.validators.heatmap._showlegend', 'plotly.validators.heatmap._reversescale', 'plotly.validators.heatmap._opacity', 'plotly.validators.heatmap._name', 'plotly.validators.heatmap._metasrc', 'plotly.validators.heatmap._meta', 'plotly.validators.heatmap._legendgroup', 'plotly.validators.heatmap._idssrc', 'plotly.validators.heatmap._ids', 'plotly.validators.heatmap._hovertextsrc', 'plotly.validators.heatmap._hovertext', 'plotly.validators.heatmap._hovertemplatesrc', 'plotly.validators.heatmap._hovertemplate', 'plotly.validators.heatmap._hoverongaps', 'plotly.validators.heatmap._hoverlabel', 'plotly.validators.heatmap._hoverinfosrc', 'plotly.validators.heatmap._hoverinfo', 'plotly.validators.heatmap._dy', 'plotly.validators.heatmap._dx', 'plotly.validators.heatmap._customdatasrc', 'plotly.validators.heatmap._customdata', 'plotly.validators.heatmap._connectgaps', 'plotly.validators.heatmap._colorscale', 'plotly.validators.heatmap._colorbar', 'plotly.validators.heatmap._coloraxis', 'plotly.validators.heatmap._autocolorscale', 'plotly.figure_factory._bullet', 'plotly.figure_factory._candlestick', 'plotly.figure_factory._ohlc', 'plotly.figure_factory._dendrogram', 'scipy.cluster', 'scipy.cluster.vq', 'scipy.cluster._vq', 'scipy.cluster.hierarchy', 'scipy.cluster._hierarchy', 'scipy.cluster._optimal_leaf_ordering', 'plotly.figure_factory._distplot', 'plotly.figure_factory._facet_grid', 'plotly.figure_factory._gantt', 'plotly.graph_objects', 'plotly.figure_factory._quiver', 'plotly.figure_factory._scatterplot', 'plotly.figure_factory._streamline', 'plotly.figure_factory._table', 'plotly.figure_factory._trisurf', 'plotly.figure_factory._violin', 'plotly.figure_factory._county_choropleth', 'plotly.figure_factory._hexbin_mapbox', 'plotly.express', 'plotly.express._imshow', 'plotly.express._core', 'plotly.express._special_inputs', 'plotly.express.imshow_utils', 'plotly.express._chart_types', 'plotly.express._doc', 'plotly.express.data', 'plotly.express.colors', 'cufflinks.ta', 'cufflinks.colors', 'colorlover', 'cufflinks.themes', 'cufflinks.pandastools', 'cufflinks.plotlytools', 'cufflinks.extract', 'cufflinks.quant_figure', 'cufflinks.version', 'visualizations', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-02-04 12:44:52,845 [56963] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=/Users/hcab/.matplotlib
2021-02-04 12:44:52,850 [56963] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from /Users/hcab/.matplotlib/fontlist-v330.json
2021-02-04 12:44:53,180 [56963] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-04 12:44:53,185 [56963] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-02-04 12:45:16,046 [56963] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
2021-02-04 12:45:16,049 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-02-04 12:45:16,049 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-02-04 12:45:16,049 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,050 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,050 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:45:16,050 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-02-04 12:45:16,051 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,051 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-02-04 12:45:16,051 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 12:45:16,051 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,051 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,051 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-02-04 12:45:16,052 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:45:16,052 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,052 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,052 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,052 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,053 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,053 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,054 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,054 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,054 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,054 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,054 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,054 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,055 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-02-04 12:45:16,055 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:45:16,058 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,060 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,062 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,062 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,062 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,062 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,067 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-02-04 12:45:16,080 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-02-04 12:45:16,080 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,080 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,081 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,081 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,081 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,081 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,081 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,081 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,081 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
2021-02-04 12:45:16,082 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Helvetica Neue DeskInterface' (HelveticaNeueDeskInterface.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,082 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,082 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,082 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,082 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,082 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,082 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,082 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,082 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,082 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-02-04 12:45:16,083 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-02-04 12:45:16,083 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,083 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
2021-02-04 12:45:16,083 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,083 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-02-04 12:45:16,083 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,083 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,083 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,084 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,084 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
2021-02-04 12:45:16,084 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,084 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,084 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,084 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,084 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,084 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,085 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 12:45:16,085 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,085 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,085 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,085 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,085 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,085 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,085 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,086 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,086 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Bold.otf) normal normal 800 condensed>) = 10.629999999999999
2021-02-04 12:45:16,086 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-02-04 12:45:16,086 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,086 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,086 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,086 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:45:16,086 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,086 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
2021-02-04 12:45:16,087 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,087 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,087 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,087 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,087 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,087 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,087 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,088 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,088 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Thin.otf) normal normal 400 condensed>) = 10.25
2021-02-04 12:45:16,088 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,088 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,088 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,088 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,089 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,089 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,089 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,089 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,089 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,090 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
2021-02-04 12:45:16,090 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,090 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
2021-02-04 12:45:16,090 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,090 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
2021-02-04 12:45:16,091 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,091 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,091 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,091 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,091 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,091 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Regular.otf) normal normal 400 condensed>) = 10.25
2021-02-04 12:45:16,092 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,092 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,092 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,092 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,092 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,092 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,093 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,093 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,093 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,093 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,093 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Medium.otf) normal normal 500 condensed>) = 10.344999999999999
2021-02-04 12:45:16,093 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,093 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,093 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,093 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,094 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,094 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,094 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYork.ttf) normal normal 425 normal>) = 10.07375
2021-02-04 12:45:16,094 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,094 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,094 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,095 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Semibold.otf) normal normal 700 condensed>) = 10.535
2021-02-04 12:45:16,095 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
2021-02-04 12:45:16,095 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,095 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:45:16,095 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,095 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
2021-02-04 12:45:16,095 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,096 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,096 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,096 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,096 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,096 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,096 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
2021-02-04 12:45:16,097 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Bold.otf) normal normal 700 condensed>) = 10.535
2021-02-04 12:45:16,097 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,097 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Display' (SFCompactDisplay.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,097 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2021-02-04 12:45:16,097 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,097 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 300 normal>) = 11.145
2021-02-04 12:45:16,097 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,097 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,098 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,098 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,098 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,098 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,098 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,098 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,099 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,099 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,099 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,099 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,099 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,099 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,099 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,100 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,100 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,100 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
2021-02-04 12:45:16,101 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,101 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,101 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,101 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
2021-02-04 12:45:16,101 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,101 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,101 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,101 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,102 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,102 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,102 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,102 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,102 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
2021-02-04 12:45:16,102 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2021-02-04 12:45:16,102 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,102 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,102 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,103 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,103 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,103 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,103 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,103 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,103 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,103 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,104 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,104 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:45:16,104 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,104 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,104 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,104 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactTextItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:45:16,104 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,104 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 12:45:16,105 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,105 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF Compact Text' (SFCompactText.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,105 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
2021-02-04 12:45:16,105 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,105 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,105 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,106 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
2021-02-04 12:45:16,106 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,106 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,106 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,106 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,106 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,106 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,106 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,107 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,107 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,107 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,107 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,107 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,107 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,107 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,107 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:45:16,107 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2021-02-04 12:45:16,108 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
2021-02-04 12:45:16,108 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,108 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Regular.otf) normal normal 600 condensed>) = 10.44
2021-02-04 12:45:16,108 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
2021-02-04 12:45:16,108 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,109 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
2021-02-04 12:45:16,109 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
2021-02-04 12:45:16,109 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,109 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,109 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,110 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,110 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
2021-02-04 12:45:16,110 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,110 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,110 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,111 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2021-02-04 12:45:16,111 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,111 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,111 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,111 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:45:16,111 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
2021-02-04 12:45:16,111 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,112 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Light.otf) normal normal 500 condensed>) = 10.344999999999999
2021-02-04 12:45:16,112 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
2021-02-04 12:45:16,112 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
2021-02-04 12:45:16,112 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,112 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,112 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,112 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,112 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,112 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 12:45:16,112 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,113 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:45:16,113 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,113 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
2021-02-04 12:45:16,113 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
2021-02-04 12:45:16,113 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,113 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,113 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,113 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,114 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,114 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
2021-02-04 12:45:16,114 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,114 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,114 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
2021-02-04 12:45:16,114 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,114 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,114 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,114 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,115 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,115 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,115 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,115 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,115 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
2021-02-04 12:45:16,116 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 425 normal>) = 11.07375
2021-02-04 12:45:16,116 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
2021-02-04 12:45:16,116 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,116 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,116 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,116 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-02-04 12:45:16,117 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,117 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,117 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,117 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 300 normal>) = 10.145
2021-02-04 12:45:16,118 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,118 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,118 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,118 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Light.otf) normal normal 300 condensed>) = 10.344999999999999
2021-02-04 12:45:16,118 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
2021-02-04 12:45:16,119 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,119 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,119 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Ultralight.otf) normal normal 400 condensed>) = 10.25
2021-02-04 12:45:16,119 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
2021-02-04 12:45:16,119 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,119 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Heavy.otf) normal normal 800 condensed>) = 10.629999999999999
2021-02-04 12:45:16,120 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,120 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,120 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,120 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
2021-02-04 12:45:16,120 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,120 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,120 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,120 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,120 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Black.otf) normal normal 900 condensed>) = 10.725
2021-02-04 12:45:16,121 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,121 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,121 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,121 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,121 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,122 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,122 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,122 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,122 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-02-04 12:45:16,122 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,123 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,123 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,123 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
2021-02-04 12:45:16,123 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,123 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,124 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2021-02-04 12:45:16,124 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
2021-02-04 12:45:16,124 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,124 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
2021-02-04 12:45:16,125 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,125 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,125 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,125 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,125 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,125 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,126 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,126 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,126 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Display Condensed' (SFNSDisplayCondensed-Medium.otf) normal normal 600 condensed>) = 10.44
2021-02-04 12:45:16,126 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,126 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,126 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,126 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
2021-02-04 12:45:16,127 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,127 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,127 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,127 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,127 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,127 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,127 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
2021-02-04 12:45:16,127 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,127 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,128 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
2021-02-04 12:45:16,128 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font '.SF NS Text Condensed' (SFNSTextCondensed-Semibold.otf) normal normal 600 condensed>) = 10.44
2021-02-04 12:45:16,128 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
2021-02-04 12:45:16,128 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
2021-02-04 12:45:16,128 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
2021-02-04 12:45:16,128 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
2021-02-04 12:45:16,128 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,128 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2021-02-04 12:45:16,128 [56963] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
2021-02-04 12:45:16,129 [56963] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to DejaVu Sans ('/Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2021-02-04 13:01:11,620 [56963] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/pandas/core/frame.py
2021-02-04 13:01:11,752 [56963] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi
2021-02-04 13:01:11,764 [56963] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/pandas/__init__.py
2021-02-04 13:01:11,779 [56963] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/pandas/core/__init__.py
2021-02-04 13:01:11,881 [56963] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/pandas/core/generic.py
2021-02-04 13:01:11,944 [56963] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/pandas/core/base.py
2021-02-04 13:01:11,961 [56963] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/pandas/core/accessor.py
2021-02-04 13:01:12,015 [56963] DEBUG    parso.cache:166: [JupyterRequire] pickle loaded: /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/pandas/core/indexing.py
2021-02-04 13:01:13,609 [56963] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-02-04 13:01:13,609 [56963] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-02-04 13:01:13,609 [56963] DEBUG    parso.python.diff:297: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-02-04 13:01:13,610 [56963] DEBUG    parso.python.diff:425: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-02-04 13:01:13,610 [56963] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-02-04 13:05:14,881 [56963] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/base/model.py:568: ConvergenceWarning:

Maximum Likelihood optimization failed to converge. Check mle_retvals


2021-02-04 13:05:23,375 [56963] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/base/model.py:568: ConvergenceWarning:

Maximum Likelihood optimization failed to converge. Check mle_retvals


2021-02-04 13:05:26,174 [56963] WARNING  py.warnings:99: [JupyterRequire] /Users/hcab/opt/miniconda3/envs/interactive_sk/lib/python3.6/site-packages/statsmodels/base/model.py:568: ConvergenceWarning:

Maximum Likelihood optimization failed to converge. Check mle_retvals


2021-02-04 13:07:06,150 [56963] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-02-04 13:07:06,151 [56963] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-02-04 13:07:06,152 [56963] INFO     root:247: [JupyterRequire] Initializing comms.
2021-02-04 13:07:06,157 [56963] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-02-04 13:07:06,158 [56963] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-02-04 13:07:06,159 [56963] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-09 09:06:21,313 [72895] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-09 09:06:21,314 [72895] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-09 09:06:21,314 [72895] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-09 09:06:21,316 [72895] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-09 09:06:21,316 [72895] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-09 09:06:21,316 [72895] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-07-09 09:06:22,101 [72895] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-07-09 09:06:22,102 [72895] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-07-09 09:06:22,102 [72895] INFO     root:247: [JupyterRequire] Initializing comms.
2021-07-09 09:06:22,108 [72895] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-07-09 09:06:22,109 [72895] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-07-09 09:06:22,109 [72895] DEBUG    root:97: [JupyterRequire] Registering comm targets.
